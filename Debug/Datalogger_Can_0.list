
Datalogger_Can_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005260  08005260  00015260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080052cc  080052cc  000152cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080052d0  080052d0  000152d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080052d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000134  24000010  080052e4  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  24000144  080052e4  00020144  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ea44  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c81  00000000  00000000  0002ea82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b30  00000000  00000000  00030708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a58  00000000  00000000  00031238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035da5  00000000  00000000  00031c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000cb22  00000000  00000000  00067a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015883d  00000000  00000000  00074557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001ccd94  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002e90  00000000  00000000  001ccde4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005248 	.word	0x08005248

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005248 	.word	0x08005248

080002d8 <send_info_CAN>:


// BEGIN Funções de Escrita

void send_info_CAN(FDCAN_HandleTypeDef hfdcan, uint8_t id, uint64_t value)
{
 80002d8:	b084      	sub	sp, #16
 80002da:	b580      	push	{r7, lr}
 80002dc:	b08e      	sub	sp, #56	; 0x38
 80002de:	af02      	add	r7, sp, #8
 80002e0:	f107 0c38 	add.w	ip, r7, #56	; 0x38
 80002e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t TxData[8] = {0};
 80002e8:	2300      	movs	r3, #0
 80002ea:	627b      	str	r3, [r7, #36]	; 0x24
 80002ec:	2300      	movs	r3, #0
 80002ee:	62bb      	str	r3, [r7, #40]	; 0x28
	FDCAN_TxHeaderTypeDef TxHeader;
    uint8_t number_of_bytes = minimum_number_of_bytes_to_represent_value(value);
 80002f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80002f4:	f000 f85b 	bl	80003ae <minimum_number_of_bytes_to_represent_value>
 80002f8:	4603      	mov	r3, r0
 80002fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


    uint64_to_array_of_uint8(TxData, value, number_of_bytes);
 80002fe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800030c:	4608      	mov	r0, r1
 800030e:	f000 f81c 	bl	800034a <uint64_to_array_of_uint8>
	configure_message_header(&TxHeader, id, number_of_bytes);
 8000312:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000316:	f897 10d8 	ldrb.w	r1, [r7, #216]	; 0xd8
 800031a:	463b      	mov	r3, r7
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f871 	bl	8000404 <configure_message_header>

  // Boa pratica colocar dentro de um if (eu acho)
  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, TxData)!= HAL_OK)
 8000322:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000326:	463b      	mov	r3, r7
 8000328:	4619      	mov	r1, r3
 800032a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800032e:	f001 fa32 	bl	8001796 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <send_info_CAN+0x64>
  {
	Error_Handler();
 8000338:	f000 fca0 	bl	8000c7c <Error_Handler>
  }
}
 800033c:	bf00      	nop
 800033e:	3730      	adds	r7, #48	; 0x30
 8000340:	46bd      	mov	sp, r7
 8000342:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000346:	b004      	add	sp, #16
 8000348:	4770      	bx	lr

0800034a <uint64_to_array_of_uint8>:

// Função feita com base em https://www.educative.io/answers/how-to-convert-an-integer-into-a-specific-byte-array-in-cpp
void uint64_to_array_of_uint8(uint8_t *bytes, uint64_t value, uint8_t number_of_bytes)
{
 800034a:	b4f0      	push	{r4, r5, r6, r7}
 800034c:	b086      	sub	sp, #24
 800034e:	af00      	add	r7, sp, #0
 8000350:	60f8      	str	r0, [r7, #12]
 8000352:	e9c7 2300 	strd	r2, r3, [r7]
  for (int byte_index = 0; byte_index < number_of_bytes; byte_index++)
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
 800035a:	e01d      	b.n	8000398 <uint64_to_array_of_uint8+0x4e>
  {
    bytes[byte_index] = (value >> ((number_of_bytes - byte_index - 1) * 8)) & 0xFF;
 800035c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	1ad3      	subs	r3, r2, r3
 8000364:	3b01      	subs	r3, #1
 8000366:	00d9      	lsls	r1, r3, #3
 8000368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	f1a1 0020 	sub.w	r0, r1, #32
 8000374:	fa22 f401 	lsr.w	r4, r2, r1
 8000378:	fa03 f606 	lsl.w	r6, r3, r6
 800037c:	4334      	orrs	r4, r6
 800037e:	fa23 f000 	lsr.w	r0, r3, r0
 8000382:	4304      	orrs	r4, r0
 8000384:	fa23 f501 	lsr.w	r5, r3, r1
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	68fa      	ldr	r2, [r7, #12]
 800038c:	4413      	add	r3, r2
 800038e:	b2e2      	uxtb	r2, r4
 8000390:	701a      	strb	r2, [r3, #0]
  for (int byte_index = 0; byte_index < number_of_bytes; byte_index++)
 8000392:	697b      	ldr	r3, [r7, #20]
 8000394:	3301      	adds	r3, #1
 8000396:	617b      	str	r3, [r7, #20]
 8000398:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800039c:	697a      	ldr	r2, [r7, #20]
 800039e:	429a      	cmp	r2, r3
 80003a0:	dbdc      	blt.n	800035c <uint64_to_array_of_uint8+0x12>
  }
}
 80003a2:	bf00      	nop
 80003a4:	bf00      	nop
 80003a6:	3718      	adds	r7, #24
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bcf0      	pop	{r4, r5, r6, r7}
 80003ac:	4770      	bx	lr

080003ae <minimum_number_of_bytes_to_represent_value>:

uint8_t minimum_number_of_bytes_to_represent_value(uint64_t num)
{
 80003ae:	b480      	push	{r7}
 80003b0:	b087      	sub	sp, #28
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t number_of_bytes = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	75fb      	strb	r3, [r7, #23]

    uint64_t copy_number = num;
 80003bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80003c0:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Desloca o numero de 8 em 8 bits até alcançar 0 e assim saber o tamanho minimo de bytes que pode representar o valor
    while (copy_number != 0)
 80003c4:	e00e      	b.n	80003e4 <minimum_number_of_bytes_to_represent_value+0x36>
    {
    	copy_number >>= 8;
 80003c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80003ca:	f04f 0200 	mov.w	r2, #0
 80003ce:	f04f 0300 	mov.w	r3, #0
 80003d2:	0a02      	lsrs	r2, r0, #8
 80003d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80003d8:	0a0b      	lsrs	r3, r1, #8
 80003da:	e9c7 2302 	strd	r2, r3, [r7, #8]
        number_of_bytes++;
 80003de:	7dfb      	ldrb	r3, [r7, #23]
 80003e0:	3301      	adds	r3, #1
 80003e2:	75fb      	strb	r3, [r7, #23]
    while (copy_number != 0)
 80003e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	d1ec      	bne.n	80003c6 <minimum_number_of_bytes_to_represent_value+0x18>
    }

    // Caso o valor seja 0, precisamos lidar com o fato que é necessario mandar pelo menos 1 bytes mostrando que o valor é 0 e não um pacote vazio
    if (number_of_bytes == 0)
 80003ec:	7dfb      	ldrb	r3, [r7, #23]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d101      	bne.n	80003f6 <minimum_number_of_bytes_to_represent_value+0x48>
    {
    	number_of_bytes = 1;
 80003f2:	2301      	movs	r3, #1
 80003f4:	75fb      	strb	r3, [r7, #23]
    }

    return number_of_bytes;
 80003f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	371c      	adds	r7, #28
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <configure_message_header>:

void configure_message_header(FDCAN_TxHeaderTypeDef *TxHeader, uint8_t id, uint8_t num_of_bytes)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	70fb      	strb	r3, [r7, #3]
 8000410:	4613      	mov	r3, r2
 8000412:	70bb      	strb	r3, [r7, #2]
	uint32_t dataLength_ST_notation = number_of_bytes_to_ST_notation(num_of_bytes);
 8000414:	78bb      	ldrb	r3, [r7, #2]
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f868 	bl	80004ec <number_of_bytes_to_ST_notation>
 800041c:	60f8      	str	r0, [r7, #12]

	TxHeader->Identifier = id;
 800041e:	78fa      	ldrb	r2, [r7, #3]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	601a      	str	r2, [r3, #0]
	TxHeader->IdType = FDCAN_STANDARD_ID;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2200      	movs	r2, #0
 8000428:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = dataLength_ST_notation;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	60da      	str	r2, [r3, #12]
	TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2200      	movs	r2, #0
 8000440:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_FD_CAN;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000448:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2200      	movs	r2, #0
 800044e:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
}
 8000456:	bf00      	nop
 8000458:	3710      	adds	r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <array_of_uint8_to_uint64>:


// BEGIN Funções de Leitura

uint64_t array_of_uint8_to_uint64(uint8_t *bytes, uint8_t num_of_bytes)
{
 800045e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	70f9      	strb	r1, [r7, #3]
    uint64_t total_value = 0;
 800046a:	f04f 0000 	mov.w	r0, #0
 800046e:	f04f 0100 	mov.w	r1, #0
 8000472:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint64_t copy_of_byte_to_uint64;

    for(int byte_index = 0; byte_index < num_of_bytes; byte_index++)
 8000476:	2100      	movs	r1, #0
 8000478:	6179      	str	r1, [r7, #20]
 800047a:	e029      	b.n	80004d0 <array_of_uint8_to_uint64+0x72>
    {
        // Quando não fazemos essa copia, o limite é de 4 bytes pois estoura o uint8_8, como descrito nesse post
        // https://stackoverflow.com/questions/4201301/warning-left-shift-count-width-of-type
    	copy_of_byte_to_uint64 = bytes[byte_index];
 800047c:	6979      	ldr	r1, [r7, #20]
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	4401      	add	r1, r0
 8000482:	7809      	ldrb	r1, [r1, #0]
 8000484:	b2c9      	uxtb	r1, r1
 8000486:	2000      	movs	r0, #0
 8000488:	468a      	mov	sl, r1
 800048a:	4683      	mov	fp, r0
 800048c:	e9c7 ab02 	strd	sl, fp, [r7, #8]

    	// Link para o entendimento https://learn.microsoft.com/en-us/cpp/cpp/left-shift-and-right-shift-operators-input-and-output?view=msvc-170
        total_value += ( copy_of_byte_to_uint64 << ((num_of_bytes - byte_index - 1) * 8));
 8000490:	78f8      	ldrb	r0, [r7, #3]
 8000492:	6979      	ldr	r1, [r7, #20]
 8000494:	1a41      	subs	r1, r0, r1
 8000496:	3901      	subs	r1, #1
 8000498:	00cc      	lsls	r4, r1, #3
 800049a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800049e:	f1a4 0620 	sub.w	r6, r4, #32
 80004a2:	f1c4 0520 	rsb	r5, r4, #32
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	fa00 f606 	lsl.w	r6, r0, r6
 80004ae:	4333      	orrs	r3, r6
 80004b0:	fa20 f505 	lsr.w	r5, r0, r5
 80004b4:	432b      	orrs	r3, r5
 80004b6:	fa00 f204 	lsl.w	r2, r0, r4
 80004ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80004be:	eb10 0802 	adds.w	r8, r0, r2
 80004c2:	eb41 0903 	adc.w	r9, r1, r3
 80004c6:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(int byte_index = 0; byte_index < num_of_bytes; byte_index++)
 80004ca:	6979      	ldr	r1, [r7, #20]
 80004cc:	3101      	adds	r1, #1
 80004ce:	6179      	str	r1, [r7, #20]
 80004d0:	78f9      	ldrb	r1, [r7, #3]
 80004d2:	6978      	ldr	r0, [r7, #20]
 80004d4:	4288      	cmp	r0, r1
 80004d6:	dbd1      	blt.n	800047c <array_of_uint8_to_uint64+0x1e>
    }

   return total_value;
 80004d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80004dc:	4610      	mov	r0, r2
 80004de:	4619      	mov	r1, r3
 80004e0:	3720      	adds	r7, #32
 80004e2:	46bd      	mov	sp, r7
 80004e4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80004e8:	4770      	bx	lr
	...

080004ec <number_of_bytes_to_ST_notation>:

// BEGIN Funções Auxiliares

// Caso o valor seja de 11 bytes, o retorno sera 0, isso devera ser consertado com o uso da FD_CAN, uma sugestão seria tratar o dado pra 11 virar 12, switch não suporta comparações no case
uint32_t number_of_bytes_to_ST_notation(uint8_t num_of_bytes)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	switch (num_of_bytes)
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b40      	cmp	r3, #64	; 0x40
 80004fa:	f200 80b4 	bhi.w	8000666 <number_of_bytes_to_ST_notation+0x17a>
 80004fe:	a201      	add	r2, pc, #4	; (adr r2, 8000504 <number_of_bytes_to_ST_notation+0x18>)
 8000500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000504:	08000609 	.word	0x08000609
 8000508:	0800060d 	.word	0x0800060d
 800050c:	08000613 	.word	0x08000613
 8000510:	08000619 	.word	0x08000619
 8000514:	0800061f 	.word	0x0800061f
 8000518:	08000625 	.word	0x08000625
 800051c:	0800062b 	.word	0x0800062b
 8000520:	08000631 	.word	0x08000631
 8000524:	08000637 	.word	0x08000637
 8000528:	08000667 	.word	0x08000667
 800052c:	08000667 	.word	0x08000667
 8000530:	08000667 	.word	0x08000667
 8000534:	0800063d 	.word	0x0800063d
 8000538:	08000667 	.word	0x08000667
 800053c:	08000667 	.word	0x08000667
 8000540:	08000667 	.word	0x08000667
 8000544:	08000643 	.word	0x08000643
 8000548:	08000667 	.word	0x08000667
 800054c:	08000667 	.word	0x08000667
 8000550:	08000667 	.word	0x08000667
 8000554:	08000649 	.word	0x08000649
 8000558:	08000667 	.word	0x08000667
 800055c:	08000667 	.word	0x08000667
 8000560:	08000667 	.word	0x08000667
 8000564:	0800064f 	.word	0x0800064f
 8000568:	08000667 	.word	0x08000667
 800056c:	08000667 	.word	0x08000667
 8000570:	08000667 	.word	0x08000667
 8000574:	08000667 	.word	0x08000667
 8000578:	08000667 	.word	0x08000667
 800057c:	08000667 	.word	0x08000667
 8000580:	08000667 	.word	0x08000667
 8000584:	08000655 	.word	0x08000655
 8000588:	08000667 	.word	0x08000667
 800058c:	08000667 	.word	0x08000667
 8000590:	08000667 	.word	0x08000667
 8000594:	08000667 	.word	0x08000667
 8000598:	08000667 	.word	0x08000667
 800059c:	08000667 	.word	0x08000667
 80005a0:	08000667 	.word	0x08000667
 80005a4:	08000667 	.word	0x08000667
 80005a8:	08000667 	.word	0x08000667
 80005ac:	08000667 	.word	0x08000667
 80005b0:	08000667 	.word	0x08000667
 80005b4:	08000667 	.word	0x08000667
 80005b8:	08000667 	.word	0x08000667
 80005bc:	08000667 	.word	0x08000667
 80005c0:	08000667 	.word	0x08000667
 80005c4:	0800065b 	.word	0x0800065b
 80005c8:	08000667 	.word	0x08000667
 80005cc:	08000667 	.word	0x08000667
 80005d0:	08000667 	.word	0x08000667
 80005d4:	08000667 	.word	0x08000667
 80005d8:	08000667 	.word	0x08000667
 80005dc:	08000667 	.word	0x08000667
 80005e0:	08000667 	.word	0x08000667
 80005e4:	08000667 	.word	0x08000667
 80005e8:	08000667 	.word	0x08000667
 80005ec:	08000667 	.word	0x08000667
 80005f0:	08000667 	.word	0x08000667
 80005f4:	08000667 	.word	0x08000667
 80005f8:	08000667 	.word	0x08000667
 80005fc:	08000667 	.word	0x08000667
 8000600:	08000667 	.word	0x08000667
 8000604:	08000661 	.word	0x08000661
	{
	case 0:
		return 0x00000000U;
 8000608:	2300      	movs	r3, #0
 800060a:	e02d      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 1:
		return 0x00010000U;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	e02a      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 2:
		return 0x00020000U;
 8000612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000616:	e027      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 3:
		return 0x00030000U;
 8000618:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800061c:	e024      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 4:
		return 0x00040000U;
 800061e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000622:	e021      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 5:
		return 0x00050000U;
 8000624:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000628:	e01e      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 6:
		return 0x00060000U;
 800062a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800062e:	e01b      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 7:
		return 0x00070000U;
 8000630:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8000634:	e018      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 8:
		return 0x00080000U;
 8000636:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800063a:	e015      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 12:
		return 0x00090000U;
 800063c:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8000640:	e012      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 16:
		return 0x000A0000U;
 8000642:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8000646:	e00f      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 20:
		return 0x000B0000U;
 8000648:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 800064c:	e00c      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 24:
		return 0x000C0000U;
 800064e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000652:	e009      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 32:
		return 0x000D0000U;
 8000654:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 8000658:	e006      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 48:
		return 0x000E0000U;
 800065a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800065e:	e003      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	case 64:
		return 0x000F0000U;
 8000660:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8000664:	e000      	b.n	8000668 <number_of_bytes_to_ST_notation+0x17c>
	default:
		return 0x00000000U;
 8000666:	2300      	movs	r3, #0
	}
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <ST_notation_to_number_of_bytes>:

uint8_t ST_notation_to_number_of_bytes(uint32_t ST_notation)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	switch (ST_notation)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8000682:	f000 8095 	beq.w	80007b0 <ST_notation_to_number_of_bytes+0x13c>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800068c:	f200 8092 	bhi.w	80007b4 <ST_notation_to_number_of_bytes+0x140>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000696:	f000 8089 	beq.w	80007ac <ST_notation_to_number_of_bytes+0x138>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80006a0:	f200 8088 	bhi.w	80007b4 <ST_notation_to_number_of_bytes+0x140>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 80006aa:	d07d      	beq.n	80007a8 <ST_notation_to_number_of_bytes+0x134>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 80006b2:	d87f      	bhi.n	80007b4 <ST_notation_to_number_of_bytes+0x140>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80006ba:	d073      	beq.n	80007a4 <ST_notation_to_number_of_bytes+0x130>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80006c2:	d877      	bhi.n	80007b4 <ST_notation_to_number_of_bytes+0x140>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80006ca:	d069      	beq.n	80007a0 <ST_notation_to_number_of_bytes+0x12c>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80006d2:	d86f      	bhi.n	80007b4 <ST_notation_to_number_of_bytes+0x140>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80006da:	d05f      	beq.n	800079c <ST_notation_to_number_of_bytes+0x128>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80006e2:	d867      	bhi.n	80007b4 <ST_notation_to_number_of_bytes+0x140>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 80006ea:	d055      	beq.n	8000798 <ST_notation_to_number_of_bytes+0x124>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 80006f2:	d85f      	bhi.n	80007b4 <ST_notation_to_number_of_bytes+0x140>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80006fa:	d04b      	beq.n	8000794 <ST_notation_to_number_of_bytes+0x120>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000702:	d857      	bhi.n	80007b4 <ST_notation_to_number_of_bytes+0x140>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800070a:	d041      	beq.n	8000790 <ST_notation_to_number_of_bytes+0x11c>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8000712:	d84f      	bhi.n	80007b4 <ST_notation_to_number_of_bytes+0x140>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800071a:	d037      	beq.n	800078c <ST_notation_to_number_of_bytes+0x118>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000722:	d847      	bhi.n	80007b4 <ST_notation_to_number_of_bytes+0x140>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800072a:	d02d      	beq.n	8000788 <ST_notation_to_number_of_bytes+0x114>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000732:	d83f      	bhi.n	80007b4 <ST_notation_to_number_of_bytes+0x140>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800073a:	d023      	beq.n	8000784 <ST_notation_to_number_of_bytes+0x110>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000742:	d837      	bhi.n	80007b4 <ST_notation_to_number_of_bytes+0x140>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800074a:	d019      	beq.n	8000780 <ST_notation_to_number_of_bytes+0x10c>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000752:	d82f      	bhi.n	80007b4 <ST_notation_to_number_of_bytes+0x140>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800075a:	d00f      	beq.n	800077c <ST_notation_to_number_of_bytes+0x108>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000762:	d827      	bhi.n	80007b4 <ST_notation_to_number_of_bytes+0x140>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d004      	beq.n	8000774 <ST_notation_to_number_of_bytes+0x100>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000770:	d002      	beq.n	8000778 <ST_notation_to_number_of_bytes+0x104>
 8000772:	e01f      	b.n	80007b4 <ST_notation_to_number_of_bytes+0x140>
	{
	case 0x00000000U:
		return 0;
 8000774:	2300      	movs	r3, #0
 8000776:	e01e      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x00010000U:
		return 1;
 8000778:	2301      	movs	r3, #1
 800077a:	e01c      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x00020000U:
		return 2;
 800077c:	2302      	movs	r3, #2
 800077e:	e01a      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x00030000U:
		return 3;
 8000780:	2303      	movs	r3, #3
 8000782:	e018      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x00040000U:
		return 4;
 8000784:	2304      	movs	r3, #4
 8000786:	e016      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x00050000U:
		return 5;
 8000788:	2305      	movs	r3, #5
 800078a:	e014      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x00060000U:
		return 6;
 800078c:	2306      	movs	r3, #6
 800078e:	e012      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x00070000U:
		return 7;
 8000790:	2307      	movs	r3, #7
 8000792:	e010      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x00080000U:
		return 8;
 8000794:	2308      	movs	r3, #8
 8000796:	e00e      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x00090000U:
		return 12;
 8000798:	230c      	movs	r3, #12
 800079a:	e00c      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x000A0000U:
		return 16;
 800079c:	2310      	movs	r3, #16
 800079e:	e00a      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x000B0000U:
		return 20;
 80007a0:	2314      	movs	r3, #20
 80007a2:	e008      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x000C0000U:
		return 24;
 80007a4:	2318      	movs	r3, #24
 80007a6:	e006      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x000D0000U:
		return 32;
 80007a8:	2320      	movs	r3, #32
 80007aa:	e004      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x000E0000U:
		return 48;
 80007ac:	2330      	movs	r3, #48	; 0x30
 80007ae:	e002      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	case 0x000F0000U:
		return 64;
 80007b0:	2340      	movs	r3, #64	; 0x40
 80007b2:	e000      	b.n	80007b6 <ST_notation_to_number_of_bytes+0x142>
	default:
		return 0;
 80007b4:	2300      	movs	r3, #0
	}
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <HAL_FDCAN_RxFifo0Callback>:



// Ignorar, será uma das funções de leitura no futuro
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d028      	beq.n	800082a <HAL_FDCAN_RxFifo0Callback+0x66>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_FDCAN_RxFifo0Callback+0x70>)
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <HAL_FDCAN_RxFifo0Callback+0x74>)
 80007dc:	2140      	movs	r1, #64	; 0x40
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f001 f834 	bl	800184c <HAL_FDCAN_GetRxMessage>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80007ea:	f000 fa47 	bl	8000c7c <Error_Handler>
    }
    else
    {

    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80007ee:	2200      	movs	r2, #0
 80007f0:	2101      	movs	r1, #1
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f001 f998 	bl	8001b28 <HAL_FDCAN_ActivateNotification>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 80007fe:	f000 fa3d 	bl	8000c7c <Error_Handler>
    }

    number_of_bytes_received = ST_notation_to_number_of_bytes(RxHeader.DataLength);
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff34 	bl	8000674 <ST_notation_to_number_of_bytes>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000812:	701a      	strb	r2, [r3, #0]
    received = array_of_uint8_to_uint64(RxData, number_of_bytes_received);
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <HAL_FDCAN_RxFifo0Callback+0x70>)
 800081c:	f7ff fe1f 	bl	800045e <array_of_uint8_to_uint64>
 8000820:	4602      	mov	r2, r0
 8000822:	460b      	mov	r3, r1
 8000824:	4906      	ldr	r1, [pc, #24]	; (8000840 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2400011c 	.word	0x2400011c
 8000838:	240000f4 	.word	0x240000f4
 800083c:	24000130 	.word	0x24000130
 8000840:	24000138 	.word	0x24000138

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b0a9      	sub	sp, #164	; 0xa4
 8000848:	af28      	add	r7, sp, #160	; 0xa0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800084a:	f000 fbc9 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084e:	f000 f8c1 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 f9bb 	bl	8000bcc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000856:	f000 f93d 	bl	8000ad4 <MX_FDCAN1_Init>
  MX_RNG_Init();
 800085a:	f000 f9a1 	bl	8000ba0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 800085e:	4851      	ldr	r0, [pc, #324]	; (80009a4 <main+0x160>)
 8000860:	f000 ff6e 	bl	8001740 <HAL_FDCAN_Start>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <main+0x2a>
  {
	  Error_Handler();
 800086a:	f000 fa07 	bl	8000c7c <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800086e:	2200      	movs	r2, #0
 8000870:	2101      	movs	r1, #1
 8000872:	484c      	ldr	r0, [pc, #304]	; (80009a4 <main+0x160>)
 8000874:	f001 f958 	bl	8001b28 <HAL_FDCAN_ActivateNotification>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <main+0x3e>
  {
    /* Notification Error */
    Error_Handler();
 800087e:	f000 f9fd 	bl	8000c7c <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    rngHandle.Instance = RNG;
 8000882:	4b49      	ldr	r3, [pc, #292]	; (80009a8 <main+0x164>)
 8000884:	4a49      	ldr	r2, [pc, #292]	; (80009ac <main+0x168>)
 8000886:	601a      	str	r2, [r3, #0]
	    HAL_RNG_Init(&rngHandle);
 8000888:	4847      	ldr	r0, [pc, #284]	; (80009a8 <main+0x164>)
 800088a:	f004 fbeb 	bl	8005064 <HAL_RNG_Init>


	    // Gera um numero aleatorio que define o tamanho do pacote que será enviado
	    // O numero enviado deveria ser aleatorio também, devido a preguiça ele só é o maior numero de cada byte
	    if (HAL_RNG_GenerateRandomNumber(&rngHandle, &randomNumber) == HAL_OK)
 800088e:	4948      	ldr	r1, [pc, #288]	; (80009b0 <main+0x16c>)
 8000890:	4845      	ldr	r0, [pc, #276]	; (80009a8 <main+0x164>)
 8000892:	f004 fc49 	bl	8005128 <HAL_RNG_GenerateRandomNumber>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d17a      	bne.n	8000992 <main+0x14e>
	    {
	    	if (randomNumber < (UINT32_MAX /8))
 800089c:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <main+0x16c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d207      	bcs.n	80008b8 <main+0x74>
			{
	    		sent = 255;
 80008a8:	4942      	ldr	r1, [pc, #264]	; (80009b4 <main+0x170>)
 80008aa:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80008ae:	f04f 0300 	mov.w	r3, #0
 80008b2:	e9c1 2300 	strd	r2, r3, [r1]
 80008b6:	e059      	b.n	800096c <main+0x128>

			}
			else if (randomNumber < (UINT32_MAX /8 * 2))
 80008b8:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <main+0x16c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a3e      	ldr	r2, [pc, #248]	; (80009b8 <main+0x174>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d807      	bhi.n	80008d2 <main+0x8e>
			{
				sent = 65535;
 80008c2:	493c      	ldr	r1, [pc, #240]	; (80009b4 <main+0x170>)
 80008c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	e9c1 2300 	strd	r2, r3, [r1]
 80008d0:	e04c      	b.n	800096c <main+0x128>

			}
			else if (randomNumber < (UINT32_MAX /8 * 3))
 80008d2:	4b37      	ldr	r3, [pc, #220]	; (80009b0 <main+0x16c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a39      	ldr	r2, [pc, #228]	; (80009bc <main+0x178>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d807      	bhi.n	80008ec <main+0xa8>
			{
				sent = 16777215;
 80008dc:	4935      	ldr	r1, [pc, #212]	; (80009b4 <main+0x170>)
 80008de:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80008e2:	f04f 0300 	mov.w	r3, #0
 80008e6:	e9c1 2300 	strd	r2, r3, [r1]
 80008ea:	e03f      	b.n	800096c <main+0x128>

			}
			else if (randomNumber < (UINT32_MAX /8 * 4))
 80008ec:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <main+0x16c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a33      	ldr	r2, [pc, #204]	; (80009c0 <main+0x17c>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d807      	bhi.n	8000906 <main+0xc2>
			{
				sent = 4294967295;
 80008f6:	492f      	ldr	r1, [pc, #188]	; (80009b4 <main+0x170>)
 80008f8:	f04f 32ff 	mov.w	r2, #4294967295
 80008fc:	f04f 0300 	mov.w	r3, #0
 8000900:	e9c1 2300 	strd	r2, r3, [r1]
 8000904:	e032      	b.n	800096c <main+0x128>

			}
			else if (randomNumber < (UINT32_MAX /8 * 5))
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <main+0x16c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a2e      	ldr	r2, [pc, #184]	; (80009c4 <main+0x180>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d807      	bhi.n	8000920 <main+0xdc>
			{
				sent = 1099511627775;
 8000910:	4928      	ldr	r1, [pc, #160]	; (80009b4 <main+0x170>)
 8000912:	f04f 32ff 	mov.w	r2, #4294967295
 8000916:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800091a:	e9c1 2300 	strd	r2, r3, [r1]
 800091e:	e025      	b.n	800096c <main+0x128>

			}
			else if (randomNumber < (UINT32_MAX /8 * 6))
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <main+0x16c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a28      	ldr	r2, [pc, #160]	; (80009c8 <main+0x184>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d807      	bhi.n	800093a <main+0xf6>
			{
				sent = 281474976710655;
 800092a:	4922      	ldr	r1, [pc, #136]	; (80009b4 <main+0x170>)
 800092c:	f04f 32ff 	mov.w	r2, #4294967295
 8000930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000934:	e9c1 2300 	strd	r2, r3, [r1]
 8000938:	e018      	b.n	800096c <main+0x128>

			}
			else if (randomNumber < (UINT32_MAX /8 * 7))
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <main+0x16c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a23      	ldr	r2, [pc, #140]	; (80009cc <main+0x188>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d807      	bhi.n	8000954 <main+0x110>
			{
				sent = 72057594037927935;
 8000944:	491b      	ldr	r1, [pc, #108]	; (80009b4 <main+0x170>)
 8000946:	f04f 32ff 	mov.w	r2, #4294967295
 800094a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800094e:	e9c1 2300 	strd	r2, r3, [r1]
 8000952:	e00b      	b.n	800096c <main+0x128>

			}
			else if (randomNumber < (UINT32_MAX /8 * 8))
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <main+0x16c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f113 0f09 	cmn.w	r3, #9
 800095c:	d806      	bhi.n	800096c <main+0x128>
			{
				// Um warning de que o numero será forcadamente um unsigned é dado, então já estabeleço que ele é unsigned
				sent = 18446744073709551615U;
 800095e:	4915      	ldr	r1, [pc, #84]	; (80009b4 <main+0x170>)
 8000960:	f04f 32ff 	mov.w	r2, #4294967295
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
 8000968:	e9c1 2300 	strd	r2, r3, [r1]
			}

	    	send_info_CAN(hfdcan1, 12, sent);
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <main+0x170>)
 800096e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000972:	4c0c      	ldr	r4, [pc, #48]	; (80009a4 <main+0x160>)
 8000974:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8000978:	230c      	movs	r3, #12
 800097a:	9324      	str	r3, [sp, #144]	; 0x90
 800097c:	4668      	mov	r0, sp
 800097e:	f104 0310 	add.w	r3, r4, #16
 8000982:	2290      	movs	r2, #144	; 0x90
 8000984:	4619      	mov	r1, r3
 8000986:	f004 fc49 	bl	800521c <memcpy>
 800098a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800098e:	f7ff fca3 	bl	80002d8 <send_info_CAN>

	    }

	  // Luz usada só para saber que loop está acontecendo
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 8000992:	2140      	movs	r1, #64	; 0x40
 8000994:	480e      	ldr	r0, [pc, #56]	; (80009d0 <main+0x18c>)
 8000996:	f002 f818 	bl	80029ca <HAL_GPIO_TogglePin>


      HAL_Delay (1000);
 800099a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099e:	f000 fbb1 	bl	8001104 <HAL_Delay>
	    rngHandle.Instance = RNG;
 80009a2:	e76e      	b.n	8000882 <main+0x3e>
 80009a4:	2400002c 	.word	0x2400002c
 80009a8:	240000e0 	.word	0x240000e0
 80009ac:	48021800 	.word	0x48021800
 80009b0:	24000124 	.word	0x24000124
 80009b4:	24000128 	.word	0x24000128
 80009b8:	3ffffffd 	.word	0x3ffffffd
 80009bc:	5ffffffc 	.word	0x5ffffffc
 80009c0:	7ffffffb 	.word	0x7ffffffb
 80009c4:	9ffffffa 	.word	0x9ffffffa
 80009c8:	bffffff9 	.word	0xbffffff9
 80009cc:	dffffff8 	.word	0xdffffff8
 80009d0:	58020c00 	.word	0x58020c00

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09c      	sub	sp, #112	; 0x70
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	224c      	movs	r2, #76	; 0x4c
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f004 fc28 	bl	8005238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2220      	movs	r2, #32
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f004 fc22 	bl	8005238 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009f4:	2002      	movs	r0, #2
 80009f6:	f002 f803 	bl	8002a00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b33      	ldr	r3, [pc, #204]	; (8000acc <SystemClock_Config+0xf8>)
 8000a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a02:	4a32      	ldr	r2, [pc, #200]	; (8000acc <SystemClock_Config+0xf8>)
 8000a04:	f023 0301 	bic.w	r3, r3, #1
 8000a08:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <SystemClock_Config+0xf8>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <SystemClock_Config+0xfc>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a1c:	4a2c      	ldr	r2, [pc, #176]	; (8000ad0 <SystemClock_Config+0xfc>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <SystemClock_Config+0xfc>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a30:	bf00      	nop
 8000a32:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <SystemClock_Config+0xfc>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a3e:	d1f8      	bne.n	8000a32 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000a40:	2322      	movs	r3, #34	; 0x22
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a50:	2302      	movs	r3, #2
 8000a52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a54:	2300      	movs	r3, #0
 8000a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000a5c:	2309      	movs	r3, #9
 8000a5e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 19;
 8000a64:	2313      	movs	r3, #19
 8000a66:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a70:	2302      	movs	r3, #2
 8000a72:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a78:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fff8 	bl	8002a74 <HAL_RCC_OscConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a8a:	f000 f8f7 	bl	8000c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8e:	233f      	movs	r3, #63	; 0x3f
 8000a90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f002 fc38 	bl	8003328 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000abe:	f000 f8dd 	bl	8000c7c <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3770      	adds	r7, #112	; 0x70
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	58000400 	.word	0x58000400
 8000ad0:	58024800 	.word	0x58024800

08000ad4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000ada:	4a30      	ldr	r2, [pc, #192]	; (8000b9c <MX_FDCAN1_Init+0xc8>)
 8000adc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000ade:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8000ae6:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000ae8:	2204      	movs	r2, #4
 8000aea:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000aec:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000af2:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000afe:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000b0a:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b0c:	220d      	movs	r2, #13
 8000b0e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b12:	2202      	movs	r2, #2
 8000b14:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b1e:	2202      	movs	r2, #2
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b24:	220d      	movs	r2, #13
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b42:	2220      	movs	r2, #32
 8000b44:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b48:	2204      	movs	r2, #4
 8000b4a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b4e:	2220      	movs	r2, #32
 8000b50:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b60:	2204      	movs	r2, #4
 8000b62:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b66:	2220      	movs	r2, #32
 8000b68:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b72:	2220      	movs	r2, #32
 8000b74:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_FDCAN1_Init+0xc4>)
 8000b84:	f000 fbfe 	bl	8001384 <HAL_FDCAN_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000b8e:	f000 f875 	bl	8000c7c <Error_Handler>
     //Error_Handler();
  // }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2400002c 	.word	0x2400002c
 8000b9c:	4000a000 	.word	0x4000a000

08000ba0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <MX_RNG_Init+0x24>)
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <MX_RNG_Init+0x28>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_RNG_Init+0x24>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_RNG_Init+0x24>)
 8000bb2:	f004 fa57 	bl	8005064 <HAL_RNG_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000bbc:	f000 f85e 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	240000cc 	.word	0x240000cc
 8000bc8:	48021800 	.word	0x48021800

08000bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <MX_GPIO_Init+0xa8>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	4a22      	ldr	r2, [pc, #136]	; (8000c74 <MX_GPIO_Init+0xa8>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_GPIO_Init+0xa8>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_GPIO_Init+0xa8>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c06:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <MX_GPIO_Init+0xa8>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_GPIO_Init+0xa8>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_GPIO_Init+0xa8>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <MX_GPIO_Init+0xa8>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_GPIO_Init+0xa8>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2120      	movs	r1, #32
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_GPIO_Init+0xac>)
 8000c42:	f001 fea9 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	480b      	ldr	r0, [pc, #44]	; (8000c78 <MX_GPIO_Init+0xac>)
 8000c4c:	f001 fea4 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c50:	2360      	movs	r3, #96	; 0x60
 8000c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	4619      	mov	r1, r3
 8000c66:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_GPIO_Init+0xac>)
 8000c68:	f001 fce6 	bl	8002638 <HAL_GPIO_Init>

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58020c00 	.word	0x58020c00

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_MspInit+0x30>)
 8000c90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c94:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_MspInit+0x30>)
 8000c96:	f043 0302 	orr.w	r3, r3, #2
 8000c9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_MspInit+0x30>)
 8000ca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	58024400 	.word	0x58024400

08000cbc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0ba      	sub	sp, #232	; 0xe8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	22c0      	movs	r2, #192	; 0xc0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f004 faab 	bl	8005238 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <HAL_FDCAN_MspInit+0xd8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d14f      	bne.n	8000d8c <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000cec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fe3f 	bl	8003988 <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000d10:	f7ff ffb4 	bl	8000c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d14:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <HAL_FDCAN_MspInit+0xdc>)
 8000d16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <HAL_FDCAN_MspInit+0xdc>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_FDCAN_MspInit+0xdc>)
 8000d26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_FDCAN_MspInit+0xdc>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_FDCAN_MspInit+0xdc>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_FDCAN_MspInit+0xdc>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d6a:	2309      	movs	r3, #9
 8000d6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d74:	4619      	mov	r1, r3
 8000d76:	4809      	ldr	r0, [pc, #36]	; (8000d9c <HAL_FDCAN_MspInit+0xe0>)
 8000d78:	f001 fc5e 	bl	8002638 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2013      	movs	r0, #19
 8000d82:	f000 faca 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000d86:	2013      	movs	r0, #19
 8000d88:	f000 fae1 	bl	800134e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	37e8      	adds	r7, #232	; 0xe8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	4000a000 	.word	0x4000a000
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	58020400 	.word	0x58020400

08000da0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0b4      	sub	sp, #208	; 0xd0
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	22c0      	movs	r2, #192	; 0xc0
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 fa41 	bl	8005238 <memset>
  if(hrng->Instance==RNG)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_RNG_MspInit+0x6c>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d121      	bne.n	8000e04 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000dc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 fdd6 	bl	8003988 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8000de2:	f7ff ff4b 	bl	8000c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_RNG_MspInit+0x70>)
 8000de8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000dec:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_RNG_MspInit+0x70>)
 8000dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_RNG_MspInit+0x70>)
 8000df8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000e04:	bf00      	nop
 8000e06:	37d0      	adds	r7, #208	; 0xd0
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	48021800 	.word	0x48021800
 8000e10:	58024400 	.word	0x58024400

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f930 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <FDCAN1_IT0_IRQHandler+0x10>)
 8000e6e:	f000 fed5 	bl	8001c1c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2400002c 	.word	0x2400002c

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e80:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <SystemInit+0xe4>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a36      	ldr	r2, [pc, #216]	; (8000f60 <SystemInit+0xe4>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e90:	4b34      	ldr	r3, [pc, #208]	; (8000f64 <SystemInit+0xe8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 030f 	and.w	r3, r3, #15
 8000e98:	2b06      	cmp	r3, #6
 8000e9a:	d807      	bhi.n	8000eac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e9c:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <SystemInit+0xe8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f023 030f 	bic.w	r3, r3, #15
 8000ea4:	4a2f      	ldr	r2, [pc, #188]	; (8000f64 <SystemInit+0xe8>)
 8000ea6:	f043 0307 	orr.w	r3, r3, #7
 8000eaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000eac:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <SystemInit+0xec>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a2d      	ldr	r2, [pc, #180]	; (8000f68 <SystemInit+0xec>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000eb8:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <SystemInit+0xec>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <SystemInit+0xec>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4929      	ldr	r1, [pc, #164]	; (8000f68 <SystemInit+0xec>)
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <SystemInit+0xf0>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <SystemInit+0xe8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d007      	beq.n	8000ee6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <SystemInit+0xe8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f023 030f 	bic.w	r3, r3, #15
 8000ede:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <SystemInit+0xe8>)
 8000ee0:	f043 0307 	orr.w	r3, r3, #7
 8000ee4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <SystemInit+0xec>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <SystemInit+0xec>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <SystemInit+0xec>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <SystemInit+0xec>)
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <SystemInit+0xf4>)
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <SystemInit+0xec>)
 8000f00:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <SystemInit+0xf8>)
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <SystemInit+0xec>)
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <SystemInit+0xfc>)
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <SystemInit+0xec>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <SystemInit+0xec>)
 8000f12:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <SystemInit+0xfc>)
 8000f14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <SystemInit+0xec>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <SystemInit+0xec>)
 8000f1e:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <SystemInit+0xfc>)
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <SystemInit+0xec>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <SystemInit+0xec>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <SystemInit+0xec>)
 8000f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <SystemInit+0xec>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <SystemInit+0x100>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <SystemInit+0x104>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f46:	d202      	bcs.n	8000f4e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <SystemInit+0x108>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <SystemInit+0x10c>)
 8000f50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f54:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	52002000 	.word	0x52002000
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f70:	02020200 	.word	0x02020200
 8000f74:	01ff0000 	.word	0x01ff0000
 8000f78:	01010280 	.word	0x01010280
 8000f7c:	5c001000 	.word	0x5c001000
 8000f80:	ffff0000 	.word	0xffff0000
 8000f84:	51008108 	.word	0x51008108
 8000f88:	52004000 	.word	0x52004000

08000f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f90:	f7ff ff74 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f96:	490d      	ldr	r1, [pc, #52]	; (8000fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fac:	4c0a      	ldr	r4, [pc, #40]	; (8000fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fba:	f004 f90b 	bl	80051d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fbe:	f7ff fc41 	bl	8000844 <main>
  bx  lr
 8000fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fc8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fcc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fd0:	080052d4 	.word	0x080052d4
  ldr r2, =_sbss
 8000fd4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000fd8:	24000144 	.word	0x24000144

08000fdc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC3_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe6:	2003      	movs	r0, #3
 8000fe8:	f000 f98c 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fec:	f002 fb52 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_Init+0x68>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	f003 030f 	and.w	r3, r3, #15
 8000ffc:	4913      	ldr	r1, [pc, #76]	; (800104c <HAL_Init+0x6c>)
 8000ffe:	5ccb      	ldrb	r3, [r1, r3]
 8001000:	f003 031f 	and.w	r3, r3, #31
 8001004:	fa22 f303 	lsr.w	r3, r2, r3
 8001008:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_Init+0x68>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <HAL_Init+0x6c>)
 8001014:	5cd3      	ldrb	r3, [r2, r3]
 8001016:	f003 031f 	and.w	r3, r3, #31
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	fa22 f303 	lsr.w	r3, r2, r3
 8001020:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <HAL_Init+0x70>)
 8001022:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001024:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <HAL_Init+0x74>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102a:	200f      	movs	r0, #15
 800102c:	f000 f814 	bl	8001058 <HAL_InitTick>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e002      	b.n	8001040 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800103a:	f7ff fe25 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	58024400 	.word	0x58024400
 800104c:	080052ac 	.word	0x080052ac
 8001050:	24000004 	.word	0x24000004
 8001054:	24000000 	.word	0x24000000

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_InitTick+0x60>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e021      	b.n	80010b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <HAL_InitTick+0x64>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_InitTick+0x60>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f971 	bl	800136a <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00e      	b.n	80010b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	d80a      	bhi.n	80010ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f000 f93b 	bl	800131a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_InitTick+0x68>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2400000c 	.word	0x2400000c
 80010bc:	24000000 	.word	0x24000000
 80010c0:	24000008 	.word	0x24000008

080010c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x20>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x24>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <HAL_IncTick+0x24>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	2400000c 	.word	0x2400000c
 80010e8:	24000140 	.word	0x24000140

080010ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <HAL_GetTick+0x14>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	24000140 	.word	0x24000140

08001104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff ffee 	bl	80010ec <HAL_GetTick>
 8001110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111c:	d005      	beq.n	800112a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_Delay+0x44>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112a:	bf00      	nop
 800112c:	f7ff ffde 	bl	80010ec <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f7      	bhi.n	800112c <HAL_Delay+0x28>
  {
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2400000c 	.word	0x2400000c

0800114c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_GetREVID+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	0c1b      	lsrs	r3, r3, #16
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	5c001000 	.word	0x5c001000

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	4313      	orrs	r3, r2
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00
 80011a8:	05fa0000 	.word	0x05fa0000

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f7ff ff8e 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff29 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff40 	bl	80011ac <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff90 	bl	8001258 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5f 	bl	8001204 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff33 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa4 	bl	80012c0 <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b098      	sub	sp, #96	; 0x60
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800138c:	4a84      	ldr	r2, [pc, #528]	; (80015a0 <HAL_FDCAN_Init+0x21c>)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4611      	mov	r1, r2
 8001394:	224c      	movs	r2, #76	; 0x4c
 8001396:	4618      	mov	r0, r3
 8001398:	f003 ff40 	bl	800521c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e1c6      	b.n	8001734 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a7e      	ldr	r2, [pc, #504]	; (80015a4 <HAL_FDCAN_Init+0x220>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d106      	bne.n	80013be <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013b8:	461a      	mov	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fc72 	bl	8000cbc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699a      	ldr	r2, [r3, #24]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0210 	bic.w	r2, r2, #16
 80013e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013e8:	f7ff fe80 	bl	80010ec <HAL_GetTick>
 80013ec:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013ee:	e014      	b.n	800141a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013f0:	f7ff fe7c 	bl	80010ec <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b0a      	cmp	r3, #10
 80013fc:	d90d      	bls.n	800141a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2203      	movs	r2, #3
 8001412:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e18c      	b.n	8001734 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b08      	cmp	r3, #8
 8001426:	d0e3      	beq.n	80013f0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699a      	ldr	r2, [r3, #24]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0201 	orr.w	r2, r2, #1
 8001436:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001438:	f7ff fe58 	bl	80010ec <HAL_GetTick>
 800143c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800143e:	e014      	b.n	800146a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001440:	f7ff fe54 	bl	80010ec <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b0a      	cmp	r3, #10
 800144c:	d90d      	bls.n	800146a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001454:	f043 0201 	orr.w	r2, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e164      	b.n	8001734 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0e3      	beq.n	8001440 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699a      	ldr	r2, [r3, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0202 	orr.w	r2, r2, #2
 8001486:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7c1b      	ldrb	r3, [r3, #16]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d108      	bne.n	80014a2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699a      	ldr	r2, [r3, #24]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800149e:	619a      	str	r2, [r3, #24]
 80014a0:	e007      	b.n	80014b2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014b0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	7c5b      	ldrb	r3, [r3, #17]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d108      	bne.n	80014cc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	699a      	ldr	r2, [r3, #24]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014c8:	619a      	str	r2, [r3, #24]
 80014ca:	e007      	b.n	80014dc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014da:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7c9b      	ldrb	r3, [r3, #18]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d108      	bne.n	80014f6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014f2:	619a      	str	r2, [r3, #24]
 80014f4:	e007      	b.n	8001506 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699a      	ldr	r2, [r3, #24]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001504:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699a      	ldr	r2, [r3, #24]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800152a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691a      	ldr	r2, [r3, #16]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0210 	bic.w	r2, r2, #16
 800153a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d108      	bne.n	8001556 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0204 	orr.w	r2, r2, #4
 8001552:	619a      	str	r2, [r3, #24]
 8001554:	e030      	b.n	80015b8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d02c      	beq.n	80015b8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d020      	beq.n	80015a8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699a      	ldr	r2, [r3, #24]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001574:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0210 	orr.w	r2, r2, #16
 8001584:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d114      	bne.n	80015b8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0220 	orr.w	r2, r2, #32
 800159c:	619a      	str	r2, [r3, #24]
 800159e:	e00b      	b.n	80015b8 <HAL_FDCAN_Init+0x234>
 80015a0:	08005260 	.word	0x08005260
 80015a4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699a      	ldr	r2, [r3, #24]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0220 	orr.w	r2, r2, #32
 80015b6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	3b01      	subs	r3, #1
 80015be:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015c8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015d0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	3b01      	subs	r3, #1
 80015da:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015e0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015e2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015ec:	d115      	bne.n	800161a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	3b01      	subs	r3, #1
 80015fa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80015fc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	3b01      	subs	r3, #1
 8001604:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001606:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	3b01      	subs	r3, #1
 8001610:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001616:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001618:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00a      	beq.n	8001638 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001640:	4413      	add	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d011      	beq.n	800166a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800164e:	f023 0107 	bic.w	r1, r3, #7
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	3360      	adds	r3, #96	; 0x60
 800165a:	443b      	add	r3, r7
 800165c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d011      	beq.n	8001696 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800167a:	f023 0107 	bic.w	r1, r3, #7
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	3360      	adds	r3, #96	; 0x60
 8001686:	443b      	add	r3, r7
 8001688:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169a:	2b00      	cmp	r3, #0
 800169c:	d012      	beq.n	80016c4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80016a6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	3360      	adds	r3, #96	; 0x60
 80016b2:	443b      	add	r3, r7
 80016b4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80016b8:	011a      	lsls	r2, r3, #4
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d012      	beq.n	80016f2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80016d4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	3360      	adds	r3, #96	; 0x60
 80016e0:	443b      	add	r3, r7
 80016e2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80016e6:	021a      	lsls	r2, r3, #8
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a11      	ldr	r2, [pc, #68]	; (800173c <HAL_FDCAN_Init+0x3b8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d107      	bne.n	800170c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f022 0203 	bic.w	r2, r2, #3
 800170a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fd83 	bl	8002230 <FDCAN_CalcultateRamBlockAddresses>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001730:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001734:	4618      	mov	r0, r3
 8001736:	3760      	adds	r7, #96	; 0x60
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	4000a000 	.word	0x4000a000

08001740 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d111      	bne.n	8001778 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699a      	ldr	r2, [r3, #24]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0201 	bic.w	r2, r2, #1
 800176a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	e008      	b.n	800178a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800177e:	f043 0204 	orr.w	r2, r3, #4
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
  }
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d141      	bne.n	8001832 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017b6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017c4:	f043 0220 	orr.w	r2, r3, #32
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e038      	b.n	8001844 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80017da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d009      	beq.n	80017f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e026      	b.n	8001844 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80017fe:	0c1b      	lsrs	r3, r3, #16
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	68b9      	ldr	r1, [r7, #8]
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 fe95 	bl	800253c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2101      	movs	r1, #1
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	fa01 f202 	lsl.w	r2, r1, r2
 800181e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001822:	2201      	movs	r2, #1
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e008      	b.n	8001844 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001838:	f043 0208 	orr.w	r2, r3, #8
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
  }
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800184c:	b480      	push	{r7}
 800184e:	b08b      	sub	sp, #44	; 0x2c
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001864:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001866:	7efb      	ldrb	r3, [r7, #27]
 8001868:	2b02      	cmp	r3, #2
 800186a:	f040 814b 	bne.w	8001b04 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b40      	cmp	r3, #64	; 0x40
 8001872:	d14d      	bne.n	8001910 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800187c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800188a:	f043 0220 	orr.w	r2, r3, #32
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e13e      	b.n	8001b16 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80018a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d109      	bne.n	80018bc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e12c      	b.n	8001b16 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80018c4:	0e1b      	lsrs	r3, r3, #24
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d10b      	bne.n	80018e6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80018d6:	0fdb      	lsrs	r3, r3, #31
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018e0:	d101      	bne.n	80018e6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80018ee:	0a1b      	lsrs	r3, r3, #8
 80018f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	4413      	add	r3, r2
 80018f8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	69f9      	ldr	r1, [r7, #28]
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
 800190e:	e069      	b.n	80019e4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b41      	cmp	r3, #65	; 0x41
 8001914:	d14d      	bne.n	80019b2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800191e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800192c:	f043 0220 	orr.w	r2, r3, #32
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0ed      	b.n	8001b16 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001946:	2b00      	cmp	r3, #0
 8001948:	d109      	bne.n	800195e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001950:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0db      	b.n	8001b16 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001966:	0e1b      	lsrs	r3, r3, #24
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b01      	cmp	r3, #1
 800196e:	d10b      	bne.n	8001988 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001978:	0fdb      	lsrs	r3, r3, #31
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001982:	d101      	bne.n	8001988 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001984:	2301      	movs	r3, #1
 8001986:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	4413      	add	r3, r2
 800199a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a4:	69f9      	ldr	r1, [r7, #28]
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
 80019b0:	e018      	b.n	80019e4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d309      	bcc.n	80019d0 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019c2:	f043 0220 	orr.w	r2, r3, #32
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0a2      	b.n	8001b16 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d107      	bne.n	8001a08 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0c9b      	lsrs	r3, r3, #18
 80019fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e005      	b.n	8001a14 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	3304      	adds	r3, #4
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0e1b      	lsrs	r3, r3, #24
 8001a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	0fda      	lsrs	r2, r3, #31
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
 8001a86:	e00a      	b.n	8001a9e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	441a      	add	r2, r3
 8001a8e:	6839      	ldr	r1, [r7, #0]
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	440b      	add	r3, r1
 8001a94:	7812      	ldrb	r2, [r2, #0]
 8001a96:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	623b      	str	r3, [r7, #32]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	0c1b      	lsrs	r3, r3, #16
 8001aa4:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d3eb      	bcc.n	8001a88 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b40      	cmp	r3, #64	; 0x40
 8001ab4:	d105      	bne.n	8001ac2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001ac0:	e01e      	b.n	8001b00 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b41      	cmp	r3, #65	; 0x41
 8001ac6:	d105      	bne.n	8001ad4 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001ad2:	e015      	b.n	8001b00 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	d808      	bhi.n	8001aec <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2101      	movs	r1, #1
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001aea:	e009      	b.n	8001b00 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f003 021f 	and.w	r2, r3, #31
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2101      	movs	r1, #1
 8001af8:	fa01 f202 	lsl.w	r2, r1, r2
 8001afc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e008      	b.n	8001b16 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b0a:	f043 0208 	orr.w	r2, r3, #8
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	372c      	adds	r7, #44	; 0x2c
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	080052bc 	.word	0x080052bc

08001b28 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b3a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d002      	beq.n	8001b48 <HAL_FDCAN_ActivateNotification+0x20>
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d155      	bne.n	8001bf4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d108      	bne.n	8001b68 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b66:	e014      	b.n	8001b92 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	4013      	ands	r3, r2
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d108      	bne.n	8001b8a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0202 	orr.w	r2, r2, #2
 8001b86:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b88:	e003      	b.n	8001b92 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d009      	beq.n	8001bb0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_FDCAN_ActivateNotification+0xec>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	430b      	orrs	r3, r1
 8001be0:	6553      	str	r3, [r2, #84]	; 0x54
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	0f9b      	lsrs	r3, r3, #30
 8001bea:	490b      	ldr	r1, [pc, #44]	; (8001c18 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e008      	b.n	8001c06 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bfa:	f043 0202 	orr.w	r2, r3, #2
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	3fcfffff 	.word	0x3fcfffff
 8001c18:	4000a800 	.word	0x4000a800

08001c1c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b096      	sub	sp, #88	; 0x58
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001c24:	4b9a      	ldr	r3, [pc, #616]	; (8001e90 <HAL_FDCAN_IRQHandler+0x274>)
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	079b      	lsls	r3, r3, #30
 8001c2a:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001c2c:	4b98      	ldr	r3, [pc, #608]	; (8001e90 <HAL_FDCAN_IRQHandler+0x274>)
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	079b      	lsls	r3, r3, #30
 8001c32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c34:	4013      	ands	r3, r2
 8001c36:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001c42:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c64:	4013      	ands	r3, r2
 8001c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c86:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001c8a:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c94:	4013      	ands	r3, r2
 8001c96:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001ca2:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001caa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001cac:	4013      	ands	r3, r2
 8001cae:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00a      	beq.n	8001cee <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ce2:	4b6b      	ldr	r3, [pc, #428]	; (8001e90 <HAL_FDCAN_IRQHandler+0x274>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fa54 	bl	8002196 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf0:	0a9b      	lsrs	r3, r3, #10
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01d      	beq.n	8001d36 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfc:	0a9b      	lsrs	r3, r3, #10
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d017      	beq.n	8001d36 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d26:	651a      	str	r2, [r3, #80]	; 0x50
 8001d28:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <HAL_FDCAN_IRQHandler+0x274>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001d2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fa07 	bl	8002144 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00d      	beq.n	8001d58 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d42:	4b54      	ldr	r3, [pc, #336]	; (8001e94 <HAL_FDCAN_IRQHandler+0x278>)
 8001d44:	400b      	ands	r3, r1
 8001d46:	6513      	str	r3, [r2, #80]	; 0x50
 8001d48:	4a51      	ldr	r2, [pc, #324]	; (8001e90 <HAL_FDCAN_IRQHandler+0x274>)
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4c:	0f9b      	lsrs	r3, r3, #30
 8001d4e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001d50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f9c0 	bl	80020d8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00d      	beq.n	8001d7a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001d64:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <HAL_FDCAN_IRQHandler+0x278>)
 8001d66:	400b      	ands	r3, r1
 8001d68:	6513      	str	r3, [r2, #80]	; 0x50
 8001d6a:	4a49      	ldr	r2, [pc, #292]	; (8001e90 <HAL_FDCAN_IRQHandler+0x274>)
 8001d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d6e:	0f9b      	lsrs	r3, r3, #30
 8001d70:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001d72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f9ba 	bl	80020ee <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00d      	beq.n	8001d9c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d86:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <HAL_FDCAN_IRQHandler+0x278>)
 8001d88:	400b      	ands	r3, r1
 8001d8a:	6513      	str	r3, [r2, #80]	; 0x50
 8001d8c:	4a40      	ldr	r2, [pc, #256]	; (8001e90 <HAL_FDCAN_IRQHandler+0x274>)
 8001d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d90:	0f9b      	lsrs	r3, r3, #30
 8001d92:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001d94:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7fe fd14 	bl	80007c4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00d      	beq.n	8001dbe <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001da8:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <HAL_FDCAN_IRQHandler+0x278>)
 8001daa:	400b      	ands	r3, r1
 8001dac:	6513      	str	r3, [r2, #80]	; 0x50
 8001dae:	4a38      	ldr	r2, [pc, #224]	; (8001e90 <HAL_FDCAN_IRQHandler+0x274>)
 8001db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001db2:	0f9b      	lsrs	r3, r3, #30
 8001db4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001db6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f9a3 	bl	8002104 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc0:	0adb      	lsrs	r3, r3, #11
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d010      	beq.n	8001dec <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dcc:	0adb      	lsrs	r3, r3, #11
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00a      	beq.n	8001dec <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dde:	651a      	str	r2, [r3, #80]	; 0x50
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_FDCAN_IRQHandler+0x274>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f997 	bl	800211a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8001dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dee:	0a5b      	lsrs	r3, r3, #9
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01d      	beq.n	8001e34 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dfa:	0a5b      	lsrs	r3, r3, #9
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d017      	beq.n	8001e34 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e0c:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e18:	4013      	ands	r3, r2
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e24:	651a      	str	r2, [r3, #80]	; 0x50
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_FDCAN_IRQHandler+0x274>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001e2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f97d 	bl	800212e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e36:	0cdb      	lsrs	r3, r3, #19
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d010      	beq.n	8001e62 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e42:	0cdb      	lsrs	r3, r3, #19
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00a      	beq.n	8001e62 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e54:	651a      	str	r2, [r3, #80]	; 0x50
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_FDCAN_IRQHandler+0x274>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f97c 	bl	800215a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d016      	beq.n	8001e9c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d010      	beq.n	8001e9c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e82:	651a      	str	r2, [r3, #80]	; 0x50
 8001e84:	4b02      	ldr	r3, [pc, #8]	; (8001e90 <HAL_FDCAN_IRQHandler+0x274>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	e004      	b.n	8001e98 <HAL_FDCAN_IRQHandler+0x27c>
 8001e8e:	bf00      	nop
 8001e90:	4000a800 	.word	0x4000a800
 8001e94:	3fcfffff 	.word	0x3fcfffff
 8001e98:	f000 f969 	bl	800216e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e9e:	0c9b      	lsrs	r3, r3, #18
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d010      	beq.n	8001eca <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eaa:	0c9b      	lsrs	r3, r3, #18
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ebc:	651a      	str	r2, [r3, #80]	; 0x50
 8001ebe:	4b83      	ldr	r3, [pc, #524]	; (80020cc <HAL_FDCAN_IRQHandler+0x4b0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f95c 	bl	8002182 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ecc:	0c5b      	lsrs	r3, r3, #17
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d015      	beq.n	8001f02 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed8:	0c5b      	lsrs	r3, r3, #17
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00f      	beq.n	8001f02 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eea:	651a      	str	r2, [r3, #80]	; 0x50
 8001eec:	4b77      	ldr	r3, [pc, #476]	; (80020cc <HAL_FDCAN_IRQHandler+0x4b0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ef8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00d      	beq.n	8001f24 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f0e:	4b70      	ldr	r3, [pc, #448]	; (80020d0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001f10:	400b      	ands	r3, r1
 8001f12:	6513      	str	r3, [r2, #80]	; 0x50
 8001f14:	4a6d      	ldr	r2, [pc, #436]	; (80020cc <HAL_FDCAN_IRQHandler+0x4b0>)
 8001f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f18:	0f9b      	lsrs	r3, r3, #30
 8001f1a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001f1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f94d 	bl	80021be <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d011      	beq.n	8001f4e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001f30:	4b67      	ldr	r3, [pc, #412]	; (80020d0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001f32:	400b      	ands	r3, r1
 8001f34:	6513      	str	r3, [r2, #80]	; 0x50
 8001f36:	4a65      	ldr	r2, [pc, #404]	; (80020cc <HAL_FDCAN_IRQHandler+0x4b0>)
 8001f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f3a:	0f9b      	lsrs	r3, r3, #30
 8001f3c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a60      	ldr	r2, [pc, #384]	; (80020d4 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	f040 80ac 	bne.w	80020b2 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80a4 	beq.w	80020b2 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f7e:	4013      	ands	r3, r2
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f96:	4013      	ands	r3, r2
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fae:	4013      	ands	r3, r2
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001fbc:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	6a3a      	ldr	r2, [r7, #32]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001fd4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffe:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8e6 	bl	80021d4 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002014:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002016:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f8e6 	bl	80021ea <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	099b      	lsrs	r3, r3, #6
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d01a      	beq.n	8002060 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d014      	beq.n	8002060 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	b29b      	uxth	r3, r3
 8002040:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800204c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2240      	movs	r2, #64	; 0x40
 8002054:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8d0 	bl	8002200 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800206e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f8d1 	bl	8002218 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00b      	beq.n	8002094 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	6a3a      	ldr	r2, [r7, #32]
 8002082:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f874 	bl	80021aa <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80020c2:	bf00      	nop
 80020c4:	3758      	adds	r7, #88	; 0x58
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	4000a800 	.word	0x4000a800
 80020d0:	3fcfffff 	.word	0x3fcfffff
 80020d4:	4000a000 	.word	0x4000a000

080020d8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002246:	4ba7      	ldr	r3, [pc, #668]	; (80024e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002248:	4013      	ands	r3, r2
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	0091      	lsls	r1, r2, #2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	430b      	orrs	r3, r1
 8002254:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002260:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	041a      	lsls	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	4413      	add	r3, r2
 800227c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002286:	4b97      	ldr	r3, [pc, #604]	; (80024e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002288:	4013      	ands	r3, r2
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	0091      	lsls	r1, r2, #2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	430b      	orrs	r3, r1
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	041a      	lsls	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	4413      	add	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80022c8:	4b86      	ldr	r3, [pc, #536]	; (80024e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	0091      	lsls	r1, r2, #2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	430b      	orrs	r3, r1
 80022d6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80022e2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	041a      	lsls	r2, r3, #16
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4413      	add	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002310:	4b74      	ldr	r3, [pc, #464]	; (80024e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002312:	4013      	ands	r3, r2
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	0091      	lsls	r1, r2, #2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	430b      	orrs	r3, r1
 800231e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800232a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002332:	041a      	lsls	r2, r3, #16
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	4413      	add	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002358:	4b62      	ldr	r3, [pc, #392]	; (80024e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800235a:	4013      	ands	r3, r2
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	0091      	lsls	r1, r2, #2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	430b      	orrs	r3, r1
 8002366:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	4413      	add	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002384:	4b57      	ldr	r3, [pc, #348]	; (80024e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002386:	4013      	ands	r3, r2
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	0091      	lsls	r1, r2, #2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	430b      	orrs	r3, r1
 8002392:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800239e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	041a      	lsls	r2, r3, #16
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	4413      	add	r3, r2
 80023bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80023c6:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	0091      	lsls	r1, r2, #2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	430b      	orrs	r3, r1
 80023d4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023e0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e8:	041a      	lsls	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023fc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002404:	061a      	lsls	r2, r3, #24
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002414:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002416:	4413      	add	r3, r2
 8002418:	009a      	lsls	r2, r3, #2
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	441a      	add	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	441a      	add	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	441a      	add	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	441a      	add	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	441a      	add	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	441a      	add	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	441a      	add	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	441a      	add	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	4a04      	ldr	r2, [pc, #16]	; (80024ec <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d915      	bls.n	800250c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80024e0:	e006      	b.n	80024f0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80024e2:	bf00      	nop
 80024e4:	ffff0003 	.word	0xffff0003
 80024e8:	10002b00 	.word	0x10002b00
 80024ec:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024f6:	f043 0220 	orr.w	r2, r3, #32
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2203      	movs	r2, #3
 8002504:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e010      	b.n	800252e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e005      	b.n	8002520 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3304      	adds	r3, #4
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d3f3      	bcc.n	8002514 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop

0800253c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800255a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002562:	4313      	orrs	r3, r2
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e00a      	b.n	800257e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002570:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002576:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800257c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002588:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800258e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002594:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025a8:	6839      	ldr	r1, [r7, #0]
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	3304      	adds	r3, #4
 80025be:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	3304      	adds	r3, #4
 80025ca:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	e020      	b.n	8002614 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	3303      	adds	r3, #3
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3302      	adds	r3, #2
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	440b      	add	r3, r1
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80025ea:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3301      	adds	r3, #1
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	440b      	add	r3, r1
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80025f8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	440a      	add	r2, r1
 8002600:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002602:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	3304      	adds	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3304      	adds	r3, #4
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	4a06      	ldr	r2, [pc, #24]	; (8002634 <FDCAN_CopyMessageToRAM+0xf8>)
 800261c:	5cd3      	ldrb	r3, [r2, r3]
 800261e:	461a      	mov	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	4293      	cmp	r3, r2
 8002624:	d3d5      	bcc.n	80025d2 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002626:	bf00      	nop
 8002628:	bf00      	nop
 800262a:	3724      	adds	r7, #36	; 0x24
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	080052bc 	.word	0x080052bc

08002638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002646:	4b89      	ldr	r3, [pc, #548]	; (800286c <HAL_GPIO_Init+0x234>)
 8002648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800264a:	e194      	b.n	8002976 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8186 	beq.w	8002970 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b01      	cmp	r3, #1
 800266e:	d005      	beq.n	800267c <HAL_GPIO_Init+0x44>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d130      	bne.n	80026de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026b2:	2201      	movs	r2, #1
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	f003 0201 	and.w	r2, r3, #1
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d017      	beq.n	800271a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	2203      	movs	r2, #3
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d123      	bne.n	800276e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	08da      	lsrs	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3208      	adds	r2, #8
 800272e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	69b9      	ldr	r1, [r7, #24]
 800276a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0203 	and.w	r2, r3, #3
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 80e0 	beq.w	8002970 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b0:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_GPIO_Init+0x238>)
 80027b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027b6:	4a2e      	ldr	r2, [pc, #184]	; (8002870 <HAL_GPIO_Init+0x238>)
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <HAL_GPIO_Init+0x238>)
 80027c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ce:	4a29      	ldr	r2, [pc, #164]	; (8002874 <HAL_GPIO_Init+0x23c>)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	220f      	movs	r2, #15
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a20      	ldr	r2, [pc, #128]	; (8002878 <HAL_GPIO_Init+0x240>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d052      	beq.n	80028a0 <HAL_GPIO_Init+0x268>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a1f      	ldr	r2, [pc, #124]	; (800287c <HAL_GPIO_Init+0x244>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d031      	beq.n	8002866 <HAL_GPIO_Init+0x22e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <HAL_GPIO_Init+0x248>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d02b      	beq.n	8002862 <HAL_GPIO_Init+0x22a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <HAL_GPIO_Init+0x24c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d025      	beq.n	800285e <HAL_GPIO_Init+0x226>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <HAL_GPIO_Init+0x250>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01f      	beq.n	800285a <HAL_GPIO_Init+0x222>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a1b      	ldr	r2, [pc, #108]	; (800288c <HAL_GPIO_Init+0x254>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d019      	beq.n	8002856 <HAL_GPIO_Init+0x21e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <HAL_GPIO_Init+0x258>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_GPIO_Init+0x21a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <HAL_GPIO_Init+0x25c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00d      	beq.n	800284e <HAL_GPIO_Init+0x216>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a18      	ldr	r2, [pc, #96]	; (8002898 <HAL_GPIO_Init+0x260>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d007      	beq.n	800284a <HAL_GPIO_Init+0x212>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a17      	ldr	r2, [pc, #92]	; (800289c <HAL_GPIO_Init+0x264>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_GPIO_Init+0x20e>
 8002842:	2309      	movs	r3, #9
 8002844:	e02d      	b.n	80028a2 <HAL_GPIO_Init+0x26a>
 8002846:	230a      	movs	r3, #10
 8002848:	e02b      	b.n	80028a2 <HAL_GPIO_Init+0x26a>
 800284a:	2308      	movs	r3, #8
 800284c:	e029      	b.n	80028a2 <HAL_GPIO_Init+0x26a>
 800284e:	2307      	movs	r3, #7
 8002850:	e027      	b.n	80028a2 <HAL_GPIO_Init+0x26a>
 8002852:	2306      	movs	r3, #6
 8002854:	e025      	b.n	80028a2 <HAL_GPIO_Init+0x26a>
 8002856:	2305      	movs	r3, #5
 8002858:	e023      	b.n	80028a2 <HAL_GPIO_Init+0x26a>
 800285a:	2304      	movs	r3, #4
 800285c:	e021      	b.n	80028a2 <HAL_GPIO_Init+0x26a>
 800285e:	2303      	movs	r3, #3
 8002860:	e01f      	b.n	80028a2 <HAL_GPIO_Init+0x26a>
 8002862:	2302      	movs	r3, #2
 8002864:	e01d      	b.n	80028a2 <HAL_GPIO_Init+0x26a>
 8002866:	2301      	movs	r3, #1
 8002868:	e01b      	b.n	80028a2 <HAL_GPIO_Init+0x26a>
 800286a:	bf00      	nop
 800286c:	58000080 	.word	0x58000080
 8002870:	58024400 	.word	0x58024400
 8002874:	58000400 	.word	0x58000400
 8002878:	58020000 	.word	0x58020000
 800287c:	58020400 	.word	0x58020400
 8002880:	58020800 	.word	0x58020800
 8002884:	58020c00 	.word	0x58020c00
 8002888:	58021000 	.word	0x58021000
 800288c:	58021400 	.word	0x58021400
 8002890:	58021800 	.word	0x58021800
 8002894:	58021c00 	.word	0x58021c00
 8002898:	58022000 	.word	0x58022000
 800289c:	58022400 	.word	0x58022400
 80028a0:	2300      	movs	r3, #0
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	f002 0203 	and.w	r2, r2, #3
 80028a8:	0092      	lsls	r2, r2, #2
 80028aa:	4093      	lsls	r3, r2
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028b2:	4938      	ldr	r1, [pc, #224]	; (8002994 <HAL_GPIO_Init+0x35c>)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3302      	adds	r3, #2
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	3301      	adds	r3, #1
 8002974:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	f47f ae63 	bne.w	800264c <HAL_GPIO_Init+0x14>
  }
}
 8002986:	bf00      	nop
 8002988:	bf00      	nop
 800298a:	3724      	adds	r7, #36	; 0x24
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	58000400 	.word	0x58000400

08002998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
 80029a4:	4613      	mov	r3, r2
 80029a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029b4:	e003      	b.n	80029be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	041a      	lsls	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	619a      	str	r2, [r3, #24]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029dc:	887a      	ldrh	r2, [r7, #2]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	041a      	lsls	r2, r3, #16
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43d9      	mvns	r1, r3
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	400b      	ands	r3, r1
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_PWREx_ConfigSupply+0x70>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d00a      	beq.n	8002a2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <HAL_PWREx_ConfigSupply+0x70>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d001      	beq.n	8002a26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e01f      	b.n	8002a66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e01d      	b.n	8002a66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_PWREx_ConfigSupply+0x70>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f023 0207 	bic.w	r2, r3, #7
 8002a32:	490f      	ldr	r1, [pc, #60]	; (8002a70 <HAL_PWREx_ConfigSupply+0x70>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a3a:	f7fe fb57 	bl	80010ec <HAL_GetTick>
 8002a3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a40:	e009      	b.n	8002a56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a42:	f7fe fb53 	bl	80010ec <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a50:	d901      	bls.n	8002a56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e007      	b.n	8002a66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_PWREx_ConfigSupply+0x70>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a62:	d1ee      	bne.n	8002a42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	58024800 	.word	0x58024800

08002a74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	; 0x30
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f000 bc48 	b.w	8003318 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8088 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a96:	4b99      	ldr	r3, [pc, #612]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002aa0:	4b96      	ldr	r3, [pc, #600]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d007      	beq.n	8002abc <HAL_RCC_OscConfig+0x48>
 8002aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aae:	2b18      	cmp	r3, #24
 8002ab0:	d111      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x62>
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d10c      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	4b8f      	ldr	r3, [pc, #572]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d06d      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x130>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d169      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f000 bc21 	b.w	8003318 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x7a>
 8002ae0:	4b86      	ldr	r3, [pc, #536]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a85      	ldr	r2, [pc, #532]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	e02e      	b.n	8002b4c <HAL_RCC_OscConfig+0xd8>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x9c>
 8002af6:	4b81      	ldr	r3, [pc, #516]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a80      	ldr	r2, [pc, #512]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b7e      	ldr	r3, [pc, #504]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a7d      	ldr	r2, [pc, #500]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e01d      	b.n	8002b4c <HAL_RCC_OscConfig+0xd8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0xc0>
 8002b1a:	4b78      	ldr	r3, [pc, #480]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a77      	ldr	r2, [pc, #476]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b75      	ldr	r3, [pc, #468]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a74      	ldr	r2, [pc, #464]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0xd8>
 8002b34:	4b71      	ldr	r3, [pc, #452]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a70      	ldr	r2, [pc, #448]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b6e      	ldr	r3, [pc, #440]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a6d      	ldr	r2, [pc, #436]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe faca 	bl	80010ec <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7fe fac6 	bl	80010ec <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e3d4      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b6e:	4b63      	ldr	r3, [pc, #396]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0xe8>
 8002b7a:	e014      	b.n	8002ba6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fab6 	bl	80010ec <HAL_GetTick>
 8002b80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b84:	f7fe fab2 	bl	80010ec <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e3c0      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b96:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x110>
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80ca 	beq.w	8002d48 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bb4:	4b51      	ldr	r3, [pc, #324]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bbe:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_RCC_OscConfig+0x166>
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	2b18      	cmp	r3, #24
 8002bce:	d156      	bne.n	8002c7e <HAL_RCC_OscConfig+0x20a>
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d151      	bne.n	8002c7e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bda:	4b48      	ldr	r3, [pc, #288]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x17e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e392      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bf2:	4b42      	ldr	r3, [pc, #264]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 0219 	bic.w	r2, r3, #25
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	493f      	ldr	r1, [pc, #252]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe fa72 	bl	80010ec <HAL_GetTick>
 8002c08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0c:	f7fe fa6e 	bl	80010ec <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e37c      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c1e:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2a:	f7fe fa8f 	bl	800114c <HAL_GetREVID>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d817      	bhi.n	8002c68 <HAL_RCC_OscConfig+0x1f4>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d108      	bne.n	8002c52 <HAL_RCC_OscConfig+0x1de>
 8002c40:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c48:	4a2c      	ldr	r2, [pc, #176]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c50:	e07a      	b.n	8002d48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c52:	4b2a      	ldr	r3, [pc, #168]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	031b      	lsls	r3, r3, #12
 8002c60:	4926      	ldr	r1, [pc, #152]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c66:	e06f      	b.n	8002d48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c68:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	4921      	ldr	r1, [pc, #132]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c7c:	e064      	b.n	8002d48 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d047      	beq.n	8002d16 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c86:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0219 	bic.w	r2, r3, #25
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	491a      	ldr	r1, [pc, #104]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe fa28 	bl	80010ec <HAL_GetTick>
 8002c9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca0:	f7fe fa24 	bl	80010ec <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e332      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	f7fe fa45 	bl	800114c <HAL_GetREVID>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d819      	bhi.n	8002d00 <HAL_RCC_OscConfig+0x28c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2b40      	cmp	r3, #64	; 0x40
 8002cd2:	d108      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x272>
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002cdc:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce2:	6053      	str	r3, [r2, #4]
 8002ce4:	e030      	b.n	8002d48 <HAL_RCC_OscConfig+0x2d4>
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	031b      	lsls	r3, r3, #12
 8002cf4:	4901      	ldr	r1, [pc, #4]	; (8002cfc <HAL_RCC_OscConfig+0x288>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
 8002cfa:	e025      	b.n	8002d48 <HAL_RCC_OscConfig+0x2d4>
 8002cfc:	58024400 	.word	0x58024400
 8002d00:	4b9a      	ldr	r3, [pc, #616]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	061b      	lsls	r3, r3, #24
 8002d0e:	4997      	ldr	r1, [pc, #604]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	604b      	str	r3, [r1, #4]
 8002d14:	e018      	b.n	8002d48 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d16:	4b95      	ldr	r3, [pc, #596]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a94      	ldr	r2, [pc, #592]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fe f9e3 	bl	80010ec <HAL_GetTick>
 8002d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7fe f9df 	bl	80010ec <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e2ed      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d3c:	4b8b      	ldr	r3, [pc, #556]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f0      	bne.n	8002d2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80a9 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d56:	4b85      	ldr	r3, [pc, #532]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d60:	4b82      	ldr	r3, [pc, #520]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d007      	beq.n	8002d7c <HAL_RCC_OscConfig+0x308>
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b18      	cmp	r3, #24
 8002d70:	d13a      	bne.n	8002de8 <HAL_RCC_OscConfig+0x374>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d135      	bne.n	8002de8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d7c:	4b7b      	ldr	r3, [pc, #492]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_OscConfig+0x320>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2b80      	cmp	r3, #128	; 0x80
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e2c1      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d94:	f7fe f9da 	bl	800114c <HAL_GetREVID>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d817      	bhi.n	8002dd2 <HAL_RCC_OscConfig+0x35e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d108      	bne.n	8002dbc <HAL_RCC_OscConfig+0x348>
 8002daa:	4b70      	ldr	r3, [pc, #448]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002db2:	4a6e      	ldr	r2, [pc, #440]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002db4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002db8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dba:	e075      	b.n	8002ea8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dbc:	4b6b      	ldr	r3, [pc, #428]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	069b      	lsls	r3, r3, #26
 8002dca:	4968      	ldr	r1, [pc, #416]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dd0:	e06a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dd2:	4b66      	ldr	r3, [pc, #408]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	061b      	lsls	r3, r3, #24
 8002de0:	4962      	ldr	r1, [pc, #392]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002de6:	e05f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d042      	beq.n	8002e76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002df0:	4b5e      	ldr	r3, [pc, #376]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a5d      	ldr	r2, [pc, #372]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f976 	bl	80010ec <HAL_GetTick>
 8002e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e04:	f7fe f972 	bl	80010ec <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e280      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e16:	4b55      	ldr	r3, [pc, #340]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e22:	f7fe f993 	bl	800114c <HAL_GetREVID>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d817      	bhi.n	8002e60 <HAL_RCC_OscConfig+0x3ec>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d108      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3d6>
 8002e38:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e40:	4a4a      	ldr	r2, [pc, #296]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e46:	6053      	str	r3, [r2, #4]
 8002e48:	e02e      	b.n	8002ea8 <HAL_RCC_OscConfig+0x434>
 8002e4a:	4b48      	ldr	r3, [pc, #288]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	069b      	lsls	r3, r3, #26
 8002e58:	4944      	ldr	r1, [pc, #272]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
 8002e5e:	e023      	b.n	8002ea8 <HAL_RCC_OscConfig+0x434>
 8002e60:	4b42      	ldr	r3, [pc, #264]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	493f      	ldr	r1, [pc, #252]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60cb      	str	r3, [r1, #12]
 8002e74:	e018      	b.n	8002ea8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e76:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a3c      	ldr	r2, [pc, #240]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e82:	f7fe f933 	bl	80010ec <HAL_GetTick>
 8002e86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e8a:	f7fe f92f 	bl	80010ec <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e23d      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e9c:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f0      	bne.n	8002e8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d036      	beq.n	8002f22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d019      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec0:	4a2a      	ldr	r2, [pc, #168]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fe f910 	bl	80010ec <HAL_GetTick>
 8002ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7fe f90c 	bl	80010ec <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e21a      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ee2:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x45c>
 8002eee:	e018      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe f8f6 	bl	80010ec <HAL_GetTick>
 8002f00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fe f8f2 	bl	80010ec <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e200      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d039      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01c      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a0c      	ldr	r2, [pc, #48]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002f3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f42:	f7fe f8d3 	bl	80010ec <HAL_GetTick>
 8002f46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f4a:	f7fe f8cf 	bl	80010ec <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e1dd      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_RCC_OscConfig+0x4f8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x4d6>
 8002f68:	e01b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
 8002f6a:	bf00      	nop
 8002f6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f70:	4b9b      	ldr	r3, [pc, #620]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a9a      	ldr	r2, [pc, #616]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8002f76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f7c:	f7fe f8b6 	bl	80010ec <HAL_GetTick>
 8002f80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f84:	f7fe f8b2 	bl	80010ec <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e1c0      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f96:	4b92      	ldr	r3, [pc, #584]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8081 	beq.w	80030b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fb0:	4b8c      	ldr	r3, [pc, #560]	; (80031e4 <HAL_RCC_OscConfig+0x770>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a8b      	ldr	r2, [pc, #556]	; (80031e4 <HAL_RCC_OscConfig+0x770>)
 8002fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fbc:	f7fe f896 	bl	80010ec <HAL_GetTick>
 8002fc0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc4:	f7fe f892 	bl	80010ec <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e1a0      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fd6:	4b83      	ldr	r3, [pc, #524]	; (80031e4 <HAL_RCC_OscConfig+0x770>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x584>
 8002fea:	4b7d      	ldr	r3, [pc, #500]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	4a7c      	ldr	r2, [pc, #496]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff6:	e02d      	b.n	8003054 <HAL_RCC_OscConfig+0x5e0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10c      	bne.n	800301a <HAL_RCC_OscConfig+0x5a6>
 8003000:	4b77      	ldr	r3, [pc, #476]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	4a76      	ldr	r2, [pc, #472]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	6713      	str	r3, [r2, #112]	; 0x70
 800300c:	4b74      	ldr	r3, [pc, #464]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	4a73      	ldr	r2, [pc, #460]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003012:	f023 0304 	bic.w	r3, r3, #4
 8003016:	6713      	str	r3, [r2, #112]	; 0x70
 8003018:	e01c      	b.n	8003054 <HAL_RCC_OscConfig+0x5e0>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b05      	cmp	r3, #5
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x5c8>
 8003022:	4b6f      	ldr	r3, [pc, #444]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a6e      	ldr	r2, [pc, #440]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
 800302e:	4b6c      	ldr	r3, [pc, #432]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	4a6b      	ldr	r2, [pc, #428]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6713      	str	r3, [r2, #112]	; 0x70
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0x5e0>
 800303c:	4b68      	ldr	r3, [pc, #416]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	4a67      	ldr	r2, [pc, #412]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	; 0x70
 8003048:	4b65      	ldr	r3, [pc, #404]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a64      	ldr	r2, [pc, #400]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800304e:	f023 0304 	bic.w	r3, r3, #4
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d015      	beq.n	8003088 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7fe f846 	bl	80010ec <HAL_GetTick>
 8003060:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fe f842 	bl	80010ec <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e14e      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800307a:	4b59      	ldr	r3, [pc, #356]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0ee      	beq.n	8003064 <HAL_RCC_OscConfig+0x5f0>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe f830 	bl	80010ec <HAL_GetTick>
 800308c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fe f82c 	bl	80010ec <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e138      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030a6:	4b4e      	ldr	r3, [pc, #312]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ee      	bne.n	8003090 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 812d 	beq.w	8003316 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80030bc:	4b48      	ldr	r3, [pc, #288]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030c4:	2b18      	cmp	r3, #24
 80030c6:	f000 80bd 	beq.w	8003244 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	f040 809e 	bne.w	8003210 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d4:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a41      	ldr	r2, [pc, #260]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80030da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe f804 	bl	80010ec <HAL_GetTick>
 80030e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe f800 	bl	80010ec <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e10e      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030fa:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003106:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800310a:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <HAL_RCC_OscConfig+0x774>)
 800310c:	4013      	ands	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	430a      	orrs	r2, r1
 800311a:	4931      	ldr	r1, [pc, #196]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800311c:	4313      	orrs	r3, r2
 800311e:	628b      	str	r3, [r1, #40]	; 0x28
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	3b01      	subs	r3, #1
 8003126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312e:	3b01      	subs	r3, #1
 8003130:	025b      	lsls	r3, r3, #9
 8003132:	b29b      	uxth	r3, r3
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	3b01      	subs	r3, #1
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003148:	3b01      	subs	r3, #1
 800314a:	061b      	lsls	r3, r3, #24
 800314c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003150:	4923      	ldr	r1, [pc, #140]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003152:	4313      	orrs	r3, r2
 8003154:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003156:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	4a21      	ldr	r2, [pc, #132]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003162:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003166:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_RCC_OscConfig+0x778>)
 8003168:	4013      	ands	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800316e:	00d2      	lsls	r2, r2, #3
 8003170:	491b      	ldr	r1, [pc, #108]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003172:	4313      	orrs	r3, r2
 8003174:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003176:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	f023 020c 	bic.w	r2, r3, #12
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	4917      	ldr	r1, [pc, #92]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003184:	4313      	orrs	r3, r2
 8003186:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	f023 0202 	bic.w	r2, r3, #2
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	4912      	ldr	r1, [pc, #72]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 8003196:	4313      	orrs	r3, r2
 8003198:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <HAL_RCC_OscConfig+0x76c>)
 80031d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fd ff89 	bl	80010ec <HAL_GetTick>
 80031da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031dc:	e011      	b.n	8003202 <HAL_RCC_OscConfig+0x78e>
 80031de:	bf00      	nop
 80031e0:	58024400 	.word	0x58024400
 80031e4:	58024800 	.word	0x58024800
 80031e8:	fffffc0c 	.word	0xfffffc0c
 80031ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fd ff7c 	bl	80010ec <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e08a      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003202:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x77c>
 800320e:	e082      	b.n	8003316 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003210:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a42      	ldr	r2, [pc, #264]	; (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800321a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fd ff66 	bl	80010ec <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003224:	f7fd ff62 	bl	80010ec <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e070      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003236:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x7b0>
 8003242:	e068      	b.n	8003316 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003244:	4b36      	ldr	r3, [pc, #216]	; (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800324a:	4b35      	ldr	r3, [pc, #212]	; (8003320 <HAL_RCC_OscConfig+0x8ac>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2b01      	cmp	r3, #1
 8003256:	d031      	beq.n	80032bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f003 0203 	and.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d12a      	bne.n	80032bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d122      	bne.n	80032bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d11a      	bne.n	80032bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	0a5b      	lsrs	r3, r3, #9
 800328a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003292:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d111      	bne.n	80032bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	0c1b      	lsrs	r3, r3, #16
 800329c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d108      	bne.n	80032bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	0e1b      	lsrs	r3, r3, #24
 80032ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e02b      	b.n	8003318 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80032c0:	4b17      	ldr	r3, [pc, #92]	; (8003320 <HAL_RCC_OscConfig+0x8ac>)
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	08db      	lsrs	r3, r3, #3
 80032c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d01f      	beq.n	8003316 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_RCC_OscConfig+0x8ac>)
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	4a11      	ldr	r2, [pc, #68]	; (8003320 <HAL_RCC_OscConfig+0x8ac>)
 80032dc:	f023 0301 	bic.w	r3, r3, #1
 80032e0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032e2:	f7fd ff03 	bl	80010ec <HAL_GetTick>
 80032e6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80032e8:	bf00      	nop
 80032ea:	f7fd feff 	bl	80010ec <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d0f9      	beq.n	80032ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_RCC_OscConfig+0x8ac>)
 80032f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <HAL_RCC_OscConfig+0x8b0>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003302:	00d2      	lsls	r2, r2, #3
 8003304:	4906      	ldr	r1, [pc, #24]	; (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003306:	4313      	orrs	r3, r2
 8003308:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_RCC_OscConfig+0x8ac>)
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	4a04      	ldr	r2, [pc, #16]	; (8003320 <HAL_RCC_OscConfig+0x8ac>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3730      	adds	r7, #48	; 0x30
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	58024400 	.word	0x58024400
 8003324:	ffff0007 	.word	0xffff0007

08003328 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e19c      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b8a      	ldr	r3, [pc, #552]	; (8003568 <HAL_RCC_ClockConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d910      	bls.n	800336c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b87      	ldr	r3, [pc, #540]	; (8003568 <HAL_RCC_ClockConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 020f 	bic.w	r2, r3, #15
 8003352:	4985      	ldr	r1, [pc, #532]	; (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b83      	ldr	r3, [pc, #524]	; (8003568 <HAL_RCC_ClockConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e184      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d010      	beq.n	800339a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	4b7b      	ldr	r3, [pc, #492]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003384:	429a      	cmp	r2, r3
 8003386:	d908      	bls.n	800339a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003388:	4b78      	ldr	r3, [pc, #480]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	4975      	ldr	r1, [pc, #468]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 8003396:	4313      	orrs	r3, r2
 8003398:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d010      	beq.n	80033c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	4b70      	ldr	r3, [pc, #448]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d908      	bls.n	80033c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033b6:	4b6d      	ldr	r3, [pc, #436]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	496a      	ldr	r1, [pc, #424]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d010      	beq.n	80033f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699a      	ldr	r2, [r3, #24]
 80033d8:	4b64      	ldr	r3, [pc, #400]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d908      	bls.n	80033f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033e4:	4b61      	ldr	r3, [pc, #388]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	495e      	ldr	r1, [pc, #376]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d010      	beq.n	8003424 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69da      	ldr	r2, [r3, #28]
 8003406:	4b59      	ldr	r3, [pc, #356]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800340e:	429a      	cmp	r2, r3
 8003410:	d908      	bls.n	8003424 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003412:	4b56      	ldr	r3, [pc, #344]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	4953      	ldr	r1, [pc, #332]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 8003420:	4313      	orrs	r3, r2
 8003422:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d010      	beq.n	8003452 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	4b4d      	ldr	r3, [pc, #308]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	429a      	cmp	r2, r3
 800343e:	d908      	bls.n	8003452 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003440:	4b4a      	ldr	r3, [pc, #296]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f023 020f 	bic.w	r2, r3, #15
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4947      	ldr	r1, [pc, #284]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 800344e:	4313      	orrs	r3, r2
 8003450:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d055      	beq.n	800350a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800345e:	4b43      	ldr	r3, [pc, #268]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	4940      	ldr	r1, [pc, #256]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 800346c:	4313      	orrs	r3, r2
 800346e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d107      	bne.n	8003488 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003478:	4b3c      	ldr	r3, [pc, #240]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d121      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0f6      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d107      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003490:	4b36      	ldr	r3, [pc, #216]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d115      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0ea      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034a8:	4b30      	ldr	r3, [pc, #192]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0de      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034b8:	4b2c      	ldr	r3, [pc, #176]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0d6      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034c8:	4b28      	ldr	r3, [pc, #160]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f023 0207 	bic.w	r2, r3, #7
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4925      	ldr	r1, [pc, #148]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034da:	f7fd fe07 	bl	80010ec <HAL_GetTick>
 80034de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e0:	e00a      	b.n	80034f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e2:	f7fd fe03 	bl	80010ec <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e0be      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f8:	4b1c      	ldr	r3, [pc, #112]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	429a      	cmp	r2, r3
 8003508:	d1eb      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d010      	beq.n	8003538 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	4b14      	ldr	r3, [pc, #80]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	429a      	cmp	r2, r3
 8003524:	d208      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f023 020f 	bic.w	r2, r3, #15
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	490e      	ldr	r1, [pc, #56]	; (800356c <HAL_RCC_ClockConfig+0x244>)
 8003534:	4313      	orrs	r3, r2
 8003536:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_RCC_ClockConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d214      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b08      	ldr	r3, [pc, #32]	; (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 020f 	bic.w	r2, r3, #15
 800354e:	4906      	ldr	r1, [pc, #24]	; (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b04      	ldr	r3, [pc, #16]	; (8003568 <HAL_RCC_ClockConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e086      	b.n	8003676 <HAL_RCC_ClockConfig+0x34e>
 8003568:	52002000 	.word	0x52002000
 800356c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003588:	429a      	cmp	r2, r3
 800358a:	d208      	bcs.n	800359e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800358c:	4b3c      	ldr	r3, [pc, #240]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	4939      	ldr	r1, [pc, #228]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 800359a:	4313      	orrs	r3, r2
 800359c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d010      	beq.n	80035cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	4b34      	ldr	r3, [pc, #208]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d208      	bcs.n	80035cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035ba:	4b31      	ldr	r3, [pc, #196]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	492e      	ldr	r1, [pc, #184]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d010      	beq.n	80035fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699a      	ldr	r2, [r3, #24]
 80035dc:	4b28      	ldr	r3, [pc, #160]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d208      	bcs.n	80035fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035e8:	4b25      	ldr	r3, [pc, #148]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4922      	ldr	r1, [pc, #136]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d010      	beq.n	8003628 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69da      	ldr	r2, [r3, #28]
 800360a:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003612:	429a      	cmp	r2, r3
 8003614:	d208      	bcs.n	8003628 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003616:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	4917      	ldr	r1, [pc, #92]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 8003624:	4313      	orrs	r3, r2
 8003626:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003628:	f000 f834 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b14      	ldr	r3, [pc, #80]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	4912      	ldr	r1, [pc, #72]	; (8003684 <HAL_RCC_ClockConfig+0x35c>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
 8003644:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <HAL_RCC_ClockConfig+0x358>)
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	4a0d      	ldr	r2, [pc, #52]	; (8003684 <HAL_RCC_ClockConfig+0x35c>)
 8003650:	5cd3      	ldrb	r3, [r2, r3]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
 800365c:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <HAL_RCC_ClockConfig+0x360>)
 800365e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003660:	4a0a      	ldr	r2, [pc, #40]	; (800368c <HAL_RCC_ClockConfig+0x364>)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <HAL_RCC_ClockConfig+0x368>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd fcf4 	bl	8001058 <HAL_InitTick>
 8003670:	4603      	mov	r3, r0
 8003672:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	58024400 	.word	0x58024400
 8003684:	080052ac 	.word	0x080052ac
 8003688:	24000004 	.word	0x24000004
 800368c:	24000000 	.word	0x24000000
 8003690:	24000008 	.word	0x24000008

08003694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	; 0x24
 8003698:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800369a:	4bb3      	ldr	r3, [pc, #716]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036a2:	2b18      	cmp	r3, #24
 80036a4:	f200 8155 	bhi.w	8003952 <HAL_RCC_GetSysClockFreq+0x2be>
 80036a8:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	08003715 	.word	0x08003715
 80036b4:	08003953 	.word	0x08003953
 80036b8:	08003953 	.word	0x08003953
 80036bc:	08003953 	.word	0x08003953
 80036c0:	08003953 	.word	0x08003953
 80036c4:	08003953 	.word	0x08003953
 80036c8:	08003953 	.word	0x08003953
 80036cc:	08003953 	.word	0x08003953
 80036d0:	0800373b 	.word	0x0800373b
 80036d4:	08003953 	.word	0x08003953
 80036d8:	08003953 	.word	0x08003953
 80036dc:	08003953 	.word	0x08003953
 80036e0:	08003953 	.word	0x08003953
 80036e4:	08003953 	.word	0x08003953
 80036e8:	08003953 	.word	0x08003953
 80036ec:	08003953 	.word	0x08003953
 80036f0:	08003741 	.word	0x08003741
 80036f4:	08003953 	.word	0x08003953
 80036f8:	08003953 	.word	0x08003953
 80036fc:	08003953 	.word	0x08003953
 8003700:	08003953 	.word	0x08003953
 8003704:	08003953 	.word	0x08003953
 8003708:	08003953 	.word	0x08003953
 800370c:	08003953 	.word	0x08003953
 8003710:	08003747 	.word	0x08003747
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003714:	4b94      	ldr	r3, [pc, #592]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d009      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003720:	4b91      	ldr	r3, [pc, #580]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	08db      	lsrs	r3, r3, #3
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	4a90      	ldr	r2, [pc, #576]	; (800396c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
 8003730:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003732:	e111      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003734:	4b8d      	ldr	r3, [pc, #564]	; (800396c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003736:	61bb      	str	r3, [r7, #24]
      break;
 8003738:	e10e      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800373a:	4b8d      	ldr	r3, [pc, #564]	; (8003970 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800373c:	61bb      	str	r3, [r7, #24]
      break;
 800373e:	e10b      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003740:	4b8c      	ldr	r3, [pc, #560]	; (8003974 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003742:	61bb      	str	r3, [r7, #24]
      break;
 8003744:	e108      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003746:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003750:	4b85      	ldr	r3, [pc, #532]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800375a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800375c:	4b82      	ldr	r3, [pc, #520]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003766:	4b80      	ldr	r3, [pc, #512]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376a:	08db      	lsrs	r3, r3, #3
 800376c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80e1 	beq.w	800394c <HAL_RCC_GetSysClockFreq+0x2b8>
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b02      	cmp	r3, #2
 800378e:	f000 8083 	beq.w	8003898 <HAL_RCC_GetSysClockFreq+0x204>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b02      	cmp	r3, #2
 8003796:	f200 80a1 	bhi.w	80038dc <HAL_RCC_GetSysClockFreq+0x248>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x114>
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d056      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x1c0>
 80037a6:	e099      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037a8:	4b6f      	ldr	r3, [pc, #444]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d02d      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037b4:	4b6c      	ldr	r3, [pc, #432]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	08db      	lsrs	r3, r3, #3
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	4a6b      	ldr	r2, [pc, #428]	; (800396c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
 80037c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037de:	4b62      	ldr	r3, [pc, #392]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80037f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003978 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800380e:	e087      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800381a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800397c <HAL_RCC_GetSysClockFreq+0x2e8>
 800381e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003822:	4b51      	ldr	r3, [pc, #324]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003832:	ed97 6a02 	vldr	s12, [r7, #8]
 8003836:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003978 <HAL_RCC_GetSysClockFreq+0x2e4>
 800383a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800383e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800384a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003852:	e065      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003980 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003866:	4b40      	ldr	r3, [pc, #256]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003876:	ed97 6a02 	vldr	s12, [r7, #8]
 800387a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003978 <HAL_RCC_GetSysClockFreq+0x2e4>
 800387e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800388a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800388e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003892:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003896:	e043      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003984 <HAL_RCC_GetSysClockFreq+0x2f0>
 80038a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038aa:	4b2f      	ldr	r3, [pc, #188]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80038be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003978 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038da:	e021      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003980 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003902:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003978 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800390a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800391e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	0a5b      	lsrs	r3, r3, #9
 8003926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800392a:	3301      	adds	r3, #1
 800392c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	ee07 3a90 	vmov	s15, r3
 8003934:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003938:	edd7 6a07 	vldr	s13, [r7, #28]
 800393c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003944:	ee17 3a90 	vmov	r3, s15
 8003948:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800394a:	e005      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	61bb      	str	r3, [r7, #24]
      break;
 8003950:	e002      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003954:	61bb      	str	r3, [r7, #24]
      break;
 8003956:	bf00      	nop
  }

  return sysclockfreq;
 8003958:	69bb      	ldr	r3, [r7, #24]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3724      	adds	r7, #36	; 0x24
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	58024400 	.word	0x58024400
 800396c:	03d09000 	.word	0x03d09000
 8003970:	003d0900 	.word	0x003d0900
 8003974:	017d7840 	.word	0x017d7840
 8003978:	46000000 	.word	0x46000000
 800397c:	4c742400 	.word	0x4c742400
 8003980:	4a742400 	.word	0x4a742400
 8003984:	4bbebc20 	.word	0x4bbebc20

08003988 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800398c:	b0ca      	sub	sp, #296	; 0x128
 800398e:	af00      	add	r7, sp, #0
 8003990:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003994:	2300      	movs	r3, #0
 8003996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800399a:	2300      	movs	r3, #0
 800399c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80039ac:	2500      	movs	r5, #0
 80039ae:	ea54 0305 	orrs.w	r3, r4, r5
 80039b2:	d049      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039be:	d02f      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80039c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039c4:	d828      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ca:	d01a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039d0:	d822      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039da:	d007      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039dc:	e01c      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039de:	4bb8      	ldr	r3, [pc, #736]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	4ab7      	ldr	r2, [pc, #732]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039ea:	e01a      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f0:	3308      	adds	r3, #8
 80039f2:	2102      	movs	r1, #2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 f9d1 	bl	8004d9c <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a00:	e00f      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a06:	3328      	adds	r3, #40	; 0x28
 8003a08:	2102      	movs	r1, #2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 fa78 	bl	8004f00 <RCCEx_PLL3_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a16:	e004      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a1e:	e000      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a2a:	4ba5      	ldr	r3, [pc, #660]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a38:	4aa1      	ldr	r2, [pc, #644]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	6513      	str	r3, [r2, #80]	; 0x50
 8003a3e:	e003      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003a54:	f04f 0900 	mov.w	r9, #0
 8003a58:	ea58 0309 	orrs.w	r3, r8, r9
 8003a5c:	d047      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d82a      	bhi.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a68:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003a85 	.word	0x08003a85
 8003a74:	08003a93 	.word	0x08003a93
 8003a78:	08003aa9 	.word	0x08003aa9
 8003a7c:	08003ac7 	.word	0x08003ac7
 8003a80:	08003ac7 	.word	0x08003ac7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a84:	4b8e      	ldr	r3, [pc, #568]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	4a8d      	ldr	r2, [pc, #564]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a90:	e01a      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a96:	3308      	adds	r3, #8
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f001 f97e 	bl	8004d9c <RCCEx_PLL2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aa6:	e00f      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aac:	3328      	adds	r3, #40	; 0x28
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f001 fa25 	bl	8004f00 <RCCEx_PLL3_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003abc:	e004      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad0:	4b7b      	ldr	r3, [pc, #492]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad4:	f023 0107 	bic.w	r1, r3, #7
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	4a78      	ldr	r2, [pc, #480]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6513      	str	r3, [r2, #80]	; 0x50
 8003ae4:	e003      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003afa:	f04f 0b00 	mov.w	fp, #0
 8003afe:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b02:	d04c      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0e:	d030      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b14:	d829      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b16:	2bc0      	cmp	r3, #192	; 0xc0
 8003b18:	d02d      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b1c:	d825      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b1e:	2b80      	cmp	r3, #128	; 0x80
 8003b20:	d018      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b22:	2b80      	cmp	r3, #128	; 0x80
 8003b24:	d821      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d007      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b2e:	e01c      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b30:	4b63      	ldr	r3, [pc, #396]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	4a62      	ldr	r2, [pc, #392]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b3c:	e01c      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b42:	3308      	adds	r3, #8
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 f928 	bl	8004d9c <RCCEx_PLL2_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b52:	e011      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b58:	3328      	adds	r3, #40	; 0x28
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 f9cf 	bl	8004f00 <RCCEx_PLL3_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b68:	e006      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b70:	e002      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b72:	bf00      	nop
 8003b74:	e000      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b80:	4b4f      	ldr	r3, [pc, #316]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b84:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	4a4c      	ldr	r2, [pc, #304]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6513      	str	r3, [r2, #80]	; 0x50
 8003b94:	e003      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003baa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003bb4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	d053      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bca:	d035      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003bcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd0:	d82e      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003bd6:	d031      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003bd8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003bdc:	d828      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be2:	d01a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be8:	d822      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf2:	d007      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003bf4:	e01c      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf6:	4b32      	ldr	r3, [pc, #200]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	4a31      	ldr	r2, [pc, #196]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c02:	e01c      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c08:	3308      	adds	r3, #8
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 f8c5 	bl	8004d9c <RCCEx_PLL2_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c18:	e011      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1e:	3328      	adds	r3, #40	; 0x28
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f001 f96c 	bl	8004f00 <RCCEx_PLL3_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c2e:	e006      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c36:	e002      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10b      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c46:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c56:	4a1a      	ldr	r2, [pc, #104]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c5c:	e003      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003c72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c76:	2300      	movs	r3, #0
 8003c78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c7c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003c80:	460b      	mov	r3, r1
 8003c82:	4313      	orrs	r3, r2
 8003c84:	d056      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c92:	d038      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c98:	d831      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c9e:	d034      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ca0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ca4:	d82b      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ca6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003caa:	d01d      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003cac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cb0:	d825      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003cb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cbc:	e01f      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cbe:	bf00      	nop
 8003cc0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc4:	4ba2      	ldr	r3, [pc, #648]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	4aa1      	ldr	r2, [pc, #644]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cd0:	e01c      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 f85e 	bl	8004d9c <RCCEx_PLL2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ce6:	e011      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cec:	3328      	adds	r3, #40	; 0x28
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 f905 	bl	8004f00 <RCCEx_PLL3_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cfc:	e006      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d04:	e002      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d06:	bf00      	nop
 8003d08:	e000      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d14:	4b8e      	ldr	r3, [pc, #568]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d24:	4a8a      	ldr	r2, [pc, #552]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d26:	430b      	orrs	r3, r1
 8003d28:	6593      	str	r3, [r2, #88]	; 0x58
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003d40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d4a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4313      	orrs	r3, r2
 8003d52:	d03a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5a:	2b30      	cmp	r3, #48	; 0x30
 8003d5c:	d01f      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d5e:	2b30      	cmp	r3, #48	; 0x30
 8003d60:	d819      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d00c      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d815      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d019      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d111      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d72:	4b77      	ldr	r3, [pc, #476]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	4a76      	ldr	r2, [pc, #472]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d7e:	e011      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d84:	3308      	adds	r3, #8
 8003d86:	2102      	movs	r1, #2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 f807 	bl	8004d9c <RCCEx_PLL2_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d94:	e006      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d9c:	e002      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003dac:	4b68      	ldr	r3, [pc, #416]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	4a65      	ldr	r2, [pc, #404]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dc0:	e003      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003dd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003de0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4313      	orrs	r3, r2
 8003de8:	d051      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003df4:	d035      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dfa:	d82e      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e00:	d031      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003e02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e06:	d828      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0c:	d01a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e12:	d822      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1c:	d007      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003e1e:	e01c      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e20:	4b4b      	ldr	r3, [pc, #300]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	4a4a      	ldr	r2, [pc, #296]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e2c:	e01c      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e32:	3308      	adds	r3, #8
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 ffb0 	bl	8004d9c <RCCEx_PLL2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e42:	e011      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e48:	3328      	adds	r3, #40	; 0x28
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f001 f857 	bl	8004f00 <RCCEx_PLL3_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e58:	e006      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e60:	e002      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e62:	bf00      	nop
 8003e64:	e000      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e70:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e74:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7e:	4a34      	ldr	r2, [pc, #208]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6513      	str	r3, [r2, #80]	; 0x50
 8003e84:	e003      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003ea4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	d056      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eb8:	d033      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ebe:	d82c      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ec0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ec4:	d02f      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003ec6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eca:	d826      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ecc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ed0:	d02b      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003ed2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ed6:	d820      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003edc:	d012      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003ede:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ee2:	d81a      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d022      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d115      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 ff50 	bl	8004d9c <RCCEx_PLL2_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f02:	e015      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f08:	3328      	adds	r3, #40	; 0x28
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fff7 	bl	8004f00 <RCCEx_PLL3_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f18:	e00a      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f20:	e006      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f22:	bf00      	nop
 8003f24:	e004      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f26:	bf00      	nop
 8003f28:	e002      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f2a:	bf00      	nop
 8003f2c:	e000      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10d      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f46:	4a02      	ldr	r2, [pc, #8]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	6513      	str	r3, [r2, #80]	; 0x50
 8003f4c:	e006      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f4e:	bf00      	nop
 8003f50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f72:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	d055      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f88:	d033      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f8e:	d82c      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d02f      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9a:	d826      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fa0:	d02b      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fa6:	d820      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fac:	d012      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb2:	d81a      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d022      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fbc:	d115      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fee8 	bl	8004d9c <RCCEx_PLL2_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fd2:	e015      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd8:	3328      	adds	r3, #40	; 0x28
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 ff8f 	bl	8004f00 <RCCEx_PLL3_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fe8:	e00a      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ff2:	bf00      	nop
 8003ff4:	e004      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ff6:	bf00      	nop
 8003ff8:	e002      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004008:	4ba3      	ldr	r3, [pc, #652]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004014:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004018:	4a9f      	ldr	r2, [pc, #636]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800401a:	430b      	orrs	r3, r1
 800401c:	6593      	str	r3, [r2, #88]	; 0x58
 800401e:	e003      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004024:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800403e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004042:	460b      	mov	r3, r1
 8004044:	4313      	orrs	r3, r2
 8004046:	d037      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004052:	d00e      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004058:	d816      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d018      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800405e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004062:	d111      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004064:	4b8c      	ldr	r3, [pc, #560]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	4a8b      	ldr	r2, [pc, #556]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800406a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004070:	e00f      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004076:	3308      	adds	r3, #8
 8004078:	2101      	movs	r1, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fe8e 	bl	8004d9c <RCCEx_PLL2_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004086:	e004      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800409a:	4b7f      	ldr	r3, [pc, #508]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800409c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	4a7b      	ldr	r2, [pc, #492]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040aa:	430b      	orrs	r3, r1
 80040ac:	6513      	str	r3, [r2, #80]	; 0x50
 80040ae:	e003      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80040c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040c8:	2300      	movs	r3, #0
 80040ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80040ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4313      	orrs	r3, r2
 80040d6:	d039      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d81c      	bhi.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	08004125 	.word	0x08004125
 80040ec:	080040f9 	.word	0x080040f9
 80040f0:	08004107 	.word	0x08004107
 80040f4:	08004125 	.word	0x08004125
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f8:	4b67      	ldr	r3, [pc, #412]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	4a66      	ldr	r2, [pc, #408]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004104:	e00f      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410a:	3308      	adds	r3, #8
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fe44 	bl	8004d9c <RCCEx_PLL2_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800411a:	e004      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004122:	e000      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004126:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800412e:	4b5a      	ldr	r3, [pc, #360]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004132:	f023 0103 	bic.w	r1, r3, #3
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413c:	4a56      	ldr	r2, [pc, #344]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800413e:	430b      	orrs	r3, r1
 8004140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004142:	e003      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004148:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004158:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800415c:	2300      	movs	r3, #0
 800415e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004162:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004166:	460b      	mov	r3, r1
 8004168:	4313      	orrs	r3, r2
 800416a:	f000 809f 	beq.w	80042ac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800416e:	4b4b      	ldr	r3, [pc, #300]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a4a      	ldr	r2, [pc, #296]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004178:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800417a:	f7fc ffb7 	bl	80010ec <HAL_GetTick>
 800417e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004182:	e00b      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004184:	f7fc ffb2 	bl	80010ec <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b64      	cmp	r3, #100	; 0x64
 8004192:	d903      	bls.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800419a:	e005      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800419c:	4b3f      	ldr	r3, [pc, #252]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ed      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80041a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d179      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80041b0:	4b39      	ldr	r3, [pc, #228]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041bc:	4053      	eors	r3, r2
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d015      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041c6:	4b34      	ldr	r3, [pc, #208]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041d2:	4b31      	ldr	r3, [pc, #196]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	4a30      	ldr	r2, [pc, #192]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041de:	4b2e      	ldr	r3, [pc, #184]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a2d      	ldr	r2, [pc, #180]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041ea:	4a2b      	ldr	r2, [pc, #172]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fe:	d118      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fc ff74 	bl	80010ec <HAL_GetTick>
 8004204:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004208:	e00d      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7fc ff6f 	bl	80010ec <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004214:	1ad2      	subs	r2, r2, r3
 8004216:	f241 3388 	movw	r3, #5000	; 0x1388
 800421a:	429a      	cmp	r2, r3
 800421c:	d903      	bls.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004224:	e005      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004226:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0eb      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004236:	2b00      	cmp	r3, #0
 8004238:	d129      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800424a:	d10e      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800424c:	4b12      	ldr	r3, [pc, #72]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004258:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800425c:	091a      	lsrs	r2, r3, #4
 800425e:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004260:	4013      	ands	r3, r2
 8004262:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004264:	430b      	orrs	r3, r1
 8004266:	6113      	str	r3, [r2, #16]
 8004268:	e005      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	4a0a      	ldr	r2, [pc, #40]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004270:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004274:	6113      	str	r3, [r2, #16]
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004278:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800427a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004286:	4a04      	ldr	r2, [pc, #16]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004288:	430b      	orrs	r3, r1
 800428a:	6713      	str	r3, [r2, #112]	; 0x70
 800428c:	e00e      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800428e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004292:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004296:	e009      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004298:	58024400 	.word	0x58024400
 800429c:	58024800 	.word	0x58024800
 80042a0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80042ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f002 0301 	and.w	r3, r2, #1
 80042b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042bc:	2300      	movs	r3, #0
 80042be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f000 8089 	beq.w	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d4:	2b28      	cmp	r3, #40	; 0x28
 80042d6:	d86b      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80042d8:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	080043b9 	.word	0x080043b9
 80042e4:	080043b1 	.word	0x080043b1
 80042e8:	080043b1 	.word	0x080043b1
 80042ec:	080043b1 	.word	0x080043b1
 80042f0:	080043b1 	.word	0x080043b1
 80042f4:	080043b1 	.word	0x080043b1
 80042f8:	080043b1 	.word	0x080043b1
 80042fc:	080043b1 	.word	0x080043b1
 8004300:	08004385 	.word	0x08004385
 8004304:	080043b1 	.word	0x080043b1
 8004308:	080043b1 	.word	0x080043b1
 800430c:	080043b1 	.word	0x080043b1
 8004310:	080043b1 	.word	0x080043b1
 8004314:	080043b1 	.word	0x080043b1
 8004318:	080043b1 	.word	0x080043b1
 800431c:	080043b1 	.word	0x080043b1
 8004320:	0800439b 	.word	0x0800439b
 8004324:	080043b1 	.word	0x080043b1
 8004328:	080043b1 	.word	0x080043b1
 800432c:	080043b1 	.word	0x080043b1
 8004330:	080043b1 	.word	0x080043b1
 8004334:	080043b1 	.word	0x080043b1
 8004338:	080043b1 	.word	0x080043b1
 800433c:	080043b1 	.word	0x080043b1
 8004340:	080043b9 	.word	0x080043b9
 8004344:	080043b1 	.word	0x080043b1
 8004348:	080043b1 	.word	0x080043b1
 800434c:	080043b1 	.word	0x080043b1
 8004350:	080043b1 	.word	0x080043b1
 8004354:	080043b1 	.word	0x080043b1
 8004358:	080043b1 	.word	0x080043b1
 800435c:	080043b1 	.word	0x080043b1
 8004360:	080043b9 	.word	0x080043b9
 8004364:	080043b1 	.word	0x080043b1
 8004368:	080043b1 	.word	0x080043b1
 800436c:	080043b1 	.word	0x080043b1
 8004370:	080043b1 	.word	0x080043b1
 8004374:	080043b1 	.word	0x080043b1
 8004378:	080043b1 	.word	0x080043b1
 800437c:	080043b1 	.word	0x080043b1
 8004380:	080043b9 	.word	0x080043b9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004388:	3308      	adds	r3, #8
 800438a:	2101      	movs	r1, #1
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fd05 	bl	8004d9c <RCCEx_PLL2_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004398:	e00f      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439e:	3328      	adds	r3, #40	; 0x28
 80043a0:	2101      	movs	r1, #1
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fdac 	bl	8004f00 <RCCEx_PLL3_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043ae:	e004      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80043b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10a      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80043c2:	4bbf      	ldr	r3, [pc, #764]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d0:	4abb      	ldr	r2, [pc, #748]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043d2:	430b      	orrs	r3, r1
 80043d4:	6553      	str	r3, [r2, #84]	; 0x54
 80043d6:	e003      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f002 0302 	and.w	r3, r2, #2
 80043ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043f0:	2300      	movs	r3, #0
 80043f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80043f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80043fa:	460b      	mov	r3, r1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	d041      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004406:	2b05      	cmp	r3, #5
 8004408:	d824      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800440a:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800440c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004410:	0800445d 	.word	0x0800445d
 8004414:	08004429 	.word	0x08004429
 8004418:	0800443f 	.word	0x0800443f
 800441c:	0800445d 	.word	0x0800445d
 8004420:	0800445d 	.word	0x0800445d
 8004424:	0800445d 	.word	0x0800445d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442c:	3308      	adds	r3, #8
 800442e:	2101      	movs	r1, #1
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fcb3 	bl	8004d9c <RCCEx_PLL2_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800443c:	e00f      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004442:	3328      	adds	r3, #40	; 0x28
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fd5a 	bl	8004f00 <RCCEx_PLL3_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004452:	e004      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800445a:	e000      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800445c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004466:	4b96      	ldr	r3, [pc, #600]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	f023 0107 	bic.w	r1, r3, #7
 800446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004474:	4a92      	ldr	r2, [pc, #584]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004476:	430b      	orrs	r3, r1
 8004478:	6553      	str	r3, [r2, #84]	; 0x54
 800447a:	e003      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004480:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f002 0304 	and.w	r3, r2, #4
 8004490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004494:	2300      	movs	r3, #0
 8004496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800449a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800449e:	460b      	mov	r3, r1
 80044a0:	4313      	orrs	r3, r2
 80044a2:	d044      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ac:	2b05      	cmp	r3, #5
 80044ae:	d825      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80044b0:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	08004505 	.word	0x08004505
 80044bc:	080044d1 	.word	0x080044d1
 80044c0:	080044e7 	.word	0x080044e7
 80044c4:	08004505 	.word	0x08004505
 80044c8:	08004505 	.word	0x08004505
 80044cc:	08004505 	.word	0x08004505
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d4:	3308      	adds	r3, #8
 80044d6:	2101      	movs	r1, #1
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fc5f 	bl	8004d9c <RCCEx_PLL2_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044e4:	e00f      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ea:	3328      	adds	r3, #40	; 0x28
 80044ec:	2101      	movs	r1, #1
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fd06 	bl	8004f00 <RCCEx_PLL3_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044fa:	e004      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004502:	e000      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800450e:	4b6c      	ldr	r3, [pc, #432]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	f023 0107 	bic.w	r1, r3, #7
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800451e:	4a68      	ldr	r2, [pc, #416]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004520:	430b      	orrs	r3, r1
 8004522:	6593      	str	r3, [r2, #88]	; 0x58
 8004524:	e003      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800452a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	f002 0320 	and.w	r3, r2, #32
 800453a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004544:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004548:	460b      	mov	r3, r1
 800454a:	4313      	orrs	r3, r2
 800454c:	d055      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800455a:	d033      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800455c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004560:	d82c      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d02f      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456c:	d826      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800456e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004572:	d02b      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004574:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004578:	d820      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800457a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800457e:	d012      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004584:	d81a      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d022      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800458a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800458e:	d115      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004594:	3308      	adds	r3, #8
 8004596:	2100      	movs	r1, #0
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fbff 	bl	8004d9c <RCCEx_PLL2_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045a4:	e015      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045aa:	3328      	adds	r3, #40	; 0x28
 80045ac:	2102      	movs	r1, #2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fca6 	bl	8004f00 <RCCEx_PLL3_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045ba:	e00a      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045c2:	e006      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045c4:	bf00      	nop
 80045c6:	e004      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045c8:	bf00      	nop
 80045ca:	e002      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045cc:	bf00      	nop
 80045ce:	e000      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045da:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	4a35      	ldr	r2, [pc, #212]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6553      	str	r3, [r2, #84]	; 0x54
 80045f0:	e003      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800460a:	2300      	movs	r3, #0
 800460c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004610:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004614:	460b      	mov	r3, r1
 8004616:	4313      	orrs	r3, r2
 8004618:	d058      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800461e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004622:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004626:	d033      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004628:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800462c:	d82c      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004632:	d02f      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004638:	d826      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800463a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800463e:	d02b      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004644:	d820      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464a:	d012      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800464c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004650:	d81a      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d022      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465a:	d115      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800465c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004660:	3308      	adds	r3, #8
 8004662:	2100      	movs	r1, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fb99 	bl	8004d9c <RCCEx_PLL2_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004670:	e015      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004676:	3328      	adds	r3, #40	; 0x28
 8004678:	2102      	movs	r1, #2
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fc40 	bl	8004f00 <RCCEx_PLL3_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004686:	e00a      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800468e:	e006      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004690:	bf00      	nop
 8004692:	e004      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004694:	bf00      	nop
 8004696:	e002      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004698:	bf00      	nop
 800469a:	e000      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800469c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800469e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10e      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046aa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046b6:	4a02      	ldr	r2, [pc, #8]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046b8:	430b      	orrs	r3, r1
 80046ba:	6593      	str	r3, [r2, #88]	; 0x58
 80046bc:	e006      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80046be:	bf00      	nop
 80046c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80046d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046dc:	2300      	movs	r3, #0
 80046de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80046e6:	460b      	mov	r3, r1
 80046e8:	4313      	orrs	r3, r2
 80046ea:	d055      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046f8:	d033      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80046fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046fe:	d82c      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004704:	d02f      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470a:	d826      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800470c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004710:	d02b      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004712:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004716:	d820      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800471c:	d012      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800471e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004722:	d81a      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d022      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472c:	d115      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004732:	3308      	adds	r3, #8
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fb30 	bl	8004d9c <RCCEx_PLL2_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004742:	e015      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004748:	3328      	adds	r3, #40	; 0x28
 800474a:	2102      	movs	r1, #2
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fbd7 	bl	8004f00 <RCCEx_PLL3_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004758:	e00a      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004760:	e006      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004762:	bf00      	nop
 8004764:	e004      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004766:	bf00      	nop
 8004768:	e002      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800476a:	bf00      	nop
 800476c:	e000      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800476e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004770:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004778:	4ba1      	ldr	r3, [pc, #644]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800477a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004784:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004788:	4a9d      	ldr	r2, [pc, #628]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800478a:	430b      	orrs	r3, r1
 800478c:	6593      	str	r3, [r2, #88]	; 0x58
 800478e:	e003      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004794:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f002 0308 	and.w	r3, r2, #8
 80047a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047a8:	2300      	movs	r3, #0
 80047aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80047b2:	460b      	mov	r3, r1
 80047b4:	4313      	orrs	r3, r2
 80047b6:	d01e      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80047b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ca:	3328      	adds	r3, #40	; 0x28
 80047cc:	2102      	movs	r1, #2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fb96 	bl	8004f00 <RCCEx_PLL3_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047e0:	4b87      	ldr	r3, [pc, #540]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f0:	4a83      	ldr	r2, [pc, #524]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	f002 0310 	and.w	r3, r2, #16
 8004802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004806:	2300      	movs	r3, #0
 8004808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800480c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004810:	460b      	mov	r3, r1
 8004812:	4313      	orrs	r3, r2
 8004814:	d01e      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800481e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004822:	d10c      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004828:	3328      	adds	r3, #40	; 0x28
 800482a:	2102      	movs	r1, #2
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fb67 	bl	8004f00 <RCCEx_PLL3_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800483e:	4b70      	ldr	r3, [pc, #448]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004842:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800484a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800484e:	4a6c      	ldr	r2, [pc, #432]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004850:	430b      	orrs	r3, r1
 8004852:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004864:	2300      	movs	r3, #0
 8004866:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800486a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800486e:	460b      	mov	r3, r1
 8004870:	4313      	orrs	r3, r2
 8004872:	d03e      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004878:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800487c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004880:	d022      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004882:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004886:	d81b      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800488c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004890:	d00b      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004892:	e015      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004898:	3308      	adds	r3, #8
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fa7d 	bl	8004d9c <RCCEx_PLL2_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048a8:	e00f      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ae:	3328      	adds	r3, #40	; 0x28
 80048b0:	2102      	movs	r1, #2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fb24 	bl	8004f00 <RCCEx_PLL3_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048be:	e004      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048c6:	e000      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80048c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048d2:	4b4b      	ldr	r3, [pc, #300]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048e2:	4a47      	ldr	r2, [pc, #284]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6593      	str	r3, [r2, #88]	; 0x58
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80048fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8004900:	2300      	movs	r3, #0
 8004902:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004904:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004908:	460b      	mov	r3, r1
 800490a:	4313      	orrs	r3, r2
 800490c:	d03b      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800491a:	d01f      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800491c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004920:	d818      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004926:	d003      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800492c:	d007      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800492e:	e011      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004930:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	4a32      	ldr	r2, [pc, #200]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800493a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800493c:	e00f      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004942:	3328      	adds	r3, #40	; 0x28
 8004944:	2101      	movs	r1, #1
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fada 	bl	8004f00 <RCCEx_PLL3_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004952:	e004      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800495a:	e000      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800495c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800495e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10b      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004966:	4b26      	ldr	r3, [pc, #152]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004978:	430b      	orrs	r3, r1
 800497a:	6553      	str	r3, [r2, #84]	; 0x54
 800497c:	e003      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004982:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004992:	673b      	str	r3, [r7, #112]	; 0x70
 8004994:	2300      	movs	r3, #0
 8004996:	677b      	str	r3, [r7, #116]	; 0x74
 8004998:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800499c:	460b      	mov	r3, r1
 800499e:	4313      	orrs	r3, r2
 80049a0:	d034      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d007      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80049b2:	e011      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b4:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	4a11      	ldr	r2, [pc, #68]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049c0:	e00e      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c6:	3308      	adds	r3, #8
 80049c8:	2102      	movs	r1, #2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 f9e6 	bl	8004d9c <RCCEx_PLL2_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049d6:	e003      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10d      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f6:	4a02      	ldr	r2, [pc, #8]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049f8:	430b      	orrs	r3, r1
 80049fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049fc:	e006      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80049fe:	bf00      	nop
 8004a00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004a18:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a1e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004a22:	460b      	mov	r3, r1
 8004a24:	4313      	orrs	r3, r2
 8004a26:	d00c      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a2c:	3328      	adds	r3, #40	; 0x28
 8004a2e:	2102      	movs	r1, #2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fa65 	bl	8004f00 <RCCEx_PLL3_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a50:	2300      	movs	r3, #0
 8004a52:	667b      	str	r3, [r7, #100]	; 0x64
 8004a54:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	d038      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a6a:	d018      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a70:	d811      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a76:	d014      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a7c:	d80b      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d011      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a86:	d106      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a88:	4bc3      	ldr	r3, [pc, #780]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	4ac2      	ldr	r2, [pc, #776]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a94:	e008      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a9c:	e004      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a9e:	bf00      	nop
 8004aa0:	e002      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004aa2:	bf00      	nop
 8004aa4:	e000      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ab0:	4bb9      	ldr	r3, [pc, #740]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ac0:	4ab5      	ldr	r2, [pc, #724]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	6553      	str	r3, [r2, #84]	; 0x54
 8004ac6:	e003      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004acc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004adc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ade:	2300      	movs	r3, #0
 8004ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ae2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	d009      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aec:	4baa      	ldr	r3, [pc, #680]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afa:	4aa7      	ldr	r2, [pc, #668]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b0e:	2300      	movs	r3, #0
 8004b10:	657b      	str	r3, [r7, #84]	; 0x54
 8004b12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004b16:	460b      	mov	r3, r1
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b1c:	4b9e      	ldr	r3, [pc, #632]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b2c:	4a9a      	ldr	r2, [pc, #616]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b40:	2300      	movs	r3, #0
 8004b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b44:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	d009      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b4e:	4b92      	ldr	r3, [pc, #584]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b52:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5c:	4a8e      	ldr	r2, [pc, #568]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b70:	2300      	movs	r3, #0
 8004b72:	647b      	str	r3, [r7, #68]	; 0x44
 8004b74:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d00e      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b7e:	4b86      	ldr	r3, [pc, #536]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	4a85      	ldr	r2, [pc, #532]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b88:	6113      	str	r3, [r2, #16]
 8004b8a:	4b83      	ldr	r3, [pc, #524]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b8c:	6919      	ldr	r1, [r3, #16]
 8004b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b92:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b96:	4a80      	ldr	r2, [pc, #512]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004ba8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004baa:	2300      	movs	r3, #0
 8004bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004bb8:	4b77      	ldr	r3, [pc, #476]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc6:	4a74      	ldr	r2, [pc, #464]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bda:	2300      	movs	r3, #0
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004bde:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004be2:	460b      	mov	r3, r1
 8004be4:	4313      	orrs	r3, r2
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004be8:	4b6b      	ldr	r3, [pc, #428]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf8:	4a67      	ldr	r2, [pc, #412]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	2100      	movs	r1, #0
 8004c08:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004c14:	460b      	mov	r3, r1
 8004c16:	4313      	orrs	r3, r2
 8004c18:	d011      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c1e:	3308      	adds	r3, #8
 8004c20:	2100      	movs	r1, #0
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f8ba 	bl	8004d9c <RCCEx_PLL2_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	2100      	movs	r1, #0
 8004c48:	6239      	str	r1, [r7, #32]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c50:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c54:	460b      	mov	r3, r1
 8004c56:	4313      	orrs	r3, r2
 8004c58:	d011      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c5e:	3308      	adds	r3, #8
 8004c60:	2101      	movs	r1, #1
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f89a 	bl	8004d9c <RCCEx_PLL2_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	2100      	movs	r1, #0
 8004c88:	61b9      	str	r1, [r7, #24]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	61fb      	str	r3, [r7, #28]
 8004c90:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c94:	460b      	mov	r3, r1
 8004c96:	4313      	orrs	r3, r2
 8004c98:	d011      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	2102      	movs	r1, #2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f87a 	bl	8004d9c <RCCEx_PLL2_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004cae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	6139      	str	r1, [r7, #16]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	d011      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cde:	3328      	adds	r3, #40	; 0x28
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 f90c 	bl	8004f00 <RCCEx_PLL3_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	2100      	movs	r1, #0
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d14:	460b      	mov	r3, r1
 8004d16:	4313      	orrs	r3, r2
 8004d18:	d011      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d1e:	3328      	adds	r3, #40	; 0x28
 8004d20:	2101      	movs	r1, #1
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f8ec 	bl	8004f00 <RCCEx_PLL3_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d46:	2100      	movs	r1, #0
 8004d48:	6039      	str	r1, [r7, #0]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	607b      	str	r3, [r7, #4]
 8004d50:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d54:	460b      	mov	r3, r1
 8004d56:	4313      	orrs	r3, r2
 8004d58:	d011      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d5e:	3328      	adds	r3, #40	; 0x28
 8004d60:	2102      	movs	r1, #2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 f8cc 	bl	8004f00 <RCCEx_PLL3_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004d7e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e000      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004d92:	46bd      	mov	sp, r7
 8004d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d98:	58024400 	.word	0x58024400

08004d9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004daa:	4b53      	ldr	r3, [pc, #332]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d101      	bne.n	8004dba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e099      	b.n	8004eee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004dba:	4b4f      	ldr	r3, [pc, #316]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a4e      	ldr	r2, [pc, #312]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004dc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc6:	f7fc f991 	bl	80010ec <HAL_GetTick>
 8004dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004dcc:	e008      	b.n	8004de0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dce:	f7fc f98d 	bl	80010ec <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e086      	b.n	8004eee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004de0:	4b45      	ldr	r3, [pc, #276]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f0      	bne.n	8004dce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004dec:	4b42      	ldr	r3, [pc, #264]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	031b      	lsls	r3, r3, #12
 8004dfa:	493f      	ldr	r1, [pc, #252]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	628b      	str	r3, [r1, #40]	; 0x28
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	025b      	lsls	r3, r3, #9
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	041b      	lsls	r3, r3, #16
 8004e1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	061b      	lsls	r3, r3, #24
 8004e2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e30:	4931      	ldr	r1, [pc, #196]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e36:	4b30      	ldr	r3, [pc, #192]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	492d      	ldr	r1, [pc, #180]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e48:	4b2b      	ldr	r3, [pc, #172]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	f023 0220 	bic.w	r2, r3, #32
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	4928      	ldr	r1, [pc, #160]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e5a:	4b27      	ldr	r3, [pc, #156]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	4a26      	ldr	r2, [pc, #152]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004e60:	f023 0310 	bic.w	r3, r3, #16
 8004e64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e66:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e6a:	4b24      	ldr	r3, [pc, #144]	; (8004efc <RCCEx_PLL2_Config+0x160>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	69d2      	ldr	r2, [r2, #28]
 8004e72:	00d2      	lsls	r2, r2, #3
 8004e74:	4920      	ldr	r1, [pc, #128]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	4a1e      	ldr	r2, [pc, #120]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004e80:	f043 0310 	orr.w	r3, r3, #16
 8004e84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004e92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e98:	e00f      	b.n	8004eba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d106      	bne.n	8004eae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ea0:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004eac:	e005      	b.n	8004eba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004eae:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	4a11      	ldr	r2, [pc, #68]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004eb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004eb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004eba:	4b0f      	ldr	r3, [pc, #60]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a0e      	ldr	r2, [pc, #56]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004ec0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec6:	f7fc f911 	bl	80010ec <HAL_GetTick>
 8004eca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ecc:	e008      	b.n	8004ee0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ece:	f7fc f90d 	bl	80010ec <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e006      	b.n	8004eee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <RCCEx_PLL2_Config+0x15c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	ffff0007 	.word	0xffff0007

08004f00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f0e:	4b53      	ldr	r3, [pc, #332]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d101      	bne.n	8004f1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e099      	b.n	8005052 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f1e:	4b4f      	ldr	r3, [pc, #316]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a4e      	ldr	r2, [pc, #312]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2a:	f7fc f8df 	bl	80010ec <HAL_GetTick>
 8004f2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f30:	e008      	b.n	8004f44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f32:	f7fc f8db 	bl	80010ec <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e086      	b.n	8005052 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f44:	4b45      	ldr	r3, [pc, #276]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f0      	bne.n	8004f32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f50:	4b42      	ldr	r3, [pc, #264]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	051b      	lsls	r3, r3, #20
 8004f5e:	493f      	ldr	r1, [pc, #252]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	628b      	str	r3, [r1, #40]	; 0x28
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	025b      	lsls	r3, r3, #9
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	061b      	lsls	r3, r3, #24
 8004f90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f94:	4931      	ldr	r1, [pc, #196]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f9a:	4b30      	ldr	r3, [pc, #192]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	492d      	ldr	r1, [pc, #180]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004fac:	4b2b      	ldr	r3, [pc, #172]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	4928      	ldr	r1, [pc, #160]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004fbe:	4b27      	ldr	r3, [pc, #156]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	4a26      	ldr	r2, [pc, #152]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004fca:	4b24      	ldr	r3, [pc, #144]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fce:	4b24      	ldr	r3, [pc, #144]	; (8005060 <RCCEx_PLL3_Config+0x160>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	69d2      	ldr	r2, [r2, #28]
 8004fd6:	00d2      	lsls	r2, r2, #3
 8004fd8:	4920      	ldr	r1, [pc, #128]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004fde:	4b1f      	ldr	r3, [pc, #124]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	4a1e      	ldr	r2, [pc, #120]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d106      	bne.n	8004ffe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ff0:	4b1a      	ldr	r3, [pc, #104]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	4a19      	ldr	r2, [pc, #100]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8004ff6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ffa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ffc:	e00f      	b.n	800501e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d106      	bne.n	8005012 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005004:	4b15      	ldr	r3, [pc, #84]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	4a14      	ldr	r2, [pc, #80]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 800500a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800500e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005010:	e005      	b.n	800501e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005012:	4b12      	ldr	r3, [pc, #72]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	4a11      	ldr	r2, [pc, #68]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8005018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800501c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800501e:	4b0f      	ldr	r3, [pc, #60]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a0e      	ldr	r2, [pc, #56]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8005024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800502a:	f7fc f85f 	bl	80010ec <HAL_GetTick>
 800502e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005030:	e008      	b.n	8005044 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005032:	f7fc f85b 	bl	80010ec <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e006      	b.n	8005052 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005044:	4b05      	ldr	r3, [pc, #20]	; (800505c <RCCEx_PLL3_Config+0x15c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f0      	beq.n	8005032 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	58024400 	.word	0x58024400
 8005060:	ffff0007 	.word	0xffff0007

08005064 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e054      	b.n	8005120 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	7a5b      	ldrb	r3, [r3, #9]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d105      	bne.n	800508c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fb fe8a 	bl	8000da0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f023 0120 	bic.w	r1, r3, #32
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0204 	orr.w	r2, r2, #4
 80050b6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d104      	bne.n	80050d0 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2204      	movs	r2, #4
 80050ca:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e027      	b.n	8005120 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80050d0:	f7fc f80c 	bl	80010ec <HAL_GetTick>
 80050d4:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80050d6:	e015      	b.n	8005104 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80050d8:	f7fc f808 	bl	80010ec <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d90e      	bls.n	8005104 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d107      	bne.n	8005104 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2204      	movs	r2, #4
 80050f8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e00d      	b.n	8005120 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b04      	cmp	r3, #4
 8005110:	d0e2      	beq.n	80050d8 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	7a1b      	ldrb	r3, [r3, #8]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_RNG_GenerateRandomNumber+0x1a>
 800513e:	2302      	movs	r3, #2
 8005140:	e044      	b.n	80051cc <HAL_RNG_GenerateRandomNumber+0xa4>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	7a5b      	ldrb	r3, [r3, #9]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	d133      	bne.n	80051ba <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8005158:	f7fb ffc8 	bl	80010ec <HAL_GetTick>
 800515c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800515e:	e018      	b.n	8005192 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005160:	f7fb ffc4 	bl	80010ec <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d911      	bls.n	8005192 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b01      	cmp	r3, #1
 800517a:	d00a      	beq.n	8005192 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e01c      	b.n	80051cc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b01      	cmp	r3, #1
 800519e:	d1df      	bne.n	8005160 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	725a      	strb	r2, [r3, #9]
 80051b8:	e004      	b.n	80051c4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2204      	movs	r2, #4
 80051be:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	721a      	strb	r2, [r3, #8]

  return status;
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <__libc_init_array>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4d0d      	ldr	r5, [pc, #52]	; (800520c <__libc_init_array+0x38>)
 80051d8:	4c0d      	ldr	r4, [pc, #52]	; (8005210 <__libc_init_array+0x3c>)
 80051da:	1b64      	subs	r4, r4, r5
 80051dc:	10a4      	asrs	r4, r4, #2
 80051de:	2600      	movs	r6, #0
 80051e0:	42a6      	cmp	r6, r4
 80051e2:	d109      	bne.n	80051f8 <__libc_init_array+0x24>
 80051e4:	4d0b      	ldr	r5, [pc, #44]	; (8005214 <__libc_init_array+0x40>)
 80051e6:	4c0c      	ldr	r4, [pc, #48]	; (8005218 <__libc_init_array+0x44>)
 80051e8:	f000 f82e 	bl	8005248 <_init>
 80051ec:	1b64      	subs	r4, r4, r5
 80051ee:	10a4      	asrs	r4, r4, #2
 80051f0:	2600      	movs	r6, #0
 80051f2:	42a6      	cmp	r6, r4
 80051f4:	d105      	bne.n	8005202 <__libc_init_array+0x2e>
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
 80051f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fc:	4798      	blx	r3
 80051fe:	3601      	adds	r6, #1
 8005200:	e7ee      	b.n	80051e0 <__libc_init_array+0xc>
 8005202:	f855 3b04 	ldr.w	r3, [r5], #4
 8005206:	4798      	blx	r3
 8005208:	3601      	adds	r6, #1
 800520a:	e7f2      	b.n	80051f2 <__libc_init_array+0x1e>
 800520c:	080052cc 	.word	0x080052cc
 8005210:	080052cc 	.word	0x080052cc
 8005214:	080052cc 	.word	0x080052cc
 8005218:	080052d0 	.word	0x080052d0

0800521c <memcpy>:
 800521c:	440a      	add	r2, r1
 800521e:	4291      	cmp	r1, r2
 8005220:	f100 33ff 	add.w	r3, r0, #4294967295
 8005224:	d100      	bne.n	8005228 <memcpy+0xc>
 8005226:	4770      	bx	lr
 8005228:	b510      	push	{r4, lr}
 800522a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800522e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005232:	4291      	cmp	r1, r2
 8005234:	d1f9      	bne.n	800522a <memcpy+0xe>
 8005236:	bd10      	pop	{r4, pc}

08005238 <memset>:
 8005238:	4402      	add	r2, r0
 800523a:	4603      	mov	r3, r0
 800523c:	4293      	cmp	r3, r2
 800523e:	d100      	bne.n	8005242 <memset+0xa>
 8005240:	4770      	bx	lr
 8005242:	f803 1b01 	strb.w	r1, [r3], #1
 8005246:	e7f9      	b.n	800523c <memset+0x4>

08005248 <_init>:
 8005248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524a:	bf00      	nop
 800524c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524e:	bc08      	pop	{r3}
 8005250:	469e      	mov	lr, r3
 8005252:	4770      	bx	lr

08005254 <_fini>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	bf00      	nop
 8005258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525a:	bc08      	pop	{r3}
 800525c:	469e      	mov	lr, r3
 800525e:	4770      	bx	lr

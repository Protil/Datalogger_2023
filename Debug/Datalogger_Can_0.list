
Datalogger_Can_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080050b4  080050b4  000150b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080050b8  080050b8  000150b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080050bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000124  24000010  080050cc  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000134  080050cc  00020134  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ed59  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001d0b  00000000  00000000  0002ed97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b58  00000000  00000000  00030aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a80  00000000  00000000  00031600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035da5  00000000  00000000  00032080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000cca1  00000000  00000000  00067e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00158926  00000000  00000000  00074ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001cd3ec  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f8c  00000000  00000000  001cd43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005030 	.word	0x08005030

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005030 	.word	0x08005030

080002d8 <send_message_CAN_positive>:
#include <math.h>

// BEGIN Funções de Escrita

void send_message_CAN_positive(FDCAN_HandleTypeDef hfdcan, uint8_t id, uint64_t value)
{
 80002d8:	b084      	sub	sp, #16
 80002da:	b580      	push	{r7, lr}
 80002dc:	b08e      	sub	sp, #56	; 0x38
 80002de:	af02      	add	r7, sp, #8
 80002e0:	f107 0c38 	add.w	ip, r7, #56	; 0x38
 80002e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t TxData[8] = {0};
 80002e8:	2300      	movs	r3, #0
 80002ea:	627b      	str	r3, [r7, #36]	; 0x24
 80002ec:	2300      	movs	r3, #0
 80002ee:	62bb      	str	r3, [r7, #40]	; 0x28
	FDCAN_TxHeaderTypeDef TxHeader;
    uint8_t number_of_bytes = minimum_number_of_bytes_to_represent_value(value);
 80002f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80002f4:	f000 f8d5 	bl	80004a2 <minimum_number_of_bytes_to_represent_value>
 80002f8:	4603      	mov	r3, r0
 80002fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


    uint64_to_array_of_uint8(TxData, value, number_of_bytes);
 80002fe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800030c:	4608      	mov	r0, r1
 800030e:	f000 f81c 	bl	800034a <uint64_to_array_of_uint8>
	configure_message_header(&TxHeader, id, number_of_bytes);
 8000312:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000316:	f897 10d8 	ldrb.w	r1, [r7, #216]	; 0xd8
 800031a:	463b      	mov	r3, r7
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f8eb 	bl	80004f8 <configure_message_header>

  // Boa pratica colocar dentro de um if (eu acho)
  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, TxData)!= HAL_OK)
 8000322:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000326:	463b      	mov	r3, r7
 8000328:	4619      	mov	r1, r3
 800032a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800032e:	f001 f97c 	bl	800162a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <send_message_CAN_positive+0x64>
  {
	Error_Handler();
 8000338:	f000 fbea 	bl	8000b10 <Error_Handler>
  }
}
 800033c:	bf00      	nop
 800033e:	3730      	adds	r7, #48	; 0x30
 8000340:	46bd      	mov	sp, r7
 8000342:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000346:	b004      	add	sp, #16
 8000348:	4770      	bx	lr

0800034a <uint64_to_array_of_uint8>:



// Função feita com base em https://www.educative.io/answers/how-to-convert-an-integer-into-a-specific-byte-array-in-cpp
void uint64_to_array_of_uint8(uint8_t *bytes, uint64_t value, uint8_t number_of_bytes)
{
 800034a:	b4f0      	push	{r4, r5, r6, r7}
 800034c:	b086      	sub	sp, #24
 800034e:	af00      	add	r7, sp, #0
 8000350:	60f8      	str	r0, [r7, #12]
 8000352:	e9c7 2300 	strd	r2, r3, [r7]
  for (int byte_index = 0; byte_index < number_of_bytes; byte_index++)
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
 800035a:	e01d      	b.n	8000398 <uint64_to_array_of_uint8+0x4e>
  {
    bytes[byte_index] = (value >> ((number_of_bytes - byte_index - 1) * 8)) & 0xFF;
 800035c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	1ad3      	subs	r3, r2, r3
 8000364:	3b01      	subs	r3, #1
 8000366:	00d9      	lsls	r1, r3, #3
 8000368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	f1a1 0020 	sub.w	r0, r1, #32
 8000374:	fa22 f401 	lsr.w	r4, r2, r1
 8000378:	fa03 f606 	lsl.w	r6, r3, r6
 800037c:	4334      	orrs	r4, r6
 800037e:	fa23 f000 	lsr.w	r0, r3, r0
 8000382:	4304      	orrs	r4, r0
 8000384:	fa23 f501 	lsr.w	r5, r3, r1
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	68fa      	ldr	r2, [r7, #12]
 800038c:	4413      	add	r3, r2
 800038e:	b2e2      	uxtb	r2, r4
 8000390:	701a      	strb	r2, [r3, #0]
  for (int byte_index = 0; byte_index < number_of_bytes; byte_index++)
 8000392:	697b      	ldr	r3, [r7, #20]
 8000394:	3301      	adds	r3, #1
 8000396:	617b      	str	r3, [r7, #20]
 8000398:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800039c:	697a      	ldr	r2, [r7, #20]
 800039e:	429a      	cmp	r2, r3
 80003a0:	dbdc      	blt.n	800035c <uint64_to_array_of_uint8+0x12>
  }
}
 80003a2:	bf00      	nop
 80003a4:	bf00      	nop
 80003a6:	3718      	adds	r7, #24
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bcf0      	pop	{r4, r5, r6, r7}
 80003ac:	4770      	bx	lr

080003ae <array_of_uint16_to_uint64>:

uint64_t array_of_uint16_to_uint64(uint16_t *lista, uint8_t size)
{
 80003ae:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	70f9      	strb	r1, [r7, #3]
    uint64_t total = 0;
 80003ba:	f04f 0000 	mov.w	r0, #0
 80003be:	f04f 0100 	mov.w	r1, #0
 80003c2:	e9c7 0106 	strd	r0, r1, [r7, #24]

    uint64_t copy_of_byte_to_uint64;


    for(int i = 0; i < size; i++)
 80003c6:	2100      	movs	r1, #0
 80003c8:	6179      	str	r1, [r7, #20]
 80003ca:	e02a      	b.n	8000422 <array_of_uint16_to_uint64+0x74>
    {
        copy_of_byte_to_uint64 = lista[i];
 80003cc:	6979      	ldr	r1, [r7, #20]
 80003ce:	0049      	lsls	r1, r1, #1
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	4401      	add	r1, r0
 80003d4:	8809      	ldrh	r1, [r1, #0]
 80003d6:	b289      	uxth	r1, r1
 80003d8:	2000      	movs	r0, #0
 80003da:	468a      	mov	sl, r1
 80003dc:	4683      	mov	fp, r0
 80003de:	e9c7 ab02 	strd	sl, fp, [r7, #8]

        total += copy_of_byte_to_uint64 << ((size - i - 1) * 16);
 80003e2:	78f8      	ldrb	r0, [r7, #3]
 80003e4:	6979      	ldr	r1, [r7, #20]
 80003e6:	1a41      	subs	r1, r0, r1
 80003e8:	3901      	subs	r1, #1
 80003ea:	010c      	lsls	r4, r1, #4
 80003ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80003f0:	f1a4 0620 	sub.w	r6, r4, #32
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa01 f304 	lsl.w	r3, r1, r4
 80003fc:	fa00 f606 	lsl.w	r6, r0, r6
 8000400:	4333      	orrs	r3, r6
 8000402:	fa20 f505 	lsr.w	r5, r0, r5
 8000406:	432b      	orrs	r3, r5
 8000408:	fa00 f204 	lsl.w	r2, r0, r4
 800040c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000410:	eb10 0802 	adds.w	r8, r0, r2
 8000414:	eb41 0903 	adc.w	r9, r1, r3
 8000418:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(int i = 0; i < size; i++)
 800041c:	6979      	ldr	r1, [r7, #20]
 800041e:	3101      	adds	r1, #1
 8000420:	6179      	str	r1, [r7, #20]
 8000422:	78f9      	ldrb	r1, [r7, #3]
 8000424:	6978      	ldr	r0, [r7, #20]
 8000426:	4288      	cmp	r0, r1
 8000428:	dbd0      	blt.n	80003cc <array_of_uint16_to_uint64+0x1e>
    }

    return total;
 800042a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800042e:	4610      	mov	r0, r2
 8000430:	4619      	mov	r1, r3
 8000432:	3720      	adds	r7, #32
 8000434:	46bd      	mov	sp, r7
 8000436:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800043a:	4770      	bx	lr

0800043c <uint64_to_array_of_uint16>:

void uint64_to_array_of_uint16(uint16_t *lista, uint8_t size, uint64_t value)
{
 800043c:	b4f0      	push	{r4, r5, r6, r7}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	e9c7 2300 	strd	r2, r3, [r7]
 8000448:	460b      	mov	r3, r1
 800044a:	72fb      	strb	r3, [r7, #11]
    for(int i = 0; i < size; i++)
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	e01d      	b.n	800048e <uint64_to_array_of_uint16+0x52>
    {
        lista[i] = value >> ((size - i - 1) * 16) & 0xFFFF;
 8000452:	7afa      	ldrb	r2, [r7, #11]
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	3b01      	subs	r3, #1
 800045a:	0119      	lsls	r1, r3, #4
 800045c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	f1a1 0020 	sub.w	r0, r1, #32
 8000468:	fa22 f401 	lsr.w	r4, r2, r1
 800046c:	fa03 f606 	lsl.w	r6, r3, r6
 8000470:	4334      	orrs	r4, r6
 8000472:	fa23 f000 	lsr.w	r0, r3, r0
 8000476:	4304      	orrs	r4, r0
 8000478:	fa23 f501 	lsr.w	r5, r3, r1
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	4413      	add	r3, r2
 8000484:	b2a2      	uxth	r2, r4
 8000486:	801a      	strh	r2, [r3, #0]
    for(int i = 0; i < size; i++)
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	3301      	adds	r3, #1
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	7afb      	ldrb	r3, [r7, #11]
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	429a      	cmp	r2, r3
 8000494:	dbdd      	blt.n	8000452 <uint64_to_array_of_uint16+0x16>
    }
}
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bcf0      	pop	{r4, r5, r6, r7}
 80004a0:	4770      	bx	lr

080004a2 <minimum_number_of_bytes_to_represent_value>:

uint8_t minimum_number_of_bytes_to_represent_value(uint64_t value)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b087      	sub	sp, #28
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t number_of_bytes = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	75fb      	strb	r3, [r7, #23]

    uint64_t copy_value = value;
 80004b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80004b4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Desloca o numero de 8 em 8 bits até alcançar 0 e assim saber o tamanho minimo de bytes que pode representar o valor
    while (copy_value != 0)
 80004b8:	e00e      	b.n	80004d8 <minimum_number_of_bytes_to_represent_value+0x36>
    {
    	copy_value >>= 8;
 80004ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80004be:	f04f 0200 	mov.w	r2, #0
 80004c2:	f04f 0300 	mov.w	r3, #0
 80004c6:	0a02      	lsrs	r2, r0, #8
 80004c8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80004cc:	0a0b      	lsrs	r3, r1, #8
 80004ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
        number_of_bytes++;
 80004d2:	7dfb      	ldrb	r3, [r7, #23]
 80004d4:	3301      	adds	r3, #1
 80004d6:	75fb      	strb	r3, [r7, #23]
    while (copy_value != 0)
 80004d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80004dc:	4313      	orrs	r3, r2
 80004de:	d1ec      	bne.n	80004ba <minimum_number_of_bytes_to_represent_value+0x18>
    }

    // Caso o valor seja 0, precisamos lidar com o fato que é necessario mandar pelo menos 1 bytes mostrando que o valor é 0 e não um pacote vazio
    if (number_of_bytes == 0)
 80004e0:	7dfb      	ldrb	r3, [r7, #23]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d101      	bne.n	80004ea <minimum_number_of_bytes_to_represent_value+0x48>
    {
    	number_of_bytes = 1;
 80004e6:	2301      	movs	r3, #1
 80004e8:	75fb      	strb	r3, [r7, #23]
    }

    return number_of_bytes;
 80004ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	371c      	adds	r7, #28
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <configure_message_header>:
    }
    return numBytes;
}

void configure_message_header(FDCAN_TxHeaderTypeDef *TxHeader, uint8_t id, uint8_t num_of_bytes)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	70fb      	strb	r3, [r7, #3]
 8000504:	4613      	mov	r3, r2
 8000506:	70bb      	strb	r3, [r7, #2]
	uint32_t dataLength_ST_notation = number_of_bytes_to_ST_notation(num_of_bytes);
 8000508:	78bb      	ldrb	r3, [r7, #2]
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f868 	bl	80005e0 <number_of_bytes_to_ST_notation>
 8000510:	60f8      	str	r0, [r7, #12]

	TxHeader->Identifier = id;
 8000512:	78fa      	ldrb	r2, [r7, #3]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	601a      	str	r2, [r3, #0]
	TxHeader->IdType = FDCAN_STANDARD_ID;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = dataLength_ST_notation;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	60da      	str	r2, [r3, #12]
	TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_FD_CAN;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800053c:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2200      	movs	r2, #0
 8000542:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	621a      	str	r2, [r3, #32]
}
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <array_of_uint8_to_uint64>:


// BEGIN Funções de Leitura

uint64_t array_of_uint8_to_uint64(uint8_t *bytes, uint8_t num_of_bytes)
{
 8000552:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	70f9      	strb	r1, [r7, #3]
    uint64_t total_value = 0;
 800055e:	f04f 0000 	mov.w	r0, #0
 8000562:	f04f 0100 	mov.w	r1, #0
 8000566:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint64_t copy_of_byte_to_uint64;

    for(int byte_index = 0; byte_index < num_of_bytes; byte_index++)
 800056a:	2100      	movs	r1, #0
 800056c:	6179      	str	r1, [r7, #20]
 800056e:	e029      	b.n	80005c4 <array_of_uint8_to_uint64+0x72>
    {
        // Quando não fazemos essa copia, o limite é de 4 bytes pois estoura o uint8_8, como descrito nesse post
        // https://stackoverflow.com/questions/4201301/warning-left-shift-count-width-of-type
    	copy_of_byte_to_uint64 = bytes[byte_index];
 8000570:	6979      	ldr	r1, [r7, #20]
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	4401      	add	r1, r0
 8000576:	7809      	ldrb	r1, [r1, #0]
 8000578:	b2c9      	uxtb	r1, r1
 800057a:	2000      	movs	r0, #0
 800057c:	468a      	mov	sl, r1
 800057e:	4683      	mov	fp, r0
 8000580:	e9c7 ab02 	strd	sl, fp, [r7, #8]

    	// Link para o entendimento https://learn.microsoft.com/en-us/cpp/cpp/left-shift-and-right-shift-operators-input-and-output?view=msvc-170
        total_value += ( copy_of_byte_to_uint64 << ((num_of_bytes - byte_index - 1) * 8));
 8000584:	78f8      	ldrb	r0, [r7, #3]
 8000586:	6979      	ldr	r1, [r7, #20]
 8000588:	1a41      	subs	r1, r0, r1
 800058a:	3901      	subs	r1, #1
 800058c:	00cc      	lsls	r4, r1, #3
 800058e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000592:	f1a4 0620 	sub.w	r6, r4, #32
 8000596:	f1c4 0520 	rsb	r5, r4, #32
 800059a:	fa01 f304 	lsl.w	r3, r1, r4
 800059e:	fa00 f606 	lsl.w	r6, r0, r6
 80005a2:	4333      	orrs	r3, r6
 80005a4:	fa20 f505 	lsr.w	r5, r0, r5
 80005a8:	432b      	orrs	r3, r5
 80005aa:	fa00 f204 	lsl.w	r2, r0, r4
 80005ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80005b2:	eb10 0802 	adds.w	r8, r0, r2
 80005b6:	eb41 0903 	adc.w	r9, r1, r3
 80005ba:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(int byte_index = 0; byte_index < num_of_bytes; byte_index++)
 80005be:	6979      	ldr	r1, [r7, #20]
 80005c0:	3101      	adds	r1, #1
 80005c2:	6179      	str	r1, [r7, #20]
 80005c4:	78f9      	ldrb	r1, [r7, #3]
 80005c6:	6978      	ldr	r0, [r7, #20]
 80005c8:	4288      	cmp	r0, r1
 80005ca:	dbd1      	blt.n	8000570 <array_of_uint8_to_uint64+0x1e>
    }

   return total_value;
 80005cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80005d0:	4610      	mov	r0, r2
 80005d2:	4619      	mov	r1, r3
 80005d4:	3720      	adds	r7, #32
 80005d6:	46bd      	mov	sp, r7
 80005d8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80005dc:	4770      	bx	lr
	...

080005e0 <number_of_bytes_to_ST_notation>:

// BEGIN Funções Auxiliares

// Caso o valor seja de 11 bytes, o retorno sera 0, isso devera ser consertado com o uso da FD_CAN, uma sugestão seria tratar o dado pra 11 virar 12, switch não suporta comparações no case
uint32_t number_of_bytes_to_ST_notation(uint8_t num_of_bytes)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	switch (num_of_bytes)
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b08      	cmp	r3, #8
 80005ee:	d82f      	bhi.n	8000650 <number_of_bytes_to_ST_notation+0x70>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <number_of_bytes_to_ST_notation+0x18>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	0800061d 	.word	0x0800061d
 80005fc:	08000621 	.word	0x08000621
 8000600:	08000627 	.word	0x08000627
 8000604:	0800062d 	.word	0x0800062d
 8000608:	08000633 	.word	0x08000633
 800060c:	08000639 	.word	0x08000639
 8000610:	0800063f 	.word	0x0800063f
 8000614:	08000645 	.word	0x08000645
 8000618:	0800064b 	.word	0x0800064b
	{
	case 0:
		return FDCAN_DLC_BYTES_0;
 800061c:	2300      	movs	r3, #0
 800061e:	e01a      	b.n	8000656 <number_of_bytes_to_ST_notation+0x76>
	case 1:
		return FDCAN_DLC_BYTES_1;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	e017      	b.n	8000656 <number_of_bytes_to_ST_notation+0x76>
	case 2:
		return FDCAN_DLC_BYTES_2;
 8000626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800062a:	e014      	b.n	8000656 <number_of_bytes_to_ST_notation+0x76>
	case 3:
		return FDCAN_DLC_BYTES_3;
 800062c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000630:	e011      	b.n	8000656 <number_of_bytes_to_ST_notation+0x76>
	case 4:
		return FDCAN_DLC_BYTES_4;
 8000632:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000636:	e00e      	b.n	8000656 <number_of_bytes_to_ST_notation+0x76>
	case 5:
		return FDCAN_DLC_BYTES_5;
 8000638:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800063c:	e00b      	b.n	8000656 <number_of_bytes_to_ST_notation+0x76>
	case 6:
		return FDCAN_DLC_BYTES_6;
 800063e:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8000642:	e008      	b.n	8000656 <number_of_bytes_to_ST_notation+0x76>
	case 7:
		return FDCAN_DLC_BYTES_7;
 8000644:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8000648:	e005      	b.n	8000656 <number_of_bytes_to_ST_notation+0x76>
	case 8:
		return FDCAN_DLC_BYTES_8;
 800064a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800064e:	e002      	b.n	8000656 <number_of_bytes_to_ST_notation+0x76>
	default:
		// Não é a melhor forma de se lidar com o erro de usar mais bytes do que a CAN suporta
		Error_Handler();
 8000650:	f000 fa5e 	bl	8000b10 <Error_Handler>
		return HAL_ERROR;
 8000654:	2301      	movs	r3, #1
	}
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop

08000660 <ST_notation_to_number_of_bytes>:

uint8_t ST_notation_to_number_of_bytes(uint32_t ST_notation)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	switch (ST_notation)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800066e:	d04b      	beq.n	8000708 <ST_notation_to_number_of_bytes+0xa8>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000676:	d849      	bhi.n	800070c <ST_notation_to_number_of_bytes+0xac>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800067e:	d041      	beq.n	8000704 <ST_notation_to_number_of_bytes+0xa4>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8000686:	d841      	bhi.n	800070c <ST_notation_to_number_of_bytes+0xac>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800068e:	d037      	beq.n	8000700 <ST_notation_to_number_of_bytes+0xa0>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000696:	d839      	bhi.n	800070c <ST_notation_to_number_of_bytes+0xac>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800069e:	d02d      	beq.n	80006fc <ST_notation_to_number_of_bytes+0x9c>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006a6:	d831      	bhi.n	800070c <ST_notation_to_number_of_bytes+0xac>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80006ae:	d023      	beq.n	80006f8 <ST_notation_to_number_of_bytes+0x98>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80006b6:	d829      	bhi.n	800070c <ST_notation_to_number_of_bytes+0xac>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80006be:	d019      	beq.n	80006f4 <ST_notation_to_number_of_bytes+0x94>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80006c6:	d821      	bhi.n	800070c <ST_notation_to_number_of_bytes+0xac>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006ce:	d00f      	beq.n	80006f0 <ST_notation_to_number_of_bytes+0x90>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006d6:	d819      	bhi.n	800070c <ST_notation_to_number_of_bytes+0xac>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d004      	beq.n	80006e8 <ST_notation_to_number_of_bytes+0x88>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006e4:	d002      	beq.n	80006ec <ST_notation_to_number_of_bytes+0x8c>
 80006e6:	e011      	b.n	800070c <ST_notation_to_number_of_bytes+0xac>
	{
	case FDCAN_DLC_BYTES_0:
		return 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	e012      	b.n	8000712 <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_1:
		return 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	e010      	b.n	8000712 <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_2:
		return 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	e00e      	b.n	8000712 <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_3:
		return 3;
 80006f4:	2303      	movs	r3, #3
 80006f6:	e00c      	b.n	8000712 <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_4:
		return 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	e00a      	b.n	8000712 <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_5:
		return 5;
 80006fc:	2305      	movs	r3, #5
 80006fe:	e008      	b.n	8000712 <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_6:
		return 6;
 8000700:	2306      	movs	r3, #6
 8000702:	e006      	b.n	8000712 <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_7:
		return 7;
 8000704:	2307      	movs	r3, #7
 8000706:	e004      	b.n	8000712 <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_8:
		return 8;
 8000708:	2308      	movs	r3, #8
 800070a:	e002      	b.n	8000712 <ST_notation_to_number_of_bytes+0xb2>
	default:
		// Não é a melhor forma de se lidar com o erro de usar mais bytes do que a CAN suporta
		Error_Handler();
 800070c:	f000 fa00 	bl	8000b10 <Error_Handler>
		return HAL_ERROR;
 8000710:	2301      	movs	r3, #1
	}
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <HAL_FDCAN_RxFifo0Callback>:

uint16_t receive[4];

// Ignorar, será uma das funções de leitura no futuro
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	2b00      	cmp	r3, #0
 800072e:	d02d      	beq.n	800078c <HAL_FDCAN_RxFifo0Callback+0x70>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8000734:	2140      	movs	r1, #64	; 0x40
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 ffd2 	bl	80016e0 <HAL_FDCAN_GetRxMessage>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000742:	f000 f9e5 	bl	8000b10 <Error_Handler>
    }
    else
    {

    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000746:	2200      	movs	r2, #0
 8000748:	2101      	movs	r1, #1
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f001 f936 	bl	80019bc <HAL_FDCAN_ActivateNotification>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000756:	f000 f9db 	bl	8000b10 <Error_Handler>
    }

    number_of_bytes_received = ST_notation_to_number_of_bytes(RxHeader.DataLength);
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff7e 	bl	8000660 <ST_notation_to_number_of_bytes>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_FDCAN_RxFifo0Callback+0x80>)
 800076a:	701a      	strb	r2, [r3, #0]

    uint64_to_array_of_uint16(receive, number_of_bytes_received/2, array_of_uint8_to_uint64(RxData, number_of_bytes_received));
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <HAL_FDCAN_RxFifo0Callback+0x80>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	085b      	lsrs	r3, r3, #1
 8000772:	b2dc      	uxtb	r4, r3
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_FDCAN_RxFifo0Callback+0x80>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800077c:	f7ff fee9 	bl	8000552 <array_of_uint8_to_uint64>
 8000780:	4602      	mov	r2, r0
 8000782:	460b      	mov	r3, r1
 8000784:	4621      	mov	r1, r4
 8000786:	4806      	ldr	r0, [pc, #24]	; (80007a0 <HAL_FDCAN_RxFifo0Callback+0x84>)
 8000788:	f7ff fe58 	bl	800043c <uint64_to_array_of_uint16>
  }
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	2400011c 	.word	0x2400011c
 8000798:	240000f4 	.word	0x240000f4
 800079c:	24000124 	.word	0x24000124
 80007a0:	24000128 	.word	0x24000128

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b0af      	sub	sp, #188	; 0xbc
 80007a8:	af28      	add	r7, sp, #160	; 0xa0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007aa:	f000 fb63 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ae:	f000 f85b 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 f955 	bl	8000a60 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80007b6:	f000 f8d7 	bl	8000968 <MX_FDCAN1_Init>
  MX_RNG_Init();
 80007ba:	f000 f93b 	bl	8000a34 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80007be:	4826      	ldr	r0, [pc, #152]	; (8000858 <main+0xb4>)
 80007c0:	f000 ff08 	bl	80015d4 <HAL_FDCAN_Start>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <main+0x2a>
  {
	  Error_Handler();
 80007ca:	f000 f9a1 	bl	8000b10 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80007ce:	2200      	movs	r2, #0
 80007d0:	2101      	movs	r1, #1
 80007d2:	4821      	ldr	r0, [pc, #132]	; (8000858 <main+0xb4>)
 80007d4:	f001 f8f2 	bl	80019bc <HAL_FDCAN_ActivateNotification>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <main+0x3e>
  {
    /* Notification Error */
    Error_Handler();
 80007de:	f000 f997 	bl	8000b10 <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    rngHandle.Instance = RNG;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <main+0xb8>)
 80007e4:	4a1e      	ldr	r2, [pc, #120]	; (8000860 <main+0xbc>)
 80007e6:	601a      	str	r2, [r3, #0]
	    HAL_RNG_Init(&rngHandle);
 80007e8:	481c      	ldr	r0, [pc, #112]	; (800085c <main+0xb8>)
 80007ea:	f004 fb85 	bl	8004ef8 <HAL_RNG_Init>
	    uint16_t lista[4];

	    uint64_t value;


	    uint16_t info1 = 1233;
 80007ee:	f240 43d1 	movw	r3, #1233	; 0x4d1
 80007f2:	82fb      	strh	r3, [r7, #22]
	    uint16_t info2 = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	82bb      	strh	r3, [r7, #20]
	    uint16_t info3 = 6634;
 80007f8:	f641 13ea 	movw	r3, #6634	; 0x19ea
 80007fc:	827b      	strh	r3, [r7, #18]
	    uint16_t info4 = 1000;
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	823b      	strh	r3, [r7, #16]

	    lista[0] = info1;
 8000804:	8afb      	ldrh	r3, [r7, #22]
 8000806:	803b      	strh	r3, [r7, #0]
	    lista[1] = info2;
 8000808:	8abb      	ldrh	r3, [r7, #20]
 800080a:	807b      	strh	r3, [r7, #2]
	    lista[2] = info3;
 800080c:	8a7b      	ldrh	r3, [r7, #18]
 800080e:	80bb      	strh	r3, [r7, #4]
	    lista[3] = info4;
 8000810:	8a3b      	ldrh	r3, [r7, #16]
 8000812:	80fb      	strh	r3, [r7, #6]


	    value = array_of_uint16_to_uint64(lista, 4);
 8000814:	463b      	mov	r3, r7
 8000816:	2104      	movs	r1, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fdc8 	bl	80003ae <array_of_uint16_to_uint64>
 800081e:	e9c7 0102 	strd	r0, r1, [r7, #8]




	   send_message_CAN_positive(hfdcan1, 12, value);
 8000822:	4c0d      	ldr	r4, [pc, #52]	; (8000858 <main+0xb4>)
 8000824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000828:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 800082c:	230c      	movs	r3, #12
 800082e:	9324      	str	r3, [sp, #144]	; 0x90
 8000830:	4668      	mov	r0, sp
 8000832:	f104 0310 	add.w	r3, r4, #16
 8000836:	2290      	movs	r2, #144	; 0x90
 8000838:	4619      	mov	r1, r3
 800083a:	f004 fbe3 	bl	8005004 <memcpy>
 800083e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000842:	f7ff fd49 	bl	80002d8 <send_message_CAN_positive>


	  // Luz usada só para saber que loop está acontecendo
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 8000846:	2140      	movs	r1, #64	; 0x40
 8000848:	4806      	ldr	r0, [pc, #24]	; (8000864 <main+0xc0>)
 800084a:	f002 f808 	bl	800285e <HAL_GPIO_TogglePin>


      HAL_Delay (250);
 800084e:	20fa      	movs	r0, #250	; 0xfa
 8000850:	f000 fba2 	bl	8000f98 <HAL_Delay>
  {
 8000854:	e7c5      	b.n	80007e2 <main+0x3e>
 8000856:	bf00      	nop
 8000858:	2400002c 	.word	0x2400002c
 800085c:	240000e0 	.word	0x240000e0
 8000860:	48021800 	.word	0x48021800
 8000864:	58020c00 	.word	0x58020c00

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b09c      	sub	sp, #112	; 0x70
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	224c      	movs	r2, #76	; 0x4c
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f004 fbd2 	bl	8005020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2220      	movs	r2, #32
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f004 fbcc 	bl	8005020 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000888:	2002      	movs	r0, #2
 800088a:	f002 f803 	bl	8002894 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b33      	ldr	r3, [pc, #204]	; (8000960 <SystemClock_Config+0xf8>)
 8000894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000896:	4a32      	ldr	r2, [pc, #200]	; (8000960 <SystemClock_Config+0xf8>)
 8000898:	f023 0301 	bic.w	r3, r3, #1
 800089c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800089e:	4b30      	ldr	r3, [pc, #192]	; (8000960 <SystemClock_Config+0xf8>)
 80008a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <SystemClock_Config+0xfc>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a2c      	ldr	r2, [pc, #176]	; (8000964 <SystemClock_Config+0xfc>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <SystemClock_Config+0xfc>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c4:	bf00      	nop
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <SystemClock_Config+0xfc>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008d2:	d1f8      	bne.n	80008c6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80008d4:	2322      	movs	r3, #34	; 0x22
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008d8:	2301      	movs	r3, #1
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008e0:	2301      	movs	r3, #1
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e8:	2300      	movs	r3, #0
 80008ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80008f0:	2309      	movs	r3, #9
 80008f2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 19;
 80008f8:	2313      	movs	r3, #19
 80008fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000900:	230c      	movs	r3, #12
 8000902:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000904:	2302      	movs	r3, #2
 8000906:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fff8 	bl	8002908 <HAL_RCC_OscConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800091e:	f000 f8f7 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	233f      	movs	r3, #63	; 0x3f
 8000924:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2101      	movs	r1, #1
 8000946:	4618      	mov	r0, r3
 8000948:	f002 fc38 	bl	80031bc <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000952:	f000 f8dd 	bl	8000b10 <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3770      	adds	r7, #112	; 0x70
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	58000400 	.word	0x58000400
 8000964:	58024800 	.word	0x58024800

08000968 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800096c:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 800096e:	4a30      	ldr	r2, [pc, #192]	; (8000a30 <MX_FDCAN1_Init+0xc8>)
 8000970:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000972:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 8000974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000978:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 800097a:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 800097c:	2204      	movs	r2, #4
 800097e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000980:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 8000982:	2201      	movs	r2, #1
 8000984:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000986:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 8000988:	2200      	movs	r2, #0
 800098a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800098c:	4b27      	ldr	r3, [pc, #156]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 800098e:	2200      	movs	r2, #0
 8000990:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 8000994:	2201      	movs	r2, #1
 8000996:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 800099a:	2202      	movs	r2, #2
 800099c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009a0:	220d      	movs	r2, #13
 80009a2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009b2:	2202      	movs	r2, #2
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009b8:	220d      	movs	r2, #13
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009be:	2202      	movs	r2, #2
 80009c0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009d6:	2220      	movs	r2, #32
 80009d8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009dc:	2204      	movs	r2, #4
 80009de:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009e2:	2220      	movs	r2, #32
 80009e4:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009ee:	2220      	movs	r2, #32
 80009f0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009f4:	2204      	movs	r2, #4
 80009f6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 80009fa:	2220      	movs	r2, #32
 80009fc:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 8000a00:	2220      	movs	r2, #32
 8000a02:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 8000a06:	2220      	movs	r2, #32
 8000a08:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 8000a12:	2204      	movs	r2, #4
 8000a14:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_FDCAN1_Init+0xc4>)
 8000a18:	f000 fbfe 	bl	8001218 <HAL_FDCAN_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000a22:	f000 f875 	bl	8000b10 <Error_Handler>
     //Error_Handler();
  // }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2400002c 	.word	0x2400002c
 8000a30:	4000a000 	.word	0x4000a000

08000a34 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_RNG_Init+0x24>)
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <MX_RNG_Init+0x28>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_RNG_Init+0x24>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_RNG_Init+0x24>)
 8000a46:	f004 fa57 	bl	8004ef8 <HAL_RNG_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000a50:	f000 f85e 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	240000cc 	.word	0x240000cc
 8000a5c:	48021800 	.word	0x48021800

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a86:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2120      	movs	r1, #32
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_GPIO_Init+0xac>)
 8000ad6:	f001 fea9 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2140      	movs	r1, #64	; 0x40
 8000ade:	480b      	ldr	r0, [pc, #44]	; (8000b0c <MX_GPIO_Init+0xac>)
 8000ae0:	f001 fea4 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ae4:	2360      	movs	r3, #96	; 0x60
 8000ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_GPIO_Init+0xac>)
 8000afc:	f001 fce6 	bl	80024cc <HAL_GPIO_Init>

}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	58024400 	.word	0x58024400
 8000b0c:	58020c00 	.word	0x58020c00

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_MspInit+0x30>)
 8000b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b28:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x30>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x30>)
 8000b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	58024400 	.word	0x58024400

08000b50 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0ba      	sub	sp, #232	; 0xe8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	22c0      	movs	r2, #192	; 0xc0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 fa55 	bl	8005020 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a2b      	ldr	r2, [pc, #172]	; (8000c28 <HAL_FDCAN_MspInit+0xd8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d14f      	bne.n	8000c20 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000b8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f002 fe3f 	bl	800381c <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000ba4:	f7ff ffb4 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ba8:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <HAL_FDCAN_MspInit+0xdc>)
 8000baa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000bae:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <HAL_FDCAN_MspInit+0xdc>)
 8000bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <HAL_FDCAN_MspInit+0xdc>)
 8000bba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_FDCAN_MspInit+0xdc>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_FDCAN_MspInit+0xdc>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_FDCAN_MspInit+0xdc>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000be4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000bfe:	2309      	movs	r3, #9
 8000c00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4809      	ldr	r0, [pc, #36]	; (8000c30 <HAL_FDCAN_MspInit+0xe0>)
 8000c0c:	f001 fc5e 	bl	80024cc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	2013      	movs	r0, #19
 8000c16:	f000 faca 	bl	80011ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c1a:	2013      	movs	r0, #19
 8000c1c:	f000 fae1 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	37e8      	adds	r7, #232	; 0xe8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	4000a000 	.word	0x4000a000
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	58020400 	.word	0x58020400

08000c34 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0b4      	sub	sp, #208	; 0xd0
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	22c0      	movs	r2, #192	; 0xc0
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f004 f9eb 	bl	8005020 <memset>
  if(hrng->Instance==RNG)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_RNG_MspInit+0x6c>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d121      	bne.n	8000c98 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000c54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 fdd6 	bl	800381c <HAL_RCCEx_PeriphCLKConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8000c76:	f7ff ff4b 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_RNG_MspInit+0x70>)
 8000c7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000c80:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_RNG_MspInit+0x70>)
 8000c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c86:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_RNG_MspInit+0x70>)
 8000c8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000c98:	bf00      	nop
 8000c9a:	37d0      	adds	r7, #208	; 0xd0
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	48021800 	.word	0x48021800
 8000ca4:	58024400 	.word	0x58024400

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 f930 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <FDCAN1_IT0_IRQHandler+0x10>)
 8000d02:	f000 fed5 	bl	8001ab0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2400002c 	.word	0x2400002c

08000d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d14:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <SystemInit+0xe4>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a36      	ldr	r2, [pc, #216]	; (8000df4 <SystemInit+0xe4>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d24:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <SystemInit+0xe8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 030f 	and.w	r3, r3, #15
 8000d2c:	2b06      	cmp	r3, #6
 8000d2e:	d807      	bhi.n	8000d40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d30:	4b31      	ldr	r3, [pc, #196]	; (8000df8 <SystemInit+0xe8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f023 030f 	bic.w	r3, r3, #15
 8000d38:	4a2f      	ldr	r2, [pc, #188]	; (8000df8 <SystemInit+0xe8>)
 8000d3a:	f043 0307 	orr.w	r3, r3, #7
 8000d3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d40:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <SystemInit+0xec>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a2d      	ldr	r2, [pc, #180]	; (8000dfc <SystemInit+0xec>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <SystemInit+0xec>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <SystemInit+0xec>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4929      	ldr	r1, [pc, #164]	; (8000dfc <SystemInit+0xec>)
 8000d58:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <SystemInit+0xf0>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d5e:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <SystemInit+0xe8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d007      	beq.n	8000d7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <SystemInit+0xe8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f023 030f 	bic.w	r3, r3, #15
 8000d72:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <SystemInit+0xe8>)
 8000d74:	f043 0307 	orr.w	r3, r3, #7
 8000d78:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <SystemInit+0xec>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d80:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <SystemInit+0xec>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <SystemInit+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <SystemInit+0xec>)
 8000d8e:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <SystemInit+0xf4>)
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <SystemInit+0xec>)
 8000d94:	4a1c      	ldr	r2, [pc, #112]	; (8000e08 <SystemInit+0xf8>)
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <SystemInit+0xec>)
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <SystemInit+0xfc>)
 8000d9c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <SystemInit+0xec>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <SystemInit+0xec>)
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <SystemInit+0xfc>)
 8000da8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <SystemInit+0xec>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <SystemInit+0xec>)
 8000db2:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <SystemInit+0xfc>)
 8000db4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <SystemInit+0xec>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <SystemInit+0xec>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <SystemInit+0xec>)
 8000dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <SystemInit+0xec>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <SystemInit+0x100>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <SystemInit+0x104>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dda:	d202      	bcs.n	8000de2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <SystemInit+0x108>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <SystemInit+0x10c>)
 8000de4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000de8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00
 8000df8:	52002000 	.word	0x52002000
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e04:	02020200 	.word	0x02020200
 8000e08:	01ff0000 	.word	0x01ff0000
 8000e0c:	01010280 	.word	0x01010280
 8000e10:	5c001000 	.word	0x5c001000
 8000e14:	ffff0000 	.word	0xffff0000
 8000e18:	51008108 	.word	0x51008108
 8000e1c:	52004000 	.word	0x52004000

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e24:	f7ff ff74 	bl	8000d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	; (8000e6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f004 f8b5 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff fca7 	bl	80007a4 <main>
  bx  lr
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e60:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e64:	080050bc 	.word	0x080050bc
  ldr r2, =_sbss
 8000e68:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e6c:	24000134 	.word	0x24000134

08000e70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC3_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7a:	2003      	movs	r0, #3
 8000e7c:	f000 f98c 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e80:	f002 fb52 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 8000e84:	4602      	mov	r2, r0
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_Init+0x68>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	f003 030f 	and.w	r3, r3, #15
 8000e90:	4913      	ldr	r1, [pc, #76]	; (8000ee0 <HAL_Init+0x6c>)
 8000e92:	5ccb      	ldrb	r3, [r1, r3]
 8000e94:	f003 031f 	and.w	r3, r3, #31
 8000e98:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_Init+0x68>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_Init+0x6c>)
 8000ea8:	5cd3      	ldrb	r3, [r2, r3]
 8000eaa:	f003 031f 	and.w	r3, r3, #31
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_Init+0x70>)
 8000eb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <HAL_Init+0x74>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	f000 f814 	bl	8000eec <HAL_InitTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e002      	b.n	8000ed4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ece:	f7ff fe25 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	08005094 	.word	0x08005094
 8000ee4:	24000004 	.word	0x24000004
 8000ee8:	24000000 	.word	0x24000000

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_InitTick+0x60>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e021      	b.n	8000f44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_InitTick+0x64>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_InitTick+0x60>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f971 	bl	80011fe <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00e      	b.n	8000f44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d80a      	bhi.n	8000f42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f000 f93b 	bl	80011ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <HAL_InitTick+0x68>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2400000c 	.word	0x2400000c
 8000f50:	24000000 	.word	0x24000000
 8000f54:	24000008 	.word	0x24000008

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	2400000c 	.word	0x2400000c
 8000f7c:	24000130 	.word	0x24000130

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	24000130 	.word	0x24000130

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff ffee 	bl	8000f80 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d005      	beq.n	8000fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_Delay+0x44>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fbe:	bf00      	nop
 8000fc0:	f7ff ffde 	bl	8000f80 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f7      	bhi.n	8000fc0 <HAL_Delay+0x28>
  {
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2400000c 	.word	0x2400000c

08000fe0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_GetREVID+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	0c1b      	lsrs	r3, r3, #16
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	5c001000 	.word	0x5c001000

08000ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <__NVIC_SetPriorityGrouping+0x40>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	4313      	orrs	r3, r2
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x40>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00
 800103c:	05fa0000 	.word	0x05fa0000

08001040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <__NVIC_GetPriorityGrouping+0x18>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	f003 0307 	and.w	r3, r3, #7
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106a:	2b00      	cmp	r3, #0
 800106c:	db0b      	blt.n	8001086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	f003 021f 	and.w	r2, r3, #31
 8001074:	4907      	ldr	r1, [pc, #28]	; (8001094 <__NVIC_EnableIRQ+0x38>)
 8001076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800107a:	095b      	lsrs	r3, r3, #5
 800107c:	2001      	movs	r0, #1
 800107e:	fa00 f202 	lsl.w	r2, r0, r2
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000e100 	.word	0xe000e100

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	; (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	; 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f7ff ff8e 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff29 	bl	8000ff8 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff40 	bl	8001040 <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff90 	bl	80010ec <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5f 	bl	8001098 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff33 	bl	800105c <__NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffa4 	bl	8001154 <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b098      	sub	sp, #96	; 0x60
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001220:	4a84      	ldr	r2, [pc, #528]	; (8001434 <HAL_FDCAN_Init+0x21c>)
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4611      	mov	r1, r2
 8001228:	224c      	movs	r2, #76	; 0x4c
 800122a:	4618      	mov	r0, r3
 800122c:	f003 feea 	bl	8005004 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e1c6      	b.n	80015c8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a7e      	ldr	r2, [pc, #504]	; (8001438 <HAL_FDCAN_Init+0x220>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d106      	bne.n	8001252 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800124c:	461a      	mov	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d106      	bne.n	800126c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fc72 	bl	8000b50 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699a      	ldr	r2, [r3, #24]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0210 	bic.w	r2, r2, #16
 800127a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800127c:	f7ff fe80 	bl	8000f80 <HAL_GetTick>
 8001280:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001282:	e014      	b.n	80012ae <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001284:	f7ff fe7c 	bl	8000f80 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b0a      	cmp	r3, #10
 8001290:	d90d      	bls.n	80012ae <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2203      	movs	r2, #3
 80012a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e18c      	b.n	80015c8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d0e3      	beq.n	8001284 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	699a      	ldr	r2, [r3, #24]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0201 	orr.w	r2, r2, #1
 80012ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012cc:	f7ff fe58 	bl	8000f80 <HAL_GetTick>
 80012d0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80012d2:	e014      	b.n	80012fe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80012d4:	f7ff fe54 	bl	8000f80 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b0a      	cmp	r3, #10
 80012e0:	d90d      	bls.n	80012fe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012e8:	f043 0201 	orr.w	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2203      	movs	r2, #3
 80012f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e164      	b.n	80015c8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0e3      	beq.n	80012d4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0202 	orr.w	r2, r2, #2
 800131a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7c1b      	ldrb	r3, [r3, #16]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d108      	bne.n	8001336 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	699a      	ldr	r2, [r3, #24]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001332:	619a      	str	r2, [r3, #24]
 8001334:	e007      	b.n	8001346 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699a      	ldr	r2, [r3, #24]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001344:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7c5b      	ldrb	r3, [r3, #17]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d108      	bne.n	8001360 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	699a      	ldr	r2, [r3, #24]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800135c:	619a      	str	r2, [r3, #24]
 800135e:	e007      	b.n	8001370 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	699a      	ldr	r2, [r3, #24]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800136e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7c9b      	ldrb	r3, [r3, #18]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d108      	bne.n	800138a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	699a      	ldr	r2, [r3, #24]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001386:	619a      	str	r2, [r3, #24]
 8001388:	e007      	b.n	800139a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001398:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	699a      	ldr	r2, [r3, #24]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80013be:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0210 	bic.w	r2, r2, #16
 80013ce:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d108      	bne.n	80013ea <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699a      	ldr	r2, [r3, #24]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0204 	orr.w	r2, r2, #4
 80013e6:	619a      	str	r2, [r3, #24]
 80013e8:	e030      	b.n	800144c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d02c      	beq.n	800144c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d020      	beq.n	800143c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	699a      	ldr	r2, [r3, #24]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001408:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0210 	orr.w	r2, r2, #16
 8001418:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d114      	bne.n	800144c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699a      	ldr	r2, [r3, #24]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0220 	orr.w	r2, r2, #32
 8001430:	619a      	str	r2, [r3, #24]
 8001432:	e00b      	b.n	800144c <HAL_FDCAN_Init+0x234>
 8001434:	08005048 	.word	0x08005048
 8001438:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	699a      	ldr	r2, [r3, #24]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 0220 	orr.w	r2, r2, #32
 800144a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	3b01      	subs	r3, #1
 8001452:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	3b01      	subs	r3, #1
 800145a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800145c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001464:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	3b01      	subs	r3, #1
 800146e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001474:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001476:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001480:	d115      	bne.n	80014ae <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	3b01      	subs	r3, #1
 800148e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001490:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	3b01      	subs	r3, #1
 8001498:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800149a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	3b01      	subs	r3, #1
 80014a4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80014aa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80014ac:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00a      	beq.n	80014cc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d4:	4413      	add	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d011      	beq.n	80014fe <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80014e2:	f023 0107 	bic.w	r1, r3, #7
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	3360      	adds	r3, #96	; 0x60
 80014ee:	443b      	add	r3, r7
 80014f0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	2b00      	cmp	r3, #0
 8001504:	d011      	beq.n	800152a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800150e:	f023 0107 	bic.w	r1, r3, #7
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	3360      	adds	r3, #96	; 0x60
 800151a:	443b      	add	r3, r7
 800151c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152e:	2b00      	cmp	r3, #0
 8001530:	d012      	beq.n	8001558 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800153a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	3360      	adds	r3, #96	; 0x60
 8001546:	443b      	add	r3, r7
 8001548:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800154c:	011a      	lsls	r2, r3, #4
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800155c:	2b00      	cmp	r3, #0
 800155e:	d012      	beq.n	8001586 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001568:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	3360      	adds	r3, #96	; 0x60
 8001574:	443b      	add	r3, r7
 8001576:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800157a:	021a      	lsls	r2, r3, #8
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <HAL_FDCAN_Init+0x3b8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d107      	bne.n	80015a0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f022 0203 	bic.w	r2, r2, #3
 800159e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 fd83 	bl	80020c4 <FDCAN_CalcultateRamBlockAddresses>
 80015be:	4603      	mov	r3, r0
 80015c0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80015c4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3760      	adds	r7, #96	; 0x60
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	4000a000 	.word	0x4000a000

080015d4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d111      	bne.n	800160c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2202      	movs	r2, #2
 80015ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	e008      	b.n	800161e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001612:	f043 0204 	orr.w	r2, r3, #4
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
  }
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d141      	bne.n	80016c6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800164a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001658:	f043 0220 	orr.w	r2, r3, #32
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e038      	b.n	80016d8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800166e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d009      	beq.n	800168a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800167c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e026      	b.n	80016d8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001692:	0c1b      	lsrs	r3, r3, #16
 8001694:	f003 031f 	and.w	r3, r3, #31
 8001698:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 fe95 	bl	80023d0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2101      	movs	r1, #1
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	fa01 f202 	lsl.w	r2, r1, r2
 80016b2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80016b6:	2201      	movs	r2, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e008      	b.n	80016d8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016cc:	f043 0208 	orr.w	r2, r3, #8
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
  }
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b08b      	sub	sp, #44	; 0x2c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80016f8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80016fa:	7efb      	ldrb	r3, [r7, #27]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	f040 814b 	bne.w	8001998 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	2b40      	cmp	r3, #64	; 0x40
 8001706:	d14d      	bne.n	80017a4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001710:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d109      	bne.n	800172c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800171e:	f043 0220 	orr.w	r2, r3, #32
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e13e      	b.n	80019aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001738:	2b00      	cmp	r3, #0
 800173a:	d109      	bne.n	8001750 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e12c      	b.n	80019aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001758:	0e1b      	lsrs	r3, r3, #24
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b01      	cmp	r3, #1
 8001760:	d10b      	bne.n	800177a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800176a:	0fdb      	lsrs	r3, r3, #31
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001774:	d101      	bne.n	800177a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001776:	2301      	movs	r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	69f9      	ldr	r1, [r7, #28]
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	e069      	b.n	8001878 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b41      	cmp	r3, #65	; 0x41
 80017a8:	d14d      	bne.n	8001846 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80017b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017c0:	f043 0220 	orr.w	r2, r3, #32
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0ed      	b.n	80019aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80017d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0db      	b.n	80019aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80017fa:	0e1b      	lsrs	r3, r3, #24
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d10b      	bne.n	800181c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800180c:	0fdb      	lsrs	r3, r3, #31
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001816:	d101      	bne.n	800181c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001818:	2301      	movs	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	4413      	add	r3, r2
 800182e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001838:	69f9      	ldr	r1, [r7, #28]
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	e018      	b.n	8001878 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	429a      	cmp	r2, r3
 800184e:	d309      	bcc.n	8001864 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001856:	f043 0220 	orr.w	r2, r3, #32
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0a2      	b.n	80019aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d107      	bne.n	800189c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0c9b      	lsrs	r3, r3, #18
 8001892:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e005      	b.n	80018a8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	3304      	adds	r3, #4
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0e1b      	lsrs	r3, r3, #24
 80018fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	0fda      	lsrs	r2, r3, #31
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	3304      	adds	r3, #4
 8001910:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
 800191a:	e00a      	b.n	8001932 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	441a      	add	r2, r3
 8001922:	6839      	ldr	r1, [r7, #0]
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	440b      	add	r3, r1
 8001928:	7812      	ldrb	r2, [r2, #0]
 800192a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	3301      	adds	r3, #1
 8001930:	623b      	str	r3, [r7, #32]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800193a:	5cd3      	ldrb	r3, [r2, r3]
 800193c:	461a      	mov	r2, r3
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	4293      	cmp	r3, r2
 8001942:	d3eb      	bcc.n	800191c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b40      	cmp	r3, #64	; 0x40
 8001948:	d105      	bne.n	8001956 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001954:	e01e      	b.n	8001994 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b41      	cmp	r3, #65	; 0x41
 800195a:	d105      	bne.n	8001968 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001966:	e015      	b.n	8001994 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b1f      	cmp	r3, #31
 800196c:	d808      	bhi.n	8001980 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2101      	movs	r1, #1
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	fa01 f202 	lsl.w	r2, r1, r2
 800197a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800197e:	e009      	b.n	8001994 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	f003 021f 	and.w	r2, r3, #31
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2101      	movs	r1, #1
 800198c:	fa01 f202 	lsl.w	r2, r1, r2
 8001990:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	e008      	b.n	80019aa <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800199e:	f043 0208 	orr.w	r2, r3, #8
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
  }
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	372c      	adds	r7, #44	; 0x2c
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	080050a4 	.word	0x080050a4

080019bc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80019ce:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d002      	beq.n	80019dc <HAL_FDCAN_ActivateNotification+0x20>
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d155      	bne.n	8001a88 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d108      	bne.n	80019fc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0201 	orr.w	r2, r2, #1
 80019f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80019fa:	e014      	b.n	8001a26 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4013      	ands	r3, r2
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d108      	bne.n	8001a1e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0202 	orr.w	r2, r2, #2
 8001a1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a1c:	e003      	b.n	8001a26 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2203      	movs	r2, #3
 8001a24:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d009      	beq.n	8001a44 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_FDCAN_ActivateNotification+0xec>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	430b      	orrs	r3, r1
 8001a74:	6553      	str	r3, [r2, #84]	; 0x54
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_FDCAN_ActivateNotification+0xf0>)
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	0f9b      	lsrs	r3, r3, #30
 8001a7e:	490b      	ldr	r1, [pc, #44]	; (8001aac <HAL_FDCAN_ActivateNotification+0xf0>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e008      	b.n	8001a9a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a8e:	f043 0202 	orr.w	r2, r3, #2
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
  }
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	3fcfffff 	.word	0x3fcfffff
 8001aac:	4000a800 	.word	0x4000a800

08001ab0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b096      	sub	sp, #88	; 0x58
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001ab8:	4b9a      	ldr	r3, [pc, #616]	; (8001d24 <HAL_FDCAN_IRQHandler+0x274>)
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	079b      	lsls	r3, r3, #30
 8001abe:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001ac0:	4b98      	ldr	r3, [pc, #608]	; (8001d24 <HAL_FDCAN_IRQHandler+0x274>)
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	079b      	lsls	r3, r3, #30
 8001ac6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ac8:	4013      	ands	r3, r2
 8001aca:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001ad6:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001af8:	4013      	ands	r3, r2
 8001afa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b10:	4013      	ands	r3, r2
 8001b12:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001b1e:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b28:	4013      	ands	r3, r2
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b32:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001b36:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b40:	4013      	ands	r3, r2
 8001b42:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d010      	beq.n	8001b82 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00a      	beq.n	8001b82 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b74:	651a      	str	r2, [r3, #80]	; 0x50
 8001b76:	4b6b      	ldr	r3, [pc, #428]	; (8001d24 <HAL_FDCAN_IRQHandler+0x274>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 fa54 	bl	800202a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b84:	0a9b      	lsrs	r3, r3, #10
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01d      	beq.n	8001bca <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b90:	0a9b      	lsrs	r3, r3, #10
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d017      	beq.n	8001bca <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bae:	4013      	ands	r3, r2
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bba:	651a      	str	r2, [r3, #80]	; 0x50
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <HAL_FDCAN_IRQHandler+0x274>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001bc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fa07 	bl	8001fd8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00d      	beq.n	8001bec <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bd6:	4b54      	ldr	r3, [pc, #336]	; (8001d28 <HAL_FDCAN_IRQHandler+0x278>)
 8001bd8:	400b      	ands	r3, r1
 8001bda:	6513      	str	r3, [r2, #80]	; 0x50
 8001bdc:	4a51      	ldr	r2, [pc, #324]	; (8001d24 <HAL_FDCAN_IRQHandler+0x274>)
 8001bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be0:	0f9b      	lsrs	r3, r3, #30
 8001be2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001be4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f9c0 	bl	8001f6c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00d      	beq.n	8001c0e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001bf8:	4b4b      	ldr	r3, [pc, #300]	; (8001d28 <HAL_FDCAN_IRQHandler+0x278>)
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	6513      	str	r3, [r2, #80]	; 0x50
 8001bfe:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <HAL_FDCAN_IRQHandler+0x274>)
 8001c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c02:	0f9b      	lsrs	r3, r3, #30
 8001c04:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001c06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f9ba 	bl	8001f82 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00d      	beq.n	8001c30 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c1a:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <HAL_FDCAN_IRQHandler+0x278>)
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	6513      	str	r3, [r2, #80]	; 0x50
 8001c20:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <HAL_FDCAN_IRQHandler+0x274>)
 8001c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c24:	0f9b      	lsrs	r3, r3, #30
 8001c26:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001c28:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fd76 	bl	800071c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00d      	beq.n	8001c52 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001c3c:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <HAL_FDCAN_IRQHandler+0x278>)
 8001c3e:	400b      	ands	r3, r1
 8001c40:	6513      	str	r3, [r2, #80]	; 0x50
 8001c42:	4a38      	ldr	r2, [pc, #224]	; (8001d24 <HAL_FDCAN_IRQHandler+0x274>)
 8001c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c46:	0f9b      	lsrs	r3, r3, #30
 8001c48:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001c4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f9a3 	bl	8001f98 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c54:	0adb      	lsrs	r3, r3, #11
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d010      	beq.n	8001c80 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c60:	0adb      	lsrs	r3, r3, #11
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00a      	beq.n	8001c80 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c72:	651a      	str	r2, [r3, #80]	; 0x50
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <HAL_FDCAN_IRQHandler+0x274>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f997 	bl	8001fae <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8001c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c82:	0a5b      	lsrs	r3, r3, #9
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01d      	beq.n	8001cc8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8e:	0a5b      	lsrs	r3, r3, #9
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d017      	beq.n	8001cc8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cac:	4013      	ands	r3, r2
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb8:	651a      	str	r2, [r3, #80]	; 0x50
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_FDCAN_IRQHandler+0x274>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001cc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f97d 	bl	8001fc2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cca:	0cdb      	lsrs	r3, r3, #19
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d010      	beq.n	8001cf6 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd6:	0cdb      	lsrs	r3, r3, #19
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ce8:	651a      	str	r2, [r3, #80]	; 0x50
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_FDCAN_IRQHandler+0x274>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f97c 	bl	8001fee <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf8:	0c1b      	lsrs	r3, r3, #16
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d016      	beq.n	8001d30 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d04:	0c1b      	lsrs	r3, r3, #16
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d010      	beq.n	8001d30 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d16:	651a      	str	r2, [r3, #80]	; 0x50
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <HAL_FDCAN_IRQHandler+0x274>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	e004      	b.n	8001d2c <HAL_FDCAN_IRQHandler+0x27c>
 8001d22:	bf00      	nop
 8001d24:	4000a800 	.word	0x4000a800
 8001d28:	3fcfffff 	.word	0x3fcfffff
 8001d2c:	f000 f969 	bl	8002002 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d32:	0c9b      	lsrs	r3, r3, #18
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d010      	beq.n	8001d5e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d3e:	0c9b      	lsrs	r3, r3, #18
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00a      	beq.n	8001d5e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d50:	651a      	str	r2, [r3, #80]	; 0x50
 8001d52:	4b83      	ldr	r3, [pc, #524]	; (8001f60 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f95c 	bl	8002016 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d60:	0c5b      	lsrs	r3, r3, #17
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d015      	beq.n	8001d96 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6c:	0c5b      	lsrs	r3, r3, #17
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00f      	beq.n	8001d96 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d7e:	651a      	str	r2, [r3, #80]	; 0x50
 8001d80:	4b77      	ldr	r3, [pc, #476]	; (8001f60 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00d      	beq.n	8001db8 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001da2:	4b70      	ldr	r3, [pc, #448]	; (8001f64 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001da4:	400b      	ands	r3, r1
 8001da6:	6513      	str	r3, [r2, #80]	; 0x50
 8001da8:	4a6d      	ldr	r2, [pc, #436]	; (8001f60 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dac:	0f9b      	lsrs	r3, r3, #30
 8001dae:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001db0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f94d 	bl	8002052 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d011      	beq.n	8001de2 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001dc4:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001dc6:	400b      	ands	r3, r1
 8001dc8:	6513      	str	r3, [r2, #80]	; 0x50
 8001dca:	4a65      	ldr	r2, [pc, #404]	; (8001f60 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dce:	0f9b      	lsrs	r3, r3, #30
 8001dd0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a60      	ldr	r2, [pc, #384]	; (8001f68 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	f040 80ac 	bne.w	8001f46 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80a4 	beq.w	8001f46 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e12:	4013      	ands	r3, r2
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	4013      	ands	r3, r2
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001e50:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	6a3a      	ldr	r2, [r7, #32]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001e68:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e92:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001e94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8e6 	bl	8002068 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ea8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8e6 	bl	800207e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	099b      	lsrs	r3, r3, #6
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d01a      	beq.n	8001ef4 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d014      	beq.n	8001ef4 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee0:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2240      	movs	r2, #64	; 0x40
 8001ee8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	6939      	ldr	r1, [r7, #16]
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8d0 	bl	8002094 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8d1 	bl	80020ac <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00b      	beq.n	8001f28 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f874 	bl	800203e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001f56:	bf00      	nop
 8001f58:	3758      	adds	r7, #88	; 0x58
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	4000a800 	.word	0x4000a800
 8001f64:	3fcfffff 	.word	0x3fcfffff
 8001f68:	4000a000 	.word	0x4000a000

08001f6c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020da:	4ba7      	ldr	r3, [pc, #668]	; (8002378 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80020dc:	4013      	ands	r3, r2
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	0091      	lsls	r1, r2, #2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	430b      	orrs	r3, r1
 80020e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	4413      	add	r3, r2
 8002110:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800211a:	4b97      	ldr	r3, [pc, #604]	; (8002378 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800211c:	4013      	ands	r3, r2
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	0091      	lsls	r1, r2, #2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	430b      	orrs	r3, r1
 8002128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002134:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	041a      	lsls	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	4413      	add	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800215c:	4b86      	ldr	r3, [pc, #536]	; (8002378 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800215e:	4013      	ands	r3, r2
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	0091      	lsls	r1, r2, #2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	430b      	orrs	r3, r1
 800216a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002176:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	041a      	lsls	r2, r3, #16
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	4413      	add	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021a4:	4b74      	ldr	r3, [pc, #464]	; (8002378 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	0091      	lsls	r1, r2, #2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	430b      	orrs	r3, r1
 80021b2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80021be:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c6:	041a      	lsls	r2, r3, #16
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4413      	add	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80021ec:	4b62      	ldr	r3, [pc, #392]	; (8002378 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	0091      	lsls	r1, r2, #2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	4413      	add	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002218:	4b57      	ldr	r3, [pc, #348]	; (8002378 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800221a:	4013      	ands	r3, r2
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	0091      	lsls	r1, r2, #2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	430b      	orrs	r3, r1
 8002226:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002232:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	041a      	lsls	r2, r3, #16
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	4413      	add	r3, r2
 8002250:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800225a:	4b47      	ldr	r3, [pc, #284]	; (8002378 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800225c:	4013      	ands	r3, r2
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	0091      	lsls	r1, r2, #2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	430b      	orrs	r3, r1
 8002268:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002274:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	041a      	lsls	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002290:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002298:	061a      	lsls	r2, r3, #24
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a8:	4b34      	ldr	r3, [pc, #208]	; (800237c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80022aa:	4413      	add	r3, r2
 80022ac:	009a      	lsls	r2, r3, #2
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	441a      	add	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	441a      	add	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80022de:	fb01 f303 	mul.w	r3, r1, r3
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	441a      	add	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	441a      	add	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	441a      	add	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	441a      	add	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	441a      	add	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	441a      	add	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	4a04      	ldr	r2, [pc, #16]	; (8002380 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d915      	bls.n	80023a0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002374:	e006      	b.n	8002384 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002376:	bf00      	nop
 8002378:	ffff0003 	.word	0xffff0003
 800237c:	10002b00 	.word	0x10002b00
 8002380:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800238a:	f043 0220 	orr.w	r2, r3, #32
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2203      	movs	r2, #3
 8002398:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e010      	b.n	80023c2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e005      	b.n	80023b4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3304      	adds	r3, #4
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3f3      	bcc.n	80023a8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop

080023d0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	; 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10a      	bne.n	80023fc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80023ee:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	e00a      	b.n	8002412 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002404:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800240a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800240c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002410:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800241c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002422:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002428:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800243c:	6839      	ldr	r1, [r7, #0]
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	3304      	adds	r3, #4
 8002452:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	3304      	adds	r3, #4
 800245e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e020      	b.n	80024a8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	3303      	adds	r3, #3
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3302      	adds	r3, #2
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	440b      	add	r3, r1
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800247e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3301      	adds	r3, #1
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	440b      	add	r3, r1
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800248c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	440a      	add	r2, r1
 8002494:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002496:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	3304      	adds	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3304      	adds	r3, #4
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <FDCAN_CopyMessageToRAM+0xf8>)
 80024b0:	5cd3      	ldrb	r3, [r2, r3]
 80024b2:	461a      	mov	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d3d5      	bcc.n	8002466 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80024ba:	bf00      	nop
 80024bc:	bf00      	nop
 80024be:	3724      	adds	r7, #36	; 0x24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	080050a4 	.word	0x080050a4

080024cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024da:	4b89      	ldr	r3, [pc, #548]	; (8002700 <HAL_GPIO_Init+0x234>)
 80024dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024de:	e194      	b.n	800280a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2101      	movs	r1, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8186 	beq.w	8002804 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d005      	beq.n	8002510 <HAL_GPIO_Init+0x44>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d130      	bne.n	8002572 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002546:	2201      	movs	r2, #1
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	f003 0201 	and.w	r2, r3, #1
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b03      	cmp	r3, #3
 800257c:	d017      	beq.n	80025ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d123      	bne.n	8002602 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3208      	adds	r2, #8
 80025fc:	69b9      	ldr	r1, [r7, #24]
 80025fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0203 	and.w	r2, r3, #3
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80e0 	beq.w	8002804 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002644:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_GPIO_Init+0x238>)
 8002646:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800264a:	4a2e      	ldr	r2, [pc, #184]	; (8002704 <HAL_GPIO_Init+0x238>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <HAL_GPIO_Init+0x238>)
 8002656:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002662:	4a29      	ldr	r2, [pc, #164]	; (8002708 <HAL_GPIO_Init+0x23c>)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a20      	ldr	r2, [pc, #128]	; (800270c <HAL_GPIO_Init+0x240>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d052      	beq.n	8002734 <HAL_GPIO_Init+0x268>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1f      	ldr	r2, [pc, #124]	; (8002710 <HAL_GPIO_Init+0x244>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d031      	beq.n	80026fa <HAL_GPIO_Init+0x22e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1e      	ldr	r2, [pc, #120]	; (8002714 <HAL_GPIO_Init+0x248>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d02b      	beq.n	80026f6 <HAL_GPIO_Init+0x22a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <HAL_GPIO_Init+0x24c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d025      	beq.n	80026f2 <HAL_GPIO_Init+0x226>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a1c      	ldr	r2, [pc, #112]	; (800271c <HAL_GPIO_Init+0x250>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01f      	beq.n	80026ee <HAL_GPIO_Init+0x222>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <HAL_GPIO_Init+0x254>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d019      	beq.n	80026ea <HAL_GPIO_Init+0x21e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a1a      	ldr	r2, [pc, #104]	; (8002724 <HAL_GPIO_Init+0x258>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_GPIO_Init+0x21a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a19      	ldr	r2, [pc, #100]	; (8002728 <HAL_GPIO_Init+0x25c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00d      	beq.n	80026e2 <HAL_GPIO_Init+0x216>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a18      	ldr	r2, [pc, #96]	; (800272c <HAL_GPIO_Init+0x260>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d007      	beq.n	80026de <HAL_GPIO_Init+0x212>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a17      	ldr	r2, [pc, #92]	; (8002730 <HAL_GPIO_Init+0x264>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_GPIO_Init+0x20e>
 80026d6:	2309      	movs	r3, #9
 80026d8:	e02d      	b.n	8002736 <HAL_GPIO_Init+0x26a>
 80026da:	230a      	movs	r3, #10
 80026dc:	e02b      	b.n	8002736 <HAL_GPIO_Init+0x26a>
 80026de:	2308      	movs	r3, #8
 80026e0:	e029      	b.n	8002736 <HAL_GPIO_Init+0x26a>
 80026e2:	2307      	movs	r3, #7
 80026e4:	e027      	b.n	8002736 <HAL_GPIO_Init+0x26a>
 80026e6:	2306      	movs	r3, #6
 80026e8:	e025      	b.n	8002736 <HAL_GPIO_Init+0x26a>
 80026ea:	2305      	movs	r3, #5
 80026ec:	e023      	b.n	8002736 <HAL_GPIO_Init+0x26a>
 80026ee:	2304      	movs	r3, #4
 80026f0:	e021      	b.n	8002736 <HAL_GPIO_Init+0x26a>
 80026f2:	2303      	movs	r3, #3
 80026f4:	e01f      	b.n	8002736 <HAL_GPIO_Init+0x26a>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e01d      	b.n	8002736 <HAL_GPIO_Init+0x26a>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e01b      	b.n	8002736 <HAL_GPIO_Init+0x26a>
 80026fe:	bf00      	nop
 8002700:	58000080 	.word	0x58000080
 8002704:	58024400 	.word	0x58024400
 8002708:	58000400 	.word	0x58000400
 800270c:	58020000 	.word	0x58020000
 8002710:	58020400 	.word	0x58020400
 8002714:	58020800 	.word	0x58020800
 8002718:	58020c00 	.word	0x58020c00
 800271c:	58021000 	.word	0x58021000
 8002720:	58021400 	.word	0x58021400
 8002724:	58021800 	.word	0x58021800
 8002728:	58021c00 	.word	0x58021c00
 800272c:	58022000 	.word	0x58022000
 8002730:	58022400 	.word	0x58022400
 8002734:	2300      	movs	r3, #0
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	f002 0203 	and.w	r2, r2, #3
 800273c:	0092      	lsls	r2, r2, #2
 800273e:	4093      	lsls	r3, r2
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002746:	4938      	ldr	r1, [pc, #224]	; (8002828 <HAL_GPIO_Init+0x35c>)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800277a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	3301      	adds	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	f47f ae63 	bne.w	80024e0 <HAL_GPIO_Init+0x14>
  }
}
 800281a:	bf00      	nop
 800281c:	bf00      	nop
 800281e:	3724      	adds	r7, #36	; 0x24
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	58000400 	.word	0x58000400

0800282c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
 8002838:	4613      	mov	r3, r2
 800283a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800283c:	787b      	ldrb	r3, [r7, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002848:	e003      	b.n	8002852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800284a:	887b      	ldrh	r3, [r7, #2]
 800284c:	041a      	lsls	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	619a      	str	r2, [r3, #24]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	460b      	mov	r3, r1
 8002868:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002870:	887a      	ldrh	r2, [r7, #2]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4013      	ands	r3, r2
 8002876:	041a      	lsls	r2, r3, #16
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	43d9      	mvns	r1, r3
 800287c:	887b      	ldrh	r3, [r7, #2]
 800287e:	400b      	ands	r3, r1
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	619a      	str	r2, [r3, #24]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_PWREx_ConfigSupply+0x70>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d00a      	beq.n	80028be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028a8:	4b16      	ldr	r3, [pc, #88]	; (8002904 <HAL_PWREx_ConfigSupply+0x70>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e01f      	b.n	80028fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e01d      	b.n	80028fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_PWREx_ConfigSupply+0x70>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f023 0207 	bic.w	r2, r3, #7
 80028c6:	490f      	ldr	r1, [pc, #60]	; (8002904 <HAL_PWREx_ConfigSupply+0x70>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028ce:	f7fe fb57 	bl	8000f80 <HAL_GetTick>
 80028d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028d4:	e009      	b.n	80028ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028d6:	f7fe fb53 	bl	8000f80 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028e4:	d901      	bls.n	80028ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e007      	b.n	80028fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_PWREx_ConfigSupply+0x70>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f6:	d1ee      	bne.n	80028d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	58024800 	.word	0x58024800

08002908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	f000 bc48 	b.w	80031ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8088 	beq.w	8002a3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292a:	4b99      	ldr	r3, [pc, #612]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002934:	4b96      	ldr	r3, [pc, #600]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	2b10      	cmp	r3, #16
 800293e:	d007      	beq.n	8002950 <HAL_RCC_OscConfig+0x48>
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	2b18      	cmp	r3, #24
 8002944:	d111      	bne.n	800296a <HAL_RCC_OscConfig+0x62>
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d10c      	bne.n	800296a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	4b8f      	ldr	r3, [pc, #572]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d06d      	beq.n	8002a38 <HAL_RCC_OscConfig+0x130>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d169      	bne.n	8002a38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f000 bc21 	b.w	80031ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002972:	d106      	bne.n	8002982 <HAL_RCC_OscConfig+0x7a>
 8002974:	4b86      	ldr	r3, [pc, #536]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a85      	ldr	r2, [pc, #532]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 800297a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	e02e      	b.n	80029e0 <HAL_RCC_OscConfig+0xd8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x9c>
 800298a:	4b81      	ldr	r3, [pc, #516]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a80      	ldr	r2, [pc, #512]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	4b7e      	ldr	r3, [pc, #504]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a7d      	ldr	r2, [pc, #500]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 800299c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	e01d      	b.n	80029e0 <HAL_RCC_OscConfig+0xd8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029ae:	4b78      	ldr	r3, [pc, #480]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a77      	ldr	r2, [pc, #476]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b75      	ldr	r3, [pc, #468]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a74      	ldr	r2, [pc, #464]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0xd8>
 80029c8:	4b71      	ldr	r3, [pc, #452]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a70      	ldr	r2, [pc, #448]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b6e      	ldr	r3, [pc, #440]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a6d      	ldr	r2, [pc, #436]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 80029da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d013      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe faca 	bl	8000f80 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fac6 	bl	8000f80 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e3d4      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a02:	4b63      	ldr	r3, [pc, #396]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fab6 	bl	8000f80 <HAL_GetTick>
 8002a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7fe fab2 	bl	8000f80 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e3c0      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a2a:	4b59      	ldr	r3, [pc, #356]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x110>
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80ca 	beq.w	8002bdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a48:	4b51      	ldr	r3, [pc, #324]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a52:	4b4f      	ldr	r3, [pc, #316]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <HAL_RCC_OscConfig+0x166>
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	2b18      	cmp	r3, #24
 8002a62:	d156      	bne.n	8002b12 <HAL_RCC_OscConfig+0x20a>
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d151      	bne.n	8002b12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a6e:	4b48      	ldr	r3, [pc, #288]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e392      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a86:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 0219 	bic.w	r2, r3, #25
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	493f      	ldr	r1, [pc, #252]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fa72 	bl	8000f80 <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fa6e 	bl	8000f80 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e37c      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ab2:	4b37      	ldr	r3, [pc, #220]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	f7fe fa8f 	bl	8000fe0 <HAL_GetREVID>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d817      	bhi.n	8002afc <HAL_RCC_OscConfig+0x1f4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b40      	cmp	r3, #64	; 0x40
 8002ad2:	d108      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002adc:	4a2c      	ldr	r2, [pc, #176]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae4:	e07a      	b.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae6:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	031b      	lsls	r3, r3, #12
 8002af4:	4926      	ldr	r1, [pc, #152]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002afa:	e06f      	b.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afc:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	4921      	ldr	r1, [pc, #132]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b10:	e064      	b.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d047      	beq.n	8002baa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 0219 	bic.w	r2, r3, #25
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	491a      	ldr	r1, [pc, #104]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fa28 	bl	8000f80 <HAL_GetTick>
 8002b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b34:	f7fe fa24 	bl	8000f80 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e332      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	f7fe fa45 	bl	8000fe0 <HAL_GetREVID>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d819      	bhi.n	8002b94 <HAL_RCC_OscConfig+0x28c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d108      	bne.n	8002b7a <HAL_RCC_OscConfig+0x272>
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b76:	6053      	str	r3, [r2, #4]
 8002b78:	e030      	b.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	031b      	lsls	r3, r3, #12
 8002b88:	4901      	ldr	r1, [pc, #4]	; (8002b90 <HAL_RCC_OscConfig+0x288>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	604b      	str	r3, [r1, #4]
 8002b8e:	e025      	b.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
 8002b90:	58024400 	.word	0x58024400
 8002b94:	4b9a      	ldr	r3, [pc, #616]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	4997      	ldr	r1, [pc, #604]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
 8002ba8:	e018      	b.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002baa:	4b95      	ldr	r3, [pc, #596]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a94      	ldr	r2, [pc, #592]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe f9e3 	bl	8000f80 <HAL_GetTick>
 8002bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7fe f9df 	bl	8000f80 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e2ed      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bd0:	4b8b      	ldr	r3, [pc, #556]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f0      	bne.n	8002bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80a9 	beq.w	8002d3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bea:	4b85      	ldr	r3, [pc, #532]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bf2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bf4:	4b82      	ldr	r3, [pc, #520]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d007      	beq.n	8002c10 <HAL_RCC_OscConfig+0x308>
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b18      	cmp	r3, #24
 8002c04:	d13a      	bne.n	8002c7c <HAL_RCC_OscConfig+0x374>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d135      	bne.n	8002c7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c10:	4b7b      	ldr	r3, [pc, #492]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_OscConfig+0x320>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2b80      	cmp	r3, #128	; 0x80
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e2c1      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c28:	f7fe f9da 	bl	8000fe0 <HAL_GetREVID>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d817      	bhi.n	8002c66 <HAL_RCC_OscConfig+0x35e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d108      	bne.n	8002c50 <HAL_RCC_OscConfig+0x348>
 8002c3e:	4b70      	ldr	r3, [pc, #448]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c46:	4a6e      	ldr	r2, [pc, #440]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c4e:	e075      	b.n	8002d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c50:	4b6b      	ldr	r3, [pc, #428]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	069b      	lsls	r3, r3, #26
 8002c5e:	4968      	ldr	r1, [pc, #416]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c64:	e06a      	b.n	8002d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c66:	4b66      	ldr	r3, [pc, #408]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	4962      	ldr	r1, [pc, #392]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c7a:	e05f      	b.n	8002d3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d042      	beq.n	8002d0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c84:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5d      	ldr	r2, [pc, #372]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe f976 	bl	8000f80 <HAL_GetTick>
 8002c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c98:	f7fe f972 	bl	8000f80 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e280      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002caa:	4b55      	ldr	r3, [pc, #340]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cb6:	f7fe f993 	bl	8000fe0 <HAL_GetREVID>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d817      	bhi.n	8002cf4 <HAL_RCC_OscConfig+0x3ec>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d108      	bne.n	8002cde <HAL_RCC_OscConfig+0x3d6>
 8002ccc:	4b4c      	ldr	r3, [pc, #304]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cd4:	4a4a      	ldr	r2, [pc, #296]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cda:	6053      	str	r3, [r2, #4]
 8002cdc:	e02e      	b.n	8002d3c <HAL_RCC_OscConfig+0x434>
 8002cde:	4b48      	ldr	r3, [pc, #288]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	069b      	lsls	r3, r3, #26
 8002cec:	4944      	ldr	r1, [pc, #272]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
 8002cf2:	e023      	b.n	8002d3c <HAL_RCC_OscConfig+0x434>
 8002cf4:	4b42      	ldr	r3, [pc, #264]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	493f      	ldr	r1, [pc, #252]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60cb      	str	r3, [r1, #12]
 8002d08:	e018      	b.n	8002d3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a3c      	ldr	r2, [pc, #240]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7fe f933 	bl	8000f80 <HAL_GetTick>
 8002d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d1e:	f7fe f92f 	bl	8000f80 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e23d      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d30:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f0      	bne.n	8002d1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d036      	beq.n	8002db6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d019      	beq.n	8002d84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d50:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d54:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7fe f910 	bl	8000f80 <HAL_GetTick>
 8002d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d64:	f7fe f90c 	bl	8000f80 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e21a      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d76:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x45c>
 8002d82:	e018      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d84:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d88:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7fe f8f6 	bl	8000f80 <HAL_GetTick>
 8002d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d98:	f7fe f8f2 	bl	8000f80 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e200      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d039      	beq.n	8002e36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01c      	beq.n	8002e04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a0c      	ldr	r2, [pc, #48]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe f8d3 	bl	8000f80 <HAL_GetTick>
 8002dda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dde:	f7fe f8cf 	bl	8000f80 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e1dd      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x4d6>
 8002dfc:	e01b      	b.n	8002e36 <HAL_RCC_OscConfig+0x52e>
 8002dfe:	bf00      	nop
 8002e00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e04:	4b9b      	ldr	r3, [pc, #620]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a9a      	ldr	r2, [pc, #616]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e10:	f7fe f8b6 	bl	8000f80 <HAL_GetTick>
 8002e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e18:	f7fe f8b2 	bl	8000f80 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e1c0      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e2a:	4b92      	ldr	r3, [pc, #584]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8081 	beq.w	8002f46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e44:	4b8c      	ldr	r3, [pc, #560]	; (8003078 <HAL_RCC_OscConfig+0x770>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a8b      	ldr	r2, [pc, #556]	; (8003078 <HAL_RCC_OscConfig+0x770>)
 8002e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e50:	f7fe f896 	bl	8000f80 <HAL_GetTick>
 8002e54:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e58:	f7fe f892 	bl	8000f80 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e1a0      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e6a:	4b83      	ldr	r3, [pc, #524]	; (8003078 <HAL_RCC_OscConfig+0x770>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d106      	bne.n	8002e8c <HAL_RCC_OscConfig+0x584>
 8002e7e:	4b7d      	ldr	r3, [pc, #500]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a7c      	ldr	r2, [pc, #496]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	e02d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x5e0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10c      	bne.n	8002eae <HAL_RCC_OscConfig+0x5a6>
 8002e94:	4b77      	ldr	r3, [pc, #476]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a76      	ldr	r2, [pc, #472]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea0:	4b74      	ldr	r3, [pc, #464]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a73      	ldr	r2, [pc, #460]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	e01c      	b.n	8002ee8 <HAL_RCC_OscConfig+0x5e0>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x5c8>
 8002eb6:	4b6f      	ldr	r3, [pc, #444]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a6e      	ldr	r2, [pc, #440]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ebc:	f043 0304 	orr.w	r3, r3, #4
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	4b6c      	ldr	r3, [pc, #432]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a6b      	ldr	r2, [pc, #428]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ece:	e00b      	b.n	8002ee8 <HAL_RCC_OscConfig+0x5e0>
 8002ed0:	4b68      	ldr	r3, [pc, #416]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	4a67      	ldr	r2, [pc, #412]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	6713      	str	r3, [r2, #112]	; 0x70
 8002edc:	4b65      	ldr	r3, [pc, #404]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	4a64      	ldr	r2, [pc, #400]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ee2:	f023 0304 	bic.w	r3, r3, #4
 8002ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d015      	beq.n	8002f1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7fe f846 	bl	8000f80 <HAL_GetTick>
 8002ef4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7fe f842 	bl	8000f80 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e14e      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f0e:	4b59      	ldr	r3, [pc, #356]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0ee      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x5f0>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe f830 	bl	8000f80 <HAL_GetTick>
 8002f20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f24:	f7fe f82c 	bl	8000f80 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e138      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f3a:	4b4e      	ldr	r3, [pc, #312]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1ee      	bne.n	8002f24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 812d 	beq.w	80031aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f50:	4b48      	ldr	r3, [pc, #288]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f58:	2b18      	cmp	r3, #24
 8002f5a:	f000 80bd 	beq.w	80030d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	f040 809e 	bne.w	80030a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f68:	4b42      	ldr	r3, [pc, #264]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a41      	ldr	r2, [pc, #260]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe f804 	bl	8000f80 <HAL_GetTick>
 8002f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe f800 	bl	8000f80 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e10e      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f8e:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f9a:	4b36      	ldr	r3, [pc, #216]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f9e:	4b37      	ldr	r3, [pc, #220]	; (800307c <HAL_RCC_OscConfig+0x774>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	430a      	orrs	r2, r1
 8002fae:	4931      	ldr	r1, [pc, #196]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	628b      	str	r3, [r1, #40]	; 0x28
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	025b      	lsls	r3, r3, #9
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fe4:	4923      	ldr	r1, [pc, #140]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	4a21      	ldr	r2, [pc, #132]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ff6:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8002ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <HAL_RCC_OscConfig+0x778>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003002:	00d2      	lsls	r2, r2, #3
 8003004:	491b      	ldr	r1, [pc, #108]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800300a:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	f023 020c 	bic.w	r2, r3, #12
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4917      	ldr	r1, [pc, #92]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003018:	4313      	orrs	r3, r2
 800301a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800301c:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	f023 0202 	bic.w	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	4912      	ldr	r1, [pc, #72]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 800302a:	4313      	orrs	r3, r2
 800302c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	4a10      	ldr	r2, [pc, #64]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 800304c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003050:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	4a07      	ldr	r2, [pc, #28]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_RCC_OscConfig+0x76c>)
 8003064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fd ff89 	bl	8000f80 <HAL_GetTick>
 800306e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003070:	e011      	b.n	8003096 <HAL_RCC_OscConfig+0x78e>
 8003072:	bf00      	nop
 8003074:	58024400 	.word	0x58024400
 8003078:	58024800 	.word	0x58024800
 800307c:	fffffc0c 	.word	0xfffffc0c
 8003080:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fd ff7c 	bl	8000f80 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e08a      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003096:	4b47      	ldr	r3, [pc, #284]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x77c>
 80030a2:	e082      	b.n	80031aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b43      	ldr	r3, [pc, #268]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a42      	ldr	r2, [pc, #264]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80030aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fd ff66 	bl	8000f80 <HAL_GetTick>
 80030b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fd ff62 	bl	8000f80 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e070      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ca:	4b3a      	ldr	r3, [pc, #232]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x7b0>
 80030d6:	e068      	b.n	80031aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030de:	4b35      	ldr	r3, [pc, #212]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d031      	beq.n	8003150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f003 0203 	and.w	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d12a      	bne.n	8003150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d122      	bne.n	8003150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003116:	429a      	cmp	r2, r3
 8003118:	d11a      	bne.n	8003150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	0a5b      	lsrs	r3, r3, #9
 800311e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d111      	bne.n	8003150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	0c1b      	lsrs	r3, r3, #16
 8003130:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d108      	bne.n	8003150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	0e1b      	lsrs	r3, r3, #24
 8003142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e02b      	b.n	80031ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003154:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	08db      	lsrs	r3, r3, #3
 800315a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800315e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	429a      	cmp	r2, r3
 8003168:	d01f      	beq.n	80031aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003176:	f7fd ff03 	bl	8000f80 <HAL_GetTick>
 800317a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800317c:	bf00      	nop
 800317e:	f7fd feff 	bl	8000f80 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	4293      	cmp	r3, r2
 8003188:	d0f9      	beq.n	800317e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 800318c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_RCC_OscConfig+0x8b0>)
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003196:	00d2      	lsls	r2, r2, #3
 8003198:	4906      	ldr	r1, [pc, #24]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 800319a:	4313      	orrs	r3, r2
 800319c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <HAL_RCC_OscConfig+0x8ac>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3730      	adds	r7, #48	; 0x30
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	58024400 	.word	0x58024400
 80031b8:	ffff0007 	.word	0xffff0007

080031bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e19c      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b8a      	ldr	r3, [pc, #552]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d910      	bls.n	8003200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b87      	ldr	r3, [pc, #540]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 020f 	bic.w	r2, r3, #15
 80031e6:	4985      	ldr	r1, [pc, #532]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b83      	ldr	r3, [pc, #524]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e184      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	4b7b      	ldr	r3, [pc, #492]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003218:	429a      	cmp	r2, r3
 800321a:	d908      	bls.n	800322e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800321c:	4b78      	ldr	r3, [pc, #480]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	4975      	ldr	r1, [pc, #468]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800322a:	4313      	orrs	r3, r2
 800322c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d010      	beq.n	800325c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	4b70      	ldr	r3, [pc, #448]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003246:	429a      	cmp	r2, r3
 8003248:	d908      	bls.n	800325c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800324a:	4b6d      	ldr	r3, [pc, #436]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	496a      	ldr	r1, [pc, #424]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 8003258:	4313      	orrs	r3, r2
 800325a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	d010      	beq.n	800328a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	4b64      	ldr	r3, [pc, #400]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003274:	429a      	cmp	r2, r3
 8003276:	d908      	bls.n	800328a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003278:	4b61      	ldr	r3, [pc, #388]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	495e      	ldr	r1, [pc, #376]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 8003286:	4313      	orrs	r3, r2
 8003288:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d010      	beq.n	80032b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	4b59      	ldr	r3, [pc, #356]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d908      	bls.n	80032b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032a6:	4b56      	ldr	r3, [pc, #344]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	4953      	ldr	r1, [pc, #332]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d010      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	4b4d      	ldr	r3, [pc, #308]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d908      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f023 020f 	bic.w	r2, r3, #15
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4947      	ldr	r1, [pc, #284]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d055      	beq.n	800339e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80032f2:	4b43      	ldr	r3, [pc, #268]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	4940      	ldr	r1, [pc, #256]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 8003300:	4313      	orrs	r3, r2
 8003302:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d107      	bne.n	800331c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800330c:	4b3c      	ldr	r3, [pc, #240]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d121      	bne.n	800335c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0f6      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d107      	bne.n	8003334 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d115      	bne.n	800335c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0ea      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800333c:	4b30      	ldr	r3, [pc, #192]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d109      	bne.n	800335c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0de      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800334c:	4b2c      	ldr	r3, [pc, #176]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0d6      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800335c:	4b28      	ldr	r3, [pc, #160]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f023 0207 	bic.w	r2, r3, #7
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4925      	ldr	r1, [pc, #148]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800336a:	4313      	orrs	r3, r2
 800336c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336e:	f7fd fe07 	bl	8000f80 <HAL_GetTick>
 8003372:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003374:	e00a      	b.n	800338c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003376:	f7fd fe03 	bl	8000f80 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e0be      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338c:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	429a      	cmp	r2, r3
 800339c:	d1eb      	bne.n	8003376 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d010      	beq.n	80033cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	4b14      	ldr	r3, [pc, #80]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d208      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f023 020f 	bic.w	r2, r3, #15
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	490e      	ldr	r1, [pc, #56]	; (8003400 <HAL_RCC_ClockConfig+0x244>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d214      	bcs.n	8003404 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 020f 	bic.w	r2, r3, #15
 80033e2:	4906      	ldr	r1, [pc, #24]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <HAL_RCC_ClockConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e086      	b.n	800350a <HAL_RCC_ClockConfig+0x34e>
 80033fc:	52002000 	.word	0x52002000
 8003400:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d010      	beq.n	8003432 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	4b3f      	ldr	r3, [pc, #252]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800341c:	429a      	cmp	r2, r3
 800341e:	d208      	bcs.n	8003432 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003420:	4b3c      	ldr	r3, [pc, #240]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	4939      	ldr	r1, [pc, #228]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 800342e:	4313      	orrs	r3, r2
 8003430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d010      	beq.n	8003460 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800344a:	429a      	cmp	r2, r3
 800344c:	d208      	bcs.n	8003460 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800344e:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	492e      	ldr	r1, [pc, #184]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 800345c:	4313      	orrs	r3, r2
 800345e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	d010      	beq.n	800348e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699a      	ldr	r2, [r3, #24]
 8003470:	4b28      	ldr	r3, [pc, #160]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003478:	429a      	cmp	r2, r3
 800347a:	d208      	bcs.n	800348e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800347c:	4b25      	ldr	r3, [pc, #148]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	4922      	ldr	r1, [pc, #136]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 800348a:	4313      	orrs	r3, r2
 800348c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d010      	beq.n	80034bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d208      	bcs.n	80034bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034aa:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4917      	ldr	r1, [pc, #92]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034bc:	f000 f834 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	0a1b      	lsrs	r3, r3, #8
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	4912      	ldr	r1, [pc, #72]	; (8003518 <HAL_RCC_ClockConfig+0x35c>)
 80034ce:	5ccb      	ldrb	r3, [r1, r3]
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
 80034d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_RCC_ClockConfig+0x358>)
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <HAL_RCC_ClockConfig+0x35c>)
 80034e4:	5cd3      	ldrb	r3, [r2, r3]
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
 80034f0:	4a0a      	ldr	r2, [pc, #40]	; (800351c <HAL_RCC_ClockConfig+0x360>)
 80034f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034f4:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <HAL_RCC_ClockConfig+0x364>)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_RCC_ClockConfig+0x368>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fd fcf4 	bl	8000eec <HAL_InitTick>
 8003504:	4603      	mov	r3, r0
 8003506:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003508:	7bfb      	ldrb	r3, [r7, #15]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	58024400 	.word	0x58024400
 8003518:	08005094 	.word	0x08005094
 800351c:	24000004 	.word	0x24000004
 8003520:	24000000 	.word	0x24000000
 8003524:	24000008 	.word	0x24000008

08003528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	; 0x24
 800352c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800352e:	4bb3      	ldr	r3, [pc, #716]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003536:	2b18      	cmp	r3, #24
 8003538:	f200 8155 	bhi.w	80037e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800353c:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <HAL_RCC_GetSysClockFreq+0x1c>)
 800353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003542:	bf00      	nop
 8003544:	080035a9 	.word	0x080035a9
 8003548:	080037e7 	.word	0x080037e7
 800354c:	080037e7 	.word	0x080037e7
 8003550:	080037e7 	.word	0x080037e7
 8003554:	080037e7 	.word	0x080037e7
 8003558:	080037e7 	.word	0x080037e7
 800355c:	080037e7 	.word	0x080037e7
 8003560:	080037e7 	.word	0x080037e7
 8003564:	080035cf 	.word	0x080035cf
 8003568:	080037e7 	.word	0x080037e7
 800356c:	080037e7 	.word	0x080037e7
 8003570:	080037e7 	.word	0x080037e7
 8003574:	080037e7 	.word	0x080037e7
 8003578:	080037e7 	.word	0x080037e7
 800357c:	080037e7 	.word	0x080037e7
 8003580:	080037e7 	.word	0x080037e7
 8003584:	080035d5 	.word	0x080035d5
 8003588:	080037e7 	.word	0x080037e7
 800358c:	080037e7 	.word	0x080037e7
 8003590:	080037e7 	.word	0x080037e7
 8003594:	080037e7 	.word	0x080037e7
 8003598:	080037e7 	.word	0x080037e7
 800359c:	080037e7 	.word	0x080037e7
 80035a0:	080037e7 	.word	0x080037e7
 80035a4:	080035db 	.word	0x080035db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035a8:	4b94      	ldr	r3, [pc, #592]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d009      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035b4:	4b91      	ldr	r3, [pc, #580]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	08db      	lsrs	r3, r3, #3
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	4a90      	ldr	r2, [pc, #576]	; (8003800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
 80035c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80035c6:	e111      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035c8:	4b8d      	ldr	r3, [pc, #564]	; (8003800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035ca:	61bb      	str	r3, [r7, #24]
      break;
 80035cc:	e10e      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80035ce:	4b8d      	ldr	r3, [pc, #564]	; (8003804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035d0:	61bb      	str	r3, [r7, #24]
      break;
 80035d2:	e10b      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80035d4:	4b8c      	ldr	r3, [pc, #560]	; (8003808 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80035d6:	61bb      	str	r3, [r7, #24]
      break;
 80035d8:	e108      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035da:	4b88      	ldr	r3, [pc, #544]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80035e4:	4b85      	ldr	r3, [pc, #532]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035f0:	4b82      	ldr	r3, [pc, #520]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80035fa:	4b80      	ldr	r3, [pc, #512]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fe:	08db      	lsrs	r3, r3, #3
 8003600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003612:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80e1 	beq.w	80037e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b02      	cmp	r3, #2
 8003622:	f000 8083 	beq.w	800372c <HAL_RCC_GetSysClockFreq+0x204>
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b02      	cmp	r3, #2
 800362a:	f200 80a1 	bhi.w	8003770 <HAL_RCC_GetSysClockFreq+0x248>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x114>
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d056      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800363a:	e099      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800363c:	4b6f      	ldr	r3, [pc, #444]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02d      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003648:	4b6c      	ldr	r3, [pc, #432]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	08db      	lsrs	r3, r3, #3
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	4a6b      	ldr	r2, [pc, #428]	; (8003800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
 8003658:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003672:	4b62      	ldr	r3, [pc, #392]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003682:	ed97 6a02 	vldr	s12, [r7, #8]
 8003686:	eddf 5a61 	vldr	s11, [pc, #388]	; 800380c <HAL_RCC_GetSysClockFreq+0x2e4>
 800368a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800368e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800369a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80036a2:	e087      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003810 <HAL_RCC_GetSysClockFreq+0x2e8>
 80036b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b6:	4b51      	ldr	r3, [pc, #324]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800380c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036e6:	e065      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003814 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036fa:	4b40      	ldr	r3, [pc, #256]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800370a:	ed97 6a02 	vldr	s12, [r7, #8]
 800370e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800380c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800371a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800371e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800372a:	e043      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003736:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003818 <HAL_RCC_GetSysClockFreq+0x2f0>
 800373a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800373e:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800374e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003752:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800380c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800375a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800375e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800376e:	e021      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003814 <HAL_RCC_GetSysClockFreq+0x2ec>
 800377e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003782:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003792:	ed97 6a02 	vldr	s12, [r7, #8]
 8003796:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800380c <HAL_RCC_GetSysClockFreq+0x2e4>
 800379a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800379e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	0a5b      	lsrs	r3, r3, #9
 80037ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037be:	3301      	adds	r3, #1
 80037c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	ee07 3a90 	vmov	s15, r3
 80037c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80037d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d8:	ee17 3a90 	vmov	r3, s15
 80037dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80037de:	e005      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61bb      	str	r3, [r7, #24]
      break;
 80037e4:	e002      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80037e6:	4b07      	ldr	r3, [pc, #28]	; (8003804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037e8:	61bb      	str	r3, [r7, #24]
      break;
 80037ea:	bf00      	nop
  }

  return sysclockfreq;
 80037ec:	69bb      	ldr	r3, [r7, #24]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3724      	adds	r7, #36	; 0x24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	58024400 	.word	0x58024400
 8003800:	03d09000 	.word	0x03d09000
 8003804:	003d0900 	.word	0x003d0900
 8003808:	017d7840 	.word	0x017d7840
 800380c:	46000000 	.word	0x46000000
 8003810:	4c742400 	.word	0x4c742400
 8003814:	4a742400 	.word	0x4a742400
 8003818:	4bbebc20 	.word	0x4bbebc20

0800381c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800381c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003820:	b0ca      	sub	sp, #296	; 0x128
 8003822:	af00      	add	r7, sp, #0
 8003824:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003828:	2300      	movs	r3, #0
 800382a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800382e:	2300      	movs	r3, #0
 8003830:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003840:	2500      	movs	r5, #0
 8003842:	ea54 0305 	orrs.w	r3, r4, r5
 8003846:	d049      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800384e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003852:	d02f      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003854:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003858:	d828      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800385a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800385e:	d01a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003860:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003864:	d822      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800386a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386e:	d007      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003870:	e01c      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003872:	4bb8      	ldr	r3, [pc, #736]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	4ab7      	ldr	r2, [pc, #732]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800387e:	e01a      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003884:	3308      	adds	r3, #8
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f001 f9d1 	bl	8004c30 <RCCEx_PLL2_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003894:	e00f      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389a:	3328      	adds	r3, #40	; 0x28
 800389c:	2102      	movs	r1, #2
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 fa78 	bl	8004d94 <RCCEx_PLL3_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038aa:	e004      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038b2:	e000      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80038b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10a      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038be:	4ba5      	ldr	r3, [pc, #660]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80038c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038cc:	4aa1      	ldr	r2, [pc, #644]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ce:	430b      	orrs	r3, r1
 80038d0:	6513      	str	r3, [r2, #80]	; 0x50
 80038d2:	e003      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80038e8:	f04f 0900 	mov.w	r9, #0
 80038ec:	ea58 0309 	orrs.w	r3, r8, r9
 80038f0:	d047      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d82a      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003919 	.word	0x08003919
 8003908:	08003927 	.word	0x08003927
 800390c:	0800393d 	.word	0x0800393d
 8003910:	0800395b 	.word	0x0800395b
 8003914:	0800395b 	.word	0x0800395b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003918:	4b8e      	ldr	r3, [pc, #568]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	4a8d      	ldr	r2, [pc, #564]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800391e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003922:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003924:	e01a      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800392a:	3308      	adds	r3, #8
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f001 f97e 	bl	8004c30 <RCCEx_PLL2_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800393a:	e00f      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003940:	3328      	adds	r3, #40	; 0x28
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f001 fa25 	bl	8004d94 <RCCEx_PLL3_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003950:	e004      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003958:	e000      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800395a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800395c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003964:	4b7b      	ldr	r3, [pc, #492]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	f023 0107 	bic.w	r1, r3, #7
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003972:	4a78      	ldr	r2, [pc, #480]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003974:	430b      	orrs	r3, r1
 8003976:	6513      	str	r3, [r2, #80]	; 0x50
 8003978:	e003      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800397e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800398e:	f04f 0b00 	mov.w	fp, #0
 8003992:	ea5a 030b 	orrs.w	r3, sl, fp
 8003996:	d04c      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a2:	d030      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80039a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a8:	d829      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039aa:	2bc0      	cmp	r3, #192	; 0xc0
 80039ac:	d02d      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039ae:	2bc0      	cmp	r3, #192	; 0xc0
 80039b0:	d825      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d018      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80039b6:	2b80      	cmp	r3, #128	; 0x80
 80039b8:	d821      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d007      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80039c2:	e01c      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c4:	4b63      	ldr	r3, [pc, #396]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	4a62      	ldr	r2, [pc, #392]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80039d0:	e01c      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d6:	3308      	adds	r3, #8
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 f928 	bl	8004c30 <RCCEx_PLL2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80039e6:	e011      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ec:	3328      	adds	r3, #40	; 0x28
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 f9cf 	bl	8004d94 <RCCEx_PLL3_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a04:	e002      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a06:	bf00      	nop
 8003a08:	e000      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a14:	4b4f      	ldr	r3, [pc, #316]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a18:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	4a4c      	ldr	r2, [pc, #304]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a24:	430b      	orrs	r3, r1
 8003a26:	6513      	str	r3, [r2, #80]	; 0x50
 8003a28:	e003      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003a3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003a42:	2300      	movs	r3, #0
 8003a44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003a48:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	d053      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a5e:	d035      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003a60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a64:	d82e      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a6a:	d031      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a70:	d828      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a76:	d01a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7c:	d822      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003a82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a86:	d007      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a88:	e01c      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a8a:	4b32      	ldr	r3, [pc, #200]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	4a31      	ldr	r2, [pc, #196]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a96:	e01c      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 f8c5 	bl	8004c30 <RCCEx_PLL2_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003aac:	e011      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab2:	3328      	adds	r3, #40	; 0x28
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 f96c 	bl	8004d94 <RCCEx_PLL3_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ac2:	e006      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aca:	e002      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003acc:	bf00      	nop
 8003ace:	e000      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10b      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ada:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003aea:	4a1a      	ldr	r2, [pc, #104]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aec:	430b      	orrs	r3, r1
 8003aee:	6593      	str	r3, [r2, #88]	; 0x58
 8003af0:	e003      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003af6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003b06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b10:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003b14:	460b      	mov	r3, r1
 8003b16:	4313      	orrs	r3, r2
 8003b18:	d056      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b26:	d038      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003b28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b2c:	d831      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b32:	d034      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003b34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b38:	d82b      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b3e:	d01d      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b44:	d825      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003b4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003b50:	e01f      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b52:	bf00      	nop
 8003b54:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b58:	4ba2      	ldr	r3, [pc, #648]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	4aa1      	ldr	r2, [pc, #644]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b64:	e01c      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 f85e 	bl	8004c30 <RCCEx_PLL2_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b7a:	e011      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b80:	3328      	adds	r3, #40	; 0x28
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f001 f905 	bl	8004d94 <RCCEx_PLL3_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b90:	e006      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b98:	e002      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10b      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ba8:	4b8e      	ldr	r3, [pc, #568]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bb8:	4a8a      	ldr	r2, [pc, #552]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003bbe:	e003      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bde:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003be2:	460b      	mov	r3, r1
 8003be4:	4313      	orrs	r3, r2
 8003be6:	d03a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bee:	2b30      	cmp	r3, #48	; 0x30
 8003bf0:	d01f      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003bf2:	2b30      	cmp	r3, #48	; 0x30
 8003bf4:	d819      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d00c      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d815      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d019      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d111      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c06:	4b77      	ldr	r3, [pc, #476]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	4a76      	ldr	r2, [pc, #472]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c12:	e011      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c18:	3308      	adds	r3, #8
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f001 f807 	bl	8004c30 <RCCEx_PLL2_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c28:	e006      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c30:	e002      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c32:	bf00      	nop
 8003c34:	e000      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c40:	4b68      	ldr	r3, [pc, #416]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c44:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4e:	4a65      	ldr	r2, [pc, #404]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c50:	430b      	orrs	r3, r1
 8003c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c54:	e003      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003c6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	d051      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c88:	d035      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c8e:	d82e      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c94:	d031      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c9a:	d828      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca0:	d01a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca6:	d822      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb0:	d007      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003cb2:	e01c      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb4:	4b4b      	ldr	r3, [pc, #300]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	4a4a      	ldr	r2, [pc, #296]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cc0:	e01c      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 ffb0 	bl	8004c30 <RCCEx_PLL2_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cd6:	e011      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cdc:	3328      	adds	r3, #40	; 0x28
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 f857 	bl	8004d94 <RCCEx_PLL3_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cec:	e006      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cf4:	e002      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003cf6:	bf00      	nop
 8003cf8:	e000      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d04:	4b37      	ldr	r3, [pc, #220]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d08:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d12:	4a34      	ldr	r2, [pc, #208]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d14:	430b      	orrs	r3, r1
 8003d16:	6513      	str	r3, [r2, #80]	; 0x50
 8003d18:	e003      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d32:	2300      	movs	r3, #0
 8003d34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003d38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	d056      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d4c:	d033      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003d4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d52:	d82c      	bhi.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d58:	d02f      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003d5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d5e:	d826      	bhi.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d64:	d02b      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003d66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d6a:	d820      	bhi.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d70:	d012      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d76:	d81a      	bhi.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d022      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d80:	d115      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d86:	3308      	adds	r3, #8
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 ff50 	bl	8004c30 <RCCEx_PLL2_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d96:	e015      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d9c:	3328      	adds	r3, #40	; 0x28
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fff7 	bl	8004d94 <RCCEx_PLL3_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003dac:	e00a      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003db4:	e006      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003db6:	bf00      	nop
 8003db8:	e004      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dba:	bf00      	nop
 8003dbc:	e002      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10d      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dda:	4a02      	ldr	r2, [pc, #8]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6513      	str	r3, [r2, #80]	; 0x50
 8003de0:	e006      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003de2:	bf00      	nop
 8003de4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e06:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	d055      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e1c:	d033      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e22:	d82c      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e28:	d02f      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2e:	d826      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e34:	d02b      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003e36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e3a:	d820      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e40:	d012      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e46:	d81a      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d022      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e50:	d115      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e56:	3308      	adds	r3, #8
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fee8 	bl	8004c30 <RCCEx_PLL2_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e66:	e015      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6c:	3328      	adds	r3, #40	; 0x28
 8003e6e:	2101      	movs	r1, #1
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 ff8f 	bl	8004d94 <RCCEx_PLL3_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e7c:	e00a      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e84:	e006      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e86:	bf00      	nop
 8003e88:	e004      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e8a:	bf00      	nop
 8003e8c:	e002      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e8e:	bf00      	nop
 8003e90:	e000      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10b      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e9c:	4ba3      	ldr	r3, [pc, #652]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eac:	4a9f      	ldr	r2, [pc, #636]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb2:	e003      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003ed2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	d037      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee6:	d00e      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eec:	d816      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d018      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef6:	d111      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef8:	4b8c      	ldr	r3, [pc, #560]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	4a8b      	ldr	r2, [pc, #556]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f04:	e00f      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fe8e 	bl	8004c30 <RCCEx_PLL2_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f1a:	e004      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f22:	e000      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f2e:	4b7f      	ldr	r3, [pc, #508]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f32:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	4a7b      	ldr	r2, [pc, #492]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f3e:	430b      	orrs	r3, r1
 8003f40:	6513      	str	r3, [r2, #80]	; 0x50
 8003f42:	e003      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003f62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	d039      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d81c      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003f76:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003fb9 	.word	0x08003fb9
 8003f80:	08003f8d 	.word	0x08003f8d
 8003f84:	08003f9b 	.word	0x08003f9b
 8003f88:	08003fb9 	.word	0x08003fb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f8c:	4b67      	ldr	r3, [pc, #412]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	4a66      	ldr	r2, [pc, #408]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f98:	e00f      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fe44 	bl	8004c30 <RCCEx_PLL2_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003fae:	e004      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fb6:	e000      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003fc2:	4b5a      	ldr	r3, [pc, #360]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	f023 0103 	bic.w	r1, r3, #3
 8003fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd0:	4a56      	ldr	r2, [pc, #344]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fd6:	e003      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003fec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ff6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f000 809f 	beq.w	8004140 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004002:	4b4b      	ldr	r3, [pc, #300]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a4a      	ldr	r2, [pc, #296]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800400e:	f7fc ffb7 	bl	8000f80 <HAL_GetTick>
 8004012:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004016:	e00b      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004018:	f7fc ffb2 	bl	8000f80 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b64      	cmp	r3, #100	; 0x64
 8004026:	d903      	bls.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800402e:	e005      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004030:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0ed      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800403c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004040:	2b00      	cmp	r3, #0
 8004042:	d179      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004044:	4b39      	ldr	r3, [pc, #228]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004050:	4053      	eors	r3, r2
 8004052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004056:	2b00      	cmp	r3, #0
 8004058:	d015      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800405a:	4b34      	ldr	r3, [pc, #208]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004062:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004066:	4b31      	ldr	r3, [pc, #196]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	4a30      	ldr	r2, [pc, #192]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800406c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004070:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004072:	4b2e      	ldr	r3, [pc, #184]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	4a2d      	ldr	r2, [pc, #180]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800407e:	4a2b      	ldr	r2, [pc, #172]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004080:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004084:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800408a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800408e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004092:	d118      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fc ff74 	bl	8000f80 <HAL_GetTick>
 8004098:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800409c:	e00d      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fc ff6f 	bl	8000f80 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040a8:	1ad2      	subs	r2, r2, r3
 80040aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d903      	bls.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80040b8:	e005      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040ba:	4b1c      	ldr	r3, [pc, #112]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0eb      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80040c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d129      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040de:	d10e      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80040e0:	4b12      	ldr	r3, [pc, #72]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040f0:	091a      	lsrs	r2, r3, #4
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	4a0d      	ldr	r2, [pc, #52]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6113      	str	r3, [r2, #16]
 80040fc:	e005      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80040fe:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	4a0a      	ldr	r2, [pc, #40]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004104:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004108:	6113      	str	r3, [r2, #16]
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800410c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004112:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411a:	4a04      	ldr	r2, [pc, #16]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800411c:	430b      	orrs	r3, r1
 800411e:	6713      	str	r3, [r2, #112]	; 0x70
 8004120:	e00e      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004126:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800412a:	e009      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800412c:	58024400 	.word	0x58024400
 8004130:	58024800 	.word	0x58024800
 8004134:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800413c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f002 0301 	and.w	r3, r2, #1
 800414c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004150:	2300      	movs	r3, #0
 8004152:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004156:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800415a:	460b      	mov	r3, r1
 800415c:	4313      	orrs	r3, r2
 800415e:	f000 8089 	beq.w	8004274 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004168:	2b28      	cmp	r3, #40	; 0x28
 800416a:	d86b      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800416c:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	0800424d 	.word	0x0800424d
 8004178:	08004245 	.word	0x08004245
 800417c:	08004245 	.word	0x08004245
 8004180:	08004245 	.word	0x08004245
 8004184:	08004245 	.word	0x08004245
 8004188:	08004245 	.word	0x08004245
 800418c:	08004245 	.word	0x08004245
 8004190:	08004245 	.word	0x08004245
 8004194:	08004219 	.word	0x08004219
 8004198:	08004245 	.word	0x08004245
 800419c:	08004245 	.word	0x08004245
 80041a0:	08004245 	.word	0x08004245
 80041a4:	08004245 	.word	0x08004245
 80041a8:	08004245 	.word	0x08004245
 80041ac:	08004245 	.word	0x08004245
 80041b0:	08004245 	.word	0x08004245
 80041b4:	0800422f 	.word	0x0800422f
 80041b8:	08004245 	.word	0x08004245
 80041bc:	08004245 	.word	0x08004245
 80041c0:	08004245 	.word	0x08004245
 80041c4:	08004245 	.word	0x08004245
 80041c8:	08004245 	.word	0x08004245
 80041cc:	08004245 	.word	0x08004245
 80041d0:	08004245 	.word	0x08004245
 80041d4:	0800424d 	.word	0x0800424d
 80041d8:	08004245 	.word	0x08004245
 80041dc:	08004245 	.word	0x08004245
 80041e0:	08004245 	.word	0x08004245
 80041e4:	08004245 	.word	0x08004245
 80041e8:	08004245 	.word	0x08004245
 80041ec:	08004245 	.word	0x08004245
 80041f0:	08004245 	.word	0x08004245
 80041f4:	0800424d 	.word	0x0800424d
 80041f8:	08004245 	.word	0x08004245
 80041fc:	08004245 	.word	0x08004245
 8004200:	08004245 	.word	0x08004245
 8004204:	08004245 	.word	0x08004245
 8004208:	08004245 	.word	0x08004245
 800420c:	08004245 	.word	0x08004245
 8004210:	08004245 	.word	0x08004245
 8004214:	0800424d 	.word	0x0800424d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421c:	3308      	adds	r3, #8
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fd05 	bl	8004c30 <RCCEx_PLL2_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800422c:	e00f      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004232:	3328      	adds	r3, #40	; 0x28
 8004234:	2101      	movs	r1, #1
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fdac 	bl	8004d94 <RCCEx_PLL3_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004242:	e004      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800424a:	e000      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800424c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004256:	4bbf      	ldr	r3, [pc, #764]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004264:	4abb      	ldr	r2, [pc, #748]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004266:	430b      	orrs	r3, r1
 8004268:	6553      	str	r3, [r2, #84]	; 0x54
 800426a:	e003      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004270:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f002 0302 	and.w	r3, r2, #2
 8004280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800428a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800428e:	460b      	mov	r3, r1
 8004290:	4313      	orrs	r3, r2
 8004292:	d041      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800429a:	2b05      	cmp	r3, #5
 800429c:	d824      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080042f1 	.word	0x080042f1
 80042a8:	080042bd 	.word	0x080042bd
 80042ac:	080042d3 	.word	0x080042d3
 80042b0:	080042f1 	.word	0x080042f1
 80042b4:	080042f1 	.word	0x080042f1
 80042b8:	080042f1 	.word	0x080042f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c0:	3308      	adds	r3, #8
 80042c2:	2101      	movs	r1, #1
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fcb3 	bl	8004c30 <RCCEx_PLL2_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80042d0:	e00f      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d6:	3328      	adds	r3, #40	; 0x28
 80042d8:	2101      	movs	r1, #1
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fd5a 	bl	8004d94 <RCCEx_PLL3_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80042e6:	e004      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042ee:	e000      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80042f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042fa:	4b96      	ldr	r3, [pc, #600]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	f023 0107 	bic.w	r1, r3, #7
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004308:	4a92      	ldr	r2, [pc, #584]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800430a:	430b      	orrs	r3, r1
 800430c:	6553      	str	r3, [r2, #84]	; 0x54
 800430e:	e003      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004314:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f002 0304 	and.w	r3, r2, #4
 8004324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004328:	2300      	movs	r3, #0
 800432a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800432e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004332:	460b      	mov	r3, r1
 8004334:	4313      	orrs	r3, r2
 8004336:	d044      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800433c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004340:	2b05      	cmp	r3, #5
 8004342:	d825      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	08004399 	.word	0x08004399
 8004350:	08004365 	.word	0x08004365
 8004354:	0800437b 	.word	0x0800437b
 8004358:	08004399 	.word	0x08004399
 800435c:	08004399 	.word	0x08004399
 8004360:	08004399 	.word	0x08004399
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004368:	3308      	adds	r3, #8
 800436a:	2101      	movs	r1, #1
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fc5f 	bl	8004c30 <RCCEx_PLL2_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004378:	e00f      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437e:	3328      	adds	r3, #40	; 0x28
 8004380:	2101      	movs	r1, #1
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fd06 	bl	8004d94 <RCCEx_PLL3_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800438e:	e004      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004396:	e000      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10b      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a2:	4b6c      	ldr	r3, [pc, #432]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	f023 0107 	bic.w	r1, r3, #7
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b2:	4a68      	ldr	r2, [pc, #416]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6593      	str	r3, [r2, #88]	; 0x58
 80043b8:	e003      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	f002 0320 	and.w	r3, r2, #32
 80043ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043d2:	2300      	movs	r3, #0
 80043d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043dc:	460b      	mov	r3, r1
 80043de:	4313      	orrs	r3, r2
 80043e0:	d055      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043ee:	d033      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80043f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043f4:	d82c      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80043f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fa:	d02f      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004400:	d826      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004402:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004406:	d02b      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004408:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800440c:	d820      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800440e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004412:	d012      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004418:	d81a      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d022      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800441e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004422:	d115      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004428:	3308      	adds	r3, #8
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fbff 	bl	8004c30 <RCCEx_PLL2_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004438:	e015      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800443e:	3328      	adds	r3, #40	; 0x28
 8004440:	2102      	movs	r1, #2
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fca6 	bl	8004d94 <RCCEx_PLL3_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800444e:	e00a      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004456:	e006      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004458:	bf00      	nop
 800445a:	e004      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800445c:	bf00      	nop
 800445e:	e002      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004460:	bf00      	nop
 8004462:	e000      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800446e:	4b39      	ldr	r3, [pc, #228]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004472:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	4a35      	ldr	r2, [pc, #212]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004480:	430b      	orrs	r3, r1
 8004482:	6553      	str	r3, [r2, #84]	; 0x54
 8004484:	e003      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800448a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800449a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800449e:	2300      	movs	r3, #0
 80044a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4313      	orrs	r3, r2
 80044ac:	d058      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80044ba:	d033      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80044bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80044c0:	d82c      	bhi.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c6:	d02f      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80044c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044cc:	d826      	bhi.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044d2:	d02b      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80044d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044d8:	d820      	bhi.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044de:	d012      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80044e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e4:	d81a      	bhi.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d022      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80044ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ee:	d115      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f4:	3308      	adds	r3, #8
 80044f6:	2100      	movs	r1, #0
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fb99 	bl	8004c30 <RCCEx_PLL2_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004504:	e015      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450a:	3328      	adds	r3, #40	; 0x28
 800450c:	2102      	movs	r1, #2
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fc40 	bl	8004d94 <RCCEx_PLL3_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800451a:	e00a      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004522:	e006      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004524:	bf00      	nop
 8004526:	e004      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004528:	bf00      	nop
 800452a:	e002      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800452c:	bf00      	nop
 800452e:	e000      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10e      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800453c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800454a:	4a02      	ldr	r2, [pc, #8]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800454c:	430b      	orrs	r3, r1
 800454e:	6593      	str	r3, [r2, #88]	; 0x58
 8004550:	e006      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004552:	bf00      	nop
 8004554:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800455c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004568:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800456c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004570:	2300      	movs	r3, #0
 8004572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004576:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800457a:	460b      	mov	r3, r1
 800457c:	4313      	orrs	r3, r2
 800457e:	d055      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004584:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004588:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800458c:	d033      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800458e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004592:	d82c      	bhi.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004598:	d02f      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800459a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800459e:	d826      	bhi.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045a4:	d02b      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80045a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045aa:	d820      	bhi.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045b0:	d012      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80045b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045b6:	d81a      	bhi.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d022      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80045bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c0:	d115      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c6:	3308      	adds	r3, #8
 80045c8:	2100      	movs	r1, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fb30 	bl	8004c30 <RCCEx_PLL2_Config>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80045d6:	e015      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045dc:	3328      	adds	r3, #40	; 0x28
 80045de:	2102      	movs	r1, #2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fbd7 	bl	8004d94 <RCCEx_PLL3_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80045ec:	e00a      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045f4:	e006      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80045f6:	bf00      	nop
 80045f8:	e004      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80045fa:	bf00      	nop
 80045fc:	e002      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80045fe:	bf00      	nop
 8004600:	e000      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004604:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800460c:	4ba1      	ldr	r3, [pc, #644]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004618:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800461c:	4a9d      	ldr	r2, [pc, #628]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800461e:	430b      	orrs	r3, r1
 8004620:	6593      	str	r3, [r2, #88]	; 0x58
 8004622:	e003      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004628:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f002 0308 	and.w	r3, r2, #8
 8004638:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800463c:	2300      	movs	r3, #0
 800463e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004642:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004646:	460b      	mov	r3, r1
 8004648:	4313      	orrs	r3, r2
 800464a:	d01e      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800464c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004658:	d10c      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800465a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465e:	3328      	adds	r3, #40	; 0x28
 8004660:	2102      	movs	r1, #2
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fb96 	bl	8004d94 <RCCEx_PLL3_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004674:	4b87      	ldr	r3, [pc, #540]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004678:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800467c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004684:	4a83      	ldr	r2, [pc, #524]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004686:	430b      	orrs	r3, r1
 8004688:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f002 0310 	and.w	r3, r2, #16
 8004696:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800469a:	2300      	movs	r3, #0
 800469c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80046a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80046a4:	460b      	mov	r3, r1
 80046a6:	4313      	orrs	r3, r2
 80046a8:	d01e      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b6:	d10c      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046bc:	3328      	adds	r3, #40	; 0x28
 80046be:	2102      	movs	r1, #2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fb67 	bl	8004d94 <RCCEx_PLL3_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046d2:	4b70      	ldr	r3, [pc, #448]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e2:	4a6c      	ldr	r2, [pc, #432]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80046f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046f8:	2300      	movs	r3, #0
 80046fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004702:	460b      	mov	r3, r1
 8004704:	4313      	orrs	r3, r2
 8004706:	d03e      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004714:	d022      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004716:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800471a:	d81b      	bhi.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004724:	d00b      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004726:	e015      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472c:	3308      	adds	r3, #8
 800472e:	2100      	movs	r1, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fa7d 	bl	8004c30 <RCCEx_PLL2_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800473c:	e00f      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004742:	3328      	adds	r3, #40	; 0x28
 8004744:	2102      	movs	r1, #2
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fb24 	bl	8004d94 <RCCEx_PLL3_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004752:	e004      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800475a:	e000      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800475c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800475e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10b      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004766:	4b4b      	ldr	r3, [pc, #300]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004772:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004776:	4a47      	ldr	r2, [pc, #284]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004778:	430b      	orrs	r3, r1
 800477a:	6593      	str	r3, [r2, #88]	; 0x58
 800477c:	e003      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004782:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004792:	67bb      	str	r3, [r7, #120]	; 0x78
 8004794:	2300      	movs	r3, #0
 8004796:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004798:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800479c:	460b      	mov	r3, r1
 800479e:	4313      	orrs	r3, r2
 80047a0:	d03b      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047ae:	d01f      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80047b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047b4:	d818      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80047b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ba:	d003      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80047bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047c0:	d007      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80047c2:	e011      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c4:	4b33      	ldr	r3, [pc, #204]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	4a32      	ldr	r2, [pc, #200]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80047d0:	e00f      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d6:	3328      	adds	r3, #40	; 0x28
 80047d8:	2101      	movs	r1, #1
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fada 	bl	8004d94 <RCCEx_PLL3_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80047e6:	e004      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047ee:	e000      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80047f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10b      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047fa:	4b26      	ldr	r3, [pc, #152]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	4a22      	ldr	r2, [pc, #136]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800480c:	430b      	orrs	r3, r1
 800480e:	6553      	str	r3, [r2, #84]	; 0x54
 8004810:	e003      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004816:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004822:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004826:	673b      	str	r3, [r7, #112]	; 0x70
 8004828:	2300      	movs	r3, #0
 800482a:	677b      	str	r3, [r7, #116]	; 0x74
 800482c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004830:	460b      	mov	r3, r1
 8004832:	4313      	orrs	r3, r2
 8004834:	d034      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004844:	d007      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004846:	e011      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004848:	4b12      	ldr	r3, [pc, #72]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	4a11      	ldr	r2, [pc, #68]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800484e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004852:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004854:	e00e      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485a:	3308      	adds	r3, #8
 800485c:	2102      	movs	r1, #2
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f9e6 	bl	8004c30 <RCCEx_PLL2_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800486a:	e003      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10d      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800487e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488a:	4a02      	ldr	r2, [pc, #8]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800488c:	430b      	orrs	r3, r1
 800488e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004890:	e006      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004892:	bf00      	nop
 8004894:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800489c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80048ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80048ae:	2300      	movs	r3, #0
 80048b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80048b6:	460b      	mov	r3, r1
 80048b8:	4313      	orrs	r3, r2
 80048ba:	d00c      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c0:	3328      	adds	r3, #40	; 0x28
 80048c2:	2102      	movs	r1, #2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fa65 	bl	8004d94 <RCCEx_PLL3_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80048e2:	663b      	str	r3, [r7, #96]	; 0x60
 80048e4:	2300      	movs	r3, #0
 80048e6:	667b      	str	r3, [r7, #100]	; 0x64
 80048e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80048ec:	460b      	mov	r3, r1
 80048ee:	4313      	orrs	r3, r2
 80048f0:	d038      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048fe:	d018      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004904:	d811      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800490a:	d014      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800490c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004910:	d80b      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004912:	2b00      	cmp	r3, #0
 8004914:	d011      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491a:	d106      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491c:	4bc3      	ldr	r3, [pc, #780]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	4ac2      	ldr	r2, [pc, #776]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004928:	e008      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004930:	e004      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004932:	bf00      	nop
 8004934:	e002      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004936:	bf00      	nop
 8004938:	e000      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800493a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004944:	4bb9      	ldr	r3, [pc, #740]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004948:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004954:	4ab5      	ldr	r2, [pc, #724]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004956:	430b      	orrs	r3, r1
 8004958:	6553      	str	r3, [r2, #84]	; 0x54
 800495a:	e003      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004960:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004970:	65bb      	str	r3, [r7, #88]	; 0x58
 8004972:	2300      	movs	r3, #0
 8004974:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004976:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800497a:	460b      	mov	r3, r1
 800497c:	4313      	orrs	r3, r2
 800497e:	d009      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004980:	4baa      	ldr	r3, [pc, #680]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004984:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498e:	4aa7      	ldr	r2, [pc, #668]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004990:	430b      	orrs	r3, r1
 8004992:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80049a0:	653b      	str	r3, [r7, #80]	; 0x50
 80049a2:	2300      	movs	r3, #0
 80049a4:	657b      	str	r3, [r7, #84]	; 0x54
 80049a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80049aa:	460b      	mov	r3, r1
 80049ac:	4313      	orrs	r3, r2
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80049b0:	4b9e      	ldr	r3, [pc, #632]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80049b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80049c0:	4a9a      	ldr	r2, [pc, #616]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049c2:	430b      	orrs	r3, r1
 80049c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80049d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d4:	2300      	movs	r3, #0
 80049d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80049dc:	460b      	mov	r3, r1
 80049de:	4313      	orrs	r3, r2
 80049e0:	d009      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049e2:	4b92      	ldr	r3, [pc, #584]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80049ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049f0:	4a8e      	ldr	r2, [pc, #568]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004a02:	643b      	str	r3, [r7, #64]	; 0x40
 8004a04:	2300      	movs	r3, #0
 8004a06:	647b      	str	r3, [r7, #68]	; 0x44
 8004a08:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	d00e      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a12:	4b86      	ldr	r3, [pc, #536]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	4a85      	ldr	r2, [pc, #532]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a1c:	6113      	str	r3, [r2, #16]
 8004a1e:	4b83      	ldr	r3, [pc, #524]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a20:	6919      	ldr	r1, [r3, #16]
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004a2a:	4a80      	ldr	r2, [pc, #512]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a3e:	2300      	movs	r3, #0
 8004a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a42:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004a46:	460b      	mov	r3, r1
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	d009      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a4c:	4b77      	ldr	r3, [pc, #476]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a50:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	4a74      	ldr	r2, [pc, #464]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6e:	2300      	movs	r3, #0
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
 8004a72:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004a76:	460b      	mov	r3, r1
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a7c:	4b6b      	ldr	r3, [pc, #428]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a8c:	4a67      	ldr	r2, [pc, #412]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aa4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	d011      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f8ba 	bl	8004c30 <RCCEx_PLL2_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ace:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	2100      	movs	r1, #0
 8004adc:	6239      	str	r1, [r7, #32]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4313      	orrs	r3, r2
 8004aec:	d011      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af2:	3308      	adds	r3, #8
 8004af4:	2101      	movs	r1, #1
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f89a 	bl	8004c30 <RCCEx_PLL2_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	61b9      	str	r1, [r7, #24]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	d011      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b32:	3308      	adds	r3, #8
 8004b34:	2102      	movs	r1, #2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f87a 	bl	8004c30 <RCCEx_PLL2_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	6139      	str	r1, [r7, #16]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	d011      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b72:	3328      	adds	r3, #40	; 0x28
 8004b74:	2100      	movs	r1, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 f90c 	bl	8004d94 <RCCEx_PLL3_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4313      	orrs	r3, r2
 8004bac:	d011      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb2:	3328      	adds	r3, #40	; 0x28
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 f8ec 	bl	8004d94 <RCCEx_PLL3_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	2100      	movs	r1, #0
 8004bdc:	6039      	str	r1, [r7, #0]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	607b      	str	r3, [r7, #4]
 8004be4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004be8:	460b      	mov	r3, r1
 8004bea:	4313      	orrs	r3, r2
 8004bec:	d011      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf2:	3328      	adds	r3, #40	; 0x28
 8004bf4:	2102      	movs	r1, #2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f8cc 	bl	8004d94 <RCCEx_PLL3_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004c12:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004c26:	46bd      	mov	sp, r7
 8004c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2c:	58024400 	.word	0x58024400

08004c30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c3e:	4b53      	ldr	r3, [pc, #332]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d101      	bne.n	8004c4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e099      	b.n	8004d82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c4e:	4b4f      	ldr	r3, [pc, #316]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a4e      	ldr	r2, [pc, #312]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004c54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5a:	f7fc f991 	bl	8000f80 <HAL_GetTick>
 8004c5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c60:	e008      	b.n	8004c74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c62:	f7fc f98d 	bl	8000f80 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e086      	b.n	8004d82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c74:	4b45      	ldr	r3, [pc, #276]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f0      	bne.n	8004c62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c80:	4b42      	ldr	r3, [pc, #264]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	031b      	lsls	r3, r3, #12
 8004c8e:	493f      	ldr	r1, [pc, #252]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	628b      	str	r3, [r1, #40]	; 0x28
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	025b      	lsls	r3, r3, #9
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	041b      	lsls	r3, r3, #16
 8004cb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	061b      	lsls	r3, r3, #24
 8004cc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cc4:	4931      	ldr	r1, [pc, #196]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cca:	4b30      	ldr	r3, [pc, #192]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	492d      	ldr	r1, [pc, #180]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cdc:	4b2b      	ldr	r3, [pc, #172]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	f023 0220 	bic.w	r2, r3, #32
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	4928      	ldr	r1, [pc, #160]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cee:	4b27      	ldr	r3, [pc, #156]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	4a26      	ldr	r2, [pc, #152]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cf4:	f023 0310 	bic.w	r3, r3, #16
 8004cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cfa:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <RCCEx_PLL2_Config+0x160>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	69d2      	ldr	r2, [r2, #28]
 8004d06:	00d2      	lsls	r2, r2, #3
 8004d08:	4920      	ldr	r1, [pc, #128]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d0e:	4b1f      	ldr	r3, [pc, #124]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	4a1e      	ldr	r2, [pc, #120]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d14:	f043 0310 	orr.w	r3, r3, #16
 8004d18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d106      	bne.n	8004d2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d20:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4a19      	ldr	r2, [pc, #100]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d2c:	e00f      	b.n	8004d4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d106      	bne.n	8004d42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d34:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d40:	e005      	b.n	8004d4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	4a11      	ldr	r2, [pc, #68]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a0e      	ldr	r2, [pc, #56]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5a:	f7fc f911 	bl	8000f80 <HAL_GetTick>
 8004d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d60:	e008      	b.n	8004d74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d62:	f7fc f90d 	bl	8000f80 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e006      	b.n	8004d82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d74:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <RCCEx_PLL2_Config+0x15c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	ffff0007 	.word	0xffff0007

08004d94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004da2:	4b53      	ldr	r3, [pc, #332]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d101      	bne.n	8004db2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e099      	b.n	8004ee6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004db2:	4b4f      	ldr	r3, [pc, #316]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a4e      	ldr	r2, [pc, #312]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dbe:	f7fc f8df 	bl	8000f80 <HAL_GetTick>
 8004dc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dc4:	e008      	b.n	8004dd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dc6:	f7fc f8db 	bl	8000f80 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e086      	b.n	8004ee6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dd8:	4b45      	ldr	r3, [pc, #276]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004de4:	4b42      	ldr	r3, [pc, #264]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	051b      	lsls	r3, r3, #20
 8004df2:	493f      	ldr	r1, [pc, #252]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	628b      	str	r3, [r1, #40]	; 0x28
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	025b      	lsls	r3, r3, #9
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	041b      	lsls	r3, r3, #16
 8004e16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	061b      	lsls	r3, r3, #24
 8004e24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e28:	4931      	ldr	r1, [pc, #196]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e2e:	4b30      	ldr	r3, [pc, #192]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	492d      	ldr	r1, [pc, #180]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e40:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	4928      	ldr	r1, [pc, #160]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e52:	4b27      	ldr	r3, [pc, #156]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	4a26      	ldr	r2, [pc, #152]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e5e:	4b24      	ldr	r3, [pc, #144]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e62:	4b24      	ldr	r3, [pc, #144]	; (8004ef4 <RCCEx_PLL3_Config+0x160>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	69d2      	ldr	r2, [r2, #28]
 8004e6a:	00d2      	lsls	r2, r2, #3
 8004e6c:	4920      	ldr	r1, [pc, #128]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e72:	4b1f      	ldr	r3, [pc, #124]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	4a1e      	ldr	r2, [pc, #120]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e84:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e90:	e00f      	b.n	8004eb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d106      	bne.n	8004ea6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e98:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	4a14      	ldr	r2, [pc, #80]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004e9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ea4:	e005      	b.n	8004eb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	4a11      	ldr	r2, [pc, #68]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004eac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ebe:	f7fc f85f 	bl	8000f80 <HAL_GetTick>
 8004ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ec4:	e008      	b.n	8004ed8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ec6:	f7fc f85b 	bl	8000f80 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e006      	b.n	8004ee6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <RCCEx_PLL3_Config+0x15c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	ffff0007 	.word	0xffff0007

08004ef8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e054      	b.n	8004fb4 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	7a5b      	ldrb	r3, [r3, #9]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d105      	bne.n	8004f20 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fb fe8a 	bl	8000c34 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f023 0120 	bic.w	r1, r3, #32
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0204 	orr.w	r2, r2, #4
 8004f4a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f56:	2b40      	cmp	r3, #64	; 0x40
 8004f58:	d104      	bne.n	8004f64 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e027      	b.n	8004fb4 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004f64:	f7fc f80c 	bl	8000f80 <HAL_GetTick>
 8004f68:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004f6a:	e015      	b.n	8004f98 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004f6c:	f7fc f808 	bl	8000f80 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d90e      	bls.n	8004f98 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d107      	bne.n	8004f98 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2202      	movs	r2, #2
 8004f92:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e00d      	b.n	8004fb4 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d0e2      	beq.n	8004f6c <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	4d0d      	ldr	r5, [pc, #52]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc0:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc2:	1b64      	subs	r4, r4, r5
 8004fc4:	10a4      	asrs	r4, r4, #2
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	42a6      	cmp	r6, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	4d0b      	ldr	r5, [pc, #44]	; (8004ffc <__libc_init_array+0x40>)
 8004fce:	4c0c      	ldr	r4, [pc, #48]	; (8005000 <__libc_init_array+0x44>)
 8004fd0:	f000 f82e 	bl	8005030 <_init>
 8004fd4:	1b64      	subs	r4, r4, r5
 8004fd6:	10a4      	asrs	r4, r4, #2
 8004fd8:	2600      	movs	r6, #0
 8004fda:	42a6      	cmp	r6, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe4:	4798      	blx	r3
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fee:	4798      	blx	r3
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	080050b4 	.word	0x080050b4
 8004ff8:	080050b4 	.word	0x080050b4
 8004ffc:	080050b4 	.word	0x080050b4
 8005000:	080050b8 	.word	0x080050b8

08005004 <memcpy>:
 8005004:	440a      	add	r2, r1
 8005006:	4291      	cmp	r1, r2
 8005008:	f100 33ff 	add.w	r3, r0, #4294967295
 800500c:	d100      	bne.n	8005010 <memcpy+0xc>
 800500e:	4770      	bx	lr
 8005010:	b510      	push	{r4, lr}
 8005012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800501a:	4291      	cmp	r1, r2
 800501c:	d1f9      	bne.n	8005012 <memcpy+0xe>
 800501e:	bd10      	pop	{r4, pc}

08005020 <memset>:
 8005020:	4402      	add	r2, r0
 8005022:	4603      	mov	r3, r0
 8005024:	4293      	cmp	r3, r2
 8005026:	d100      	bne.n	800502a <memset+0xa>
 8005028:	4770      	bx	lr
 800502a:	f803 1b01 	strb.w	r1, [r3], #1
 800502e:	e7f9      	b.n	8005024 <memset+0x4>

08005030 <_init>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	bf00      	nop
 8005034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005036:	bc08      	pop	{r3}
 8005038:	469e      	mov	lr, r3
 800503a:	4770      	bx	lr

0800503c <_fini>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	bf00      	nop
 8005040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005042:	bc08      	pop	{r3}
 8005044:	469e      	mov	lr, r3
 8005046:	4770      	bx	lr

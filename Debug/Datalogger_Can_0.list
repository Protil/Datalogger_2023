
Datalogger_Can_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058f0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001928  08005b88  08005b88  00015b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  080074b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000134  24000078  0800752c  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  240001ac  0800752c  000201ac  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ebe1  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001cc9  00000000  00000000  0002ec83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b48  00000000  00000000  00030950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a70  00000000  00000000  00031498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035da5  00000000  00000000  00031f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000cbee  00000000  00000000  00067cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001588ce  00000000  00000000  0007489b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001cd169  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000327c  00000000  00000000  001cd1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005b70 	.word	0x08005b70

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	08005b70 	.word	0x08005b70

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_d2lz>:
 8000650:	b508      	push	{r3, lr}
 8000652:	4602      	mov	r2, r0
 8000654:	460b      	mov	r3, r1
 8000656:	ec43 2b17 	vmov	d7, r2, r3
 800065a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800065e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000662:	d403      	bmi.n	800066c <__aeabi_d2lz+0x1c>
 8000664:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000668:	f000 b80a 	b.w	8000680 <__aeabi_d2ulz>
 800066c:	eeb1 7b47 	vneg.f64	d7, d7
 8000670:	ec51 0b17 	vmov	r0, r1, d7
 8000674:	f000 f804 	bl	8000680 <__aeabi_d2ulz>
 8000678:	4240      	negs	r0, r0
 800067a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800067e:	bd08      	pop	{r3, pc}

08000680 <__aeabi_d2ulz>:
 8000680:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006b0 <__aeabi_d2ulz+0x30>
 8000684:	ec41 0b17 	vmov	d7, r0, r1
 8000688:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80006b8 <__aeabi_d2ulz+0x38>
 800068c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000690:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000694:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000698:	eea4 7b45 	vfms.f64	d7, d4, d5
 800069c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006a0:	ee16 1a10 	vmov	r1, s12
 80006a4:	ee17 0a90 	vmov	r0, s15
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	f3af 8000 	nop.w
 80006b0:	00000000 	.word	0x00000000
 80006b4:	3df00000 	.word	0x3df00000
 80006b8:	00000000 	.word	0x00000000
 80006bc:	41f00000 	.word	0x41f00000

080006c0 <send_message_CAN_double>:
	Error_Handler();
  }
}

void send_message_CAN_double(FDCAN_HandleTypeDef hfdcan, uint8_t id, double double_value, uint8_t power_of_10)
{
 80006c0:	b084      	sub	sp, #16
 80006c2:	b5b0      	push	{r4, r5, r7, lr}
 80006c4:	b092      	sub	sp, #72	; 0x48
 80006c6:	af02      	add	r7, sp, #8
 80006c8:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 80006cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80006d0:	ed87 0b00 	vstr	d0, [r7]
	uint8_t TxData[8] = {0};
 80006d4:	2300      	movs	r3, #0
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006d8:	2300      	movs	r3, #0
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
	FDCAN_TxHeaderTypeDef TxHeader;
    uint8_t number_of_bytes;

    int64_t value = (double_value * pow(10, power_of_10));
 80006dc:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 80006e0:	ee07 3a90 	vmov	s15, r3
 80006e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80006e8:	eeb0 1b47 	vmov.f64	d1, d7
 80006ec:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80006f0:	f004 ff7a 	bl	80055e8 <pow>
 80006f4:	eeb0 6b40 	vmov.f64	d6, d0
 80006f8:	ed97 7b00 	vldr	d7, [r7]
 80006fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000700:	ec51 0b17 	vmov	r0, r1, d7
 8000704:	f7ff ffa4 	bl	8000650 <__aeabi_d2lz>
 8000708:	4602      	mov	r2, r0
 800070a:	460b      	mov	r3, r1
 800070c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

    // Caso o valor seja negativo é necessario inverter-lo para a contagem de bytes
    // Caso isso não seja feito todo numero negativo retornara 8 bytes
    if (value < 0)
 8000710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000714:	2b00      	cmp	r3, #0
 8000716:	da0f      	bge.n	8000738 <send_message_CAN_double+0x78>
    {
    	number_of_bytes = minimum_normal_number_byte_size(-value);
 8000718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800071c:	2100      	movs	r1, #0
 800071e:	4254      	negs	r4, r2
 8000720:	eb61 0503 	sbc.w	r5, r1, r3
 8000724:	4622      	mov	r2, r4
 8000726:	462b      	mov	r3, r5
 8000728:	4610      	mov	r0, r2
 800072a:	4619      	mov	r1, r3
 800072c:	f000 f869 	bl	8000802 <minimum_normal_number_byte_size>
 8000730:	4603      	mov	r3, r0
 8000732:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000736:	e008      	b.n	800074a <send_message_CAN_double+0x8a>
    }
    else
    {
    	number_of_bytes = minimum_normal_number_byte_size(value);
 8000738:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800073c:	4610      	mov	r0, r2
 800073e:	4619      	mov	r1, r3
 8000740:	f000 f85f 	bl	8000802 <minimum_normal_number_byte_size>
 8000744:	4603      	mov	r3, r0
 8000746:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }


    number_of_bytes = 8;
 800074a:	2308      	movs	r3, #8
 800074c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint64_to_array_of_uint8(TxData, value, number_of_bytes);
 8000750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000754:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000758:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800075c:	9100      	str	r1, [sp, #0]
 800075e:	f000 f81e 	bl	800079e <uint64_to_array_of_uint8>
	configure_message_header(&TxHeader, id, number_of_bytes);
 8000762:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000766:	f897 10f0 	ldrb.w	r1, [r7, #240]	; 0xf0
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f890 	bl	8000894 <configure_message_header>

  // Boa pratica colocar dentro de um if (eu acho)
  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, TxData)!= HAL_OK)
 8000774:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	4619      	mov	r1, r3
 800077e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000782:	f001 f99e 	bl	8001ac2 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <send_message_CAN_double+0xd0>
  {
	Error_Handler();
 800078c:	f000 fc0c 	bl	8000fa8 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3740      	adds	r7, #64	; 0x40
 8000794:	46bd      	mov	sp, r7
 8000796:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800079a:	b004      	add	sp, #16
 800079c:	4770      	bx	lr

0800079e <uint64_to_array_of_uint8>:



// Função feita com base em https://www.educative.io/answers/how-to-convert-an-integer-into-a-specific-byte-array-in-cpp
void uint64_to_array_of_uint8(uint8_t *bytes, uint64_t value, uint8_t number_of_bytes)
{
 800079e:	b4f0      	push	{r4, r5, r6, r7}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	e9c7 2300 	strd	r2, r3, [r7]
  for (int byte_index = 0; byte_index < number_of_bytes; byte_index++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	e01d      	b.n	80007ec <uint64_to_array_of_uint8+0x4e>
  {
    bytes[byte_index] = (value >> ((number_of_bytes - byte_index - 1) * 8)) & 0xFF;
 80007b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	3b01      	subs	r3, #1
 80007ba:	00d9      	lsls	r1, r3, #3
 80007bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007c0:	f1c1 0620 	rsb	r6, r1, #32
 80007c4:	f1a1 0020 	sub.w	r0, r1, #32
 80007c8:	fa22 f401 	lsr.w	r4, r2, r1
 80007cc:	fa03 f606 	lsl.w	r6, r3, r6
 80007d0:	4334      	orrs	r4, r6
 80007d2:	fa23 f000 	lsr.w	r0, r3, r0
 80007d6:	4304      	orrs	r4, r0
 80007d8:	fa23 f501 	lsr.w	r5, r3, r1
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	4413      	add	r3, r2
 80007e2:	b2e2      	uxtb	r2, r4
 80007e4:	701a      	strb	r2, [r3, #0]
  for (int byte_index = 0; byte_index < number_of_bytes; byte_index++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbdc      	blt.n	80007b0 <uint64_to_array_of_uint8+0x12>
  }
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bcf0      	pop	{r4, r5, r6, r7}
 8000800:	4770      	bx	lr

08000802 <minimum_normal_number_byte_size>:

    return number_of_bytes;
}

uint8_t minimum_normal_number_byte_size(uint64_t value)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t numBytes = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	75fb      	strb	r3, [r7, #23]

    uint64_t copy_value = value;
 8000810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000814:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Desloca o numero de 8 em 8 bits até alcançar 0 e assim saber o tamanho minimo de bytes que pode representar o valor
    while (copy_value != 0)
 8000818:	e00e      	b.n	8000838 <minimum_normal_number_byte_size+0x36>
    {
    	copy_value >>= 8;
 800081a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	0a02      	lsrs	r2, r0, #8
 8000828:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800082c:	0a0b      	lsrs	r3, r1, #8
 800082e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        numBytes++;
 8000832:	7dfb      	ldrb	r3, [r7, #23]
 8000834:	3301      	adds	r3, #1
 8000836:	75fb      	strb	r3, [r7, #23]
    while (copy_value != 0)
 8000838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800083c:	4313      	orrs	r3, r2
 800083e:	d1ec      	bne.n	800081a <minimum_normal_number_byte_size+0x18>
    }

    // Garante que o numero de bytes retornado será o padrão de 1, 2, 4 ou 8
    if(numBytes != 1 && numBytes != 2 && numBytes != 4 && numBytes != 8)
 8000840:	7dfb      	ldrb	r3, [r7, #23]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d021      	beq.n	800088a <minimum_normal_number_byte_size+0x88>
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	2b02      	cmp	r3, #2
 800084a:	d01e      	beq.n	800088a <minimum_normal_number_byte_size+0x88>
 800084c:	7dfb      	ldrb	r3, [r7, #23]
 800084e:	2b04      	cmp	r3, #4
 8000850:	d01b      	beq.n	800088a <minimum_normal_number_byte_size+0x88>
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	2b08      	cmp	r3, #8
 8000856:	d018      	beq.n	800088a <minimum_normal_number_byte_size+0x88>
    {
    	if (numBytes < 1)
 8000858:	7dfb      	ldrb	r3, [r7, #23]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d101      	bne.n	8000862 <minimum_normal_number_byte_size+0x60>
    	{
    		numBytes = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	75fb      	strb	r3, [r7, #23]
    	}
        if(numBytes < 2)
 8000862:	7dfb      	ldrb	r3, [r7, #23]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d802      	bhi.n	800086e <minimum_normal_number_byte_size+0x6c>
        {
            numBytes = 2;
 8000868:	2302      	movs	r3, #2
 800086a:	75fb      	strb	r3, [r7, #23]
 800086c:	e00d      	b.n	800088a <minimum_normal_number_byte_size+0x88>
        }
        else if(numBytes < 4)
 800086e:	7dfb      	ldrb	r3, [r7, #23]
 8000870:	2b03      	cmp	r3, #3
 8000872:	d802      	bhi.n	800087a <minimum_normal_number_byte_size+0x78>
        {
            numBytes = 4;
 8000874:	2304      	movs	r3, #4
 8000876:	75fb      	strb	r3, [r7, #23]
 8000878:	e007      	b.n	800088a <minimum_normal_number_byte_size+0x88>
        }
        else if (numBytes < 8)
 800087a:	7dfb      	ldrb	r3, [r7, #23]
 800087c:	2b07      	cmp	r3, #7
 800087e:	d802      	bhi.n	8000886 <minimum_normal_number_byte_size+0x84>
        {
            numBytes = 8;
 8000880:	2308      	movs	r3, #8
 8000882:	75fb      	strb	r3, [r7, #23]
 8000884:	e001      	b.n	800088a <minimum_normal_number_byte_size+0x88>
        }
        else
        {
            Error_Handler();
 8000886:	f000 fb8f 	bl	8000fa8 <Error_Handler>
        }
    }
    return numBytes;
 800088a:	7dfb      	ldrb	r3, [r7, #23]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <configure_message_header>:

void configure_message_header(FDCAN_TxHeaderTypeDef *TxHeader, uint8_t id, uint8_t num_of_bytes)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
 80008a0:	4613      	mov	r3, r2
 80008a2:	70bb      	strb	r3, [r7, #2]
	uint32_t dataLength_ST_notation = number_of_bytes_to_ST_notation(num_of_bytes);
 80008a4:	78bb      	ldrb	r3, [r7, #2]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f868 	bl	800097c <number_of_bytes_to_ST_notation>
 80008ac:	60f8      	str	r0, [r7, #12]

	TxHeader->Identifier = id;
 80008ae:	78fa      	ldrb	r2, [r7, #3]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	601a      	str	r2, [r3, #0]
	TxHeader->IdType = FDCAN_STANDARD_ID;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = dataLength_ST_notation;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	60da      	str	r2, [r3, #12]
	TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_FD_CAN;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80008d8:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <array_of_uint8_to_uint64>:


// BEGIN Funções de Leitura

uint64_t array_of_uint8_to_uint64(uint8_t *bytes, uint8_t num_of_bytes)
{
 80008ee:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	70f9      	strb	r1, [r7, #3]
    uint64_t total_value = 0;
 80008fa:	f04f 0000 	mov.w	r0, #0
 80008fe:	f04f 0100 	mov.w	r1, #0
 8000902:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint64_t copy_of_byte_to_uint64;

    for(int byte_index = 0; byte_index < num_of_bytes; byte_index++)
 8000906:	2100      	movs	r1, #0
 8000908:	6179      	str	r1, [r7, #20]
 800090a:	e029      	b.n	8000960 <array_of_uint8_to_uint64+0x72>
    {
        // Quando não fazemos essa copia, o limite é de 4 bytes pois estoura o uint8_8, como descrito nesse post
        // https://stackoverflow.com/questions/4201301/warning-left-shift-count-width-of-type
    	copy_of_byte_to_uint64 = bytes[byte_index];
 800090c:	6979      	ldr	r1, [r7, #20]
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	4401      	add	r1, r0
 8000912:	7809      	ldrb	r1, [r1, #0]
 8000914:	b2c9      	uxtb	r1, r1
 8000916:	2000      	movs	r0, #0
 8000918:	468a      	mov	sl, r1
 800091a:	4683      	mov	fp, r0
 800091c:	e9c7 ab02 	strd	sl, fp, [r7, #8]

    	// Link para o entendimento https://learn.microsoft.com/en-us/cpp/cpp/left-shift-and-right-shift-operators-input-and-output?view=msvc-170
        total_value += ( copy_of_byte_to_uint64 << ((num_of_bytes - byte_index - 1) * 8));
 8000920:	78f8      	ldrb	r0, [r7, #3]
 8000922:	6979      	ldr	r1, [r7, #20]
 8000924:	1a41      	subs	r1, r0, r1
 8000926:	3901      	subs	r1, #1
 8000928:	00cc      	lsls	r4, r1, #3
 800092a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800092e:	f1a4 0620 	sub.w	r6, r4, #32
 8000932:	f1c4 0520 	rsb	r5, r4, #32
 8000936:	fa01 f304 	lsl.w	r3, r1, r4
 800093a:	fa00 f606 	lsl.w	r6, r0, r6
 800093e:	4333      	orrs	r3, r6
 8000940:	fa20 f505 	lsr.w	r5, r0, r5
 8000944:	432b      	orrs	r3, r5
 8000946:	fa00 f204 	lsl.w	r2, r0, r4
 800094a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800094e:	eb10 0802 	adds.w	r8, r0, r2
 8000952:	eb41 0903 	adc.w	r9, r1, r3
 8000956:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(int byte_index = 0; byte_index < num_of_bytes; byte_index++)
 800095a:	6979      	ldr	r1, [r7, #20]
 800095c:	3101      	adds	r1, #1
 800095e:	6179      	str	r1, [r7, #20]
 8000960:	78f9      	ldrb	r1, [r7, #3]
 8000962:	6978      	ldr	r0, [r7, #20]
 8000964:	4288      	cmp	r0, r1
 8000966:	dbd1      	blt.n	800090c <array_of_uint8_to_uint64+0x1e>
    }

   return total_value;
 8000968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800096c:	4610      	mov	r0, r2
 800096e:	4619      	mov	r1, r3
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000978:	4770      	bx	lr
	...

0800097c <number_of_bytes_to_ST_notation>:

// BEGIN Funções Auxiliares

// Caso o valor seja de 11 bytes, o retorno sera 0, isso devera ser consertado com o uso da FD_CAN, uma sugestão seria tratar o dado pra 11 virar 12, switch não suporta comparações no case
uint32_t number_of_bytes_to_ST_notation(uint8_t num_of_bytes)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	switch (num_of_bytes)
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b08      	cmp	r3, #8
 800098a:	d82f      	bhi.n	80009ec <number_of_bytes_to_ST_notation+0x70>
 800098c:	a201      	add	r2, pc, #4	; (adr r2, 8000994 <number_of_bytes_to_ST_notation+0x18>)
 800098e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000992:	bf00      	nop
 8000994:	080009b9 	.word	0x080009b9
 8000998:	080009bd 	.word	0x080009bd
 800099c:	080009c3 	.word	0x080009c3
 80009a0:	080009c9 	.word	0x080009c9
 80009a4:	080009cf 	.word	0x080009cf
 80009a8:	080009d5 	.word	0x080009d5
 80009ac:	080009db 	.word	0x080009db
 80009b0:	080009e1 	.word	0x080009e1
 80009b4:	080009e7 	.word	0x080009e7
	{
	case 0:
		return FDCAN_DLC_BYTES_0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	e01a      	b.n	80009f2 <number_of_bytes_to_ST_notation+0x76>
	case 1:
		return FDCAN_DLC_BYTES_1;
 80009bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c0:	e017      	b.n	80009f2 <number_of_bytes_to_ST_notation+0x76>
	case 2:
		return FDCAN_DLC_BYTES_2;
 80009c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009c6:	e014      	b.n	80009f2 <number_of_bytes_to_ST_notation+0x76>
	case 3:
		return FDCAN_DLC_BYTES_3;
 80009c8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80009cc:	e011      	b.n	80009f2 <number_of_bytes_to_ST_notation+0x76>
	case 4:
		return FDCAN_DLC_BYTES_4;
 80009ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80009d2:	e00e      	b.n	80009f2 <number_of_bytes_to_ST_notation+0x76>
	case 5:
		return FDCAN_DLC_BYTES_5;
 80009d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d8:	e00b      	b.n	80009f2 <number_of_bytes_to_ST_notation+0x76>
	case 6:
		return FDCAN_DLC_BYTES_6;
 80009da:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80009de:	e008      	b.n	80009f2 <number_of_bytes_to_ST_notation+0x76>
	case 7:
		return FDCAN_DLC_BYTES_7;
 80009e0:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 80009e4:	e005      	b.n	80009f2 <number_of_bytes_to_ST_notation+0x76>
	case 8:
		return FDCAN_DLC_BYTES_8;
 80009e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009ea:	e002      	b.n	80009f2 <number_of_bytes_to_ST_notation+0x76>
	default:
		// Não é a melhor forma de se lidar com o erro de usar mais bytes do que a CAN suporta
		Error_Handler();
 80009ec:	f000 fadc 	bl	8000fa8 <Error_Handler>
		return HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
	}
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop

080009fc <ST_notation_to_number_of_bytes>:

uint8_t ST_notation_to_number_of_bytes(uint32_t ST_notation)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	switch (ST_notation)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000a0a:	d04b      	beq.n	8000aa4 <ST_notation_to_number_of_bytes+0xa8>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000a12:	d849      	bhi.n	8000aa8 <ST_notation_to_number_of_bytes+0xac>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8000a1a:	d041      	beq.n	8000aa0 <ST_notation_to_number_of_bytes+0xa4>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8000a22:	d841      	bhi.n	8000aa8 <ST_notation_to_number_of_bytes+0xac>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000a2a:	d037      	beq.n	8000a9c <ST_notation_to_number_of_bytes+0xa0>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000a32:	d839      	bhi.n	8000aa8 <ST_notation_to_number_of_bytes+0xac>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a3a:	d02d      	beq.n	8000a98 <ST_notation_to_number_of_bytes+0x9c>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a42:	d831      	bhi.n	8000aa8 <ST_notation_to_number_of_bytes+0xac>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000a4a:	d023      	beq.n	8000a94 <ST_notation_to_number_of_bytes+0x98>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000a52:	d829      	bhi.n	8000aa8 <ST_notation_to_number_of_bytes+0xac>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000a5a:	d019      	beq.n	8000a90 <ST_notation_to_number_of_bytes+0x94>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000a62:	d821      	bhi.n	8000aa8 <ST_notation_to_number_of_bytes+0xac>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a6a:	d00f      	beq.n	8000a8c <ST_notation_to_number_of_bytes+0x90>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a72:	d819      	bhi.n	8000aa8 <ST_notation_to_number_of_bytes+0xac>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d004      	beq.n	8000a84 <ST_notation_to_number_of_bytes+0x88>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a80:	d002      	beq.n	8000a88 <ST_notation_to_number_of_bytes+0x8c>
 8000a82:	e011      	b.n	8000aa8 <ST_notation_to_number_of_bytes+0xac>
	{
	case FDCAN_DLC_BYTES_0:
		return 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	e012      	b.n	8000aae <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_1:
		return 1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e010      	b.n	8000aae <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_2:
		return 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	e00e      	b.n	8000aae <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_3:
		return 3;
 8000a90:	2303      	movs	r3, #3
 8000a92:	e00c      	b.n	8000aae <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_4:
		return 4;
 8000a94:	2304      	movs	r3, #4
 8000a96:	e00a      	b.n	8000aae <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_5:
		return 5;
 8000a98:	2305      	movs	r3, #5
 8000a9a:	e008      	b.n	8000aae <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_6:
		return 6;
 8000a9c:	2306      	movs	r3, #6
 8000a9e:	e006      	b.n	8000aae <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_7:
		return 7;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	e004      	b.n	8000aae <ST_notation_to_number_of_bytes+0xb2>
	case FDCAN_DLC_BYTES_8:
		return 8;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	e002      	b.n	8000aae <ST_notation_to_number_of_bytes+0xb2>
	default:
		// Não é a melhor forma de se lidar com o erro de usar mais bytes do que a CAN suporta
		Error_Handler();
 8000aa8:	f000 fa7e 	bl	8000fa8 <Error_Handler>
		return HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
	}
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_FDCAN_RxFifo0Callback>:

double receive;

// Ignorar, será uma das funções de leitura no futuro
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d032      	beq.n	8000b32 <HAL_FDCAN_RxFifo0Callback+0x7a>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <HAL_FDCAN_RxFifo0Callback+0x90>)
 8000ace:	4a1f      	ldr	r2, [pc, #124]	; (8000b4c <HAL_FDCAN_RxFifo0Callback+0x94>)
 8000ad0:	2140      	movs	r1, #64	; 0x40
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f001 f850 	bl	8001b78 <HAL_FDCAN_GetRxMessage>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000ade:	f000 fa63 	bl	8000fa8 <Error_Handler>
    }
    else
    {

    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f001 f9b4 	bl	8001e54 <HAL_FDCAN_ActivateNotification>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000af2:	f000 fa59 	bl	8000fa8 <Error_Handler>
    }

    number_of_bytes_received = ST_notation_to_number_of_bytes(RxHeader.DataLength);
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_FDCAN_RxFifo0Callback+0x94>)
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff7e 	bl	80009fc <ST_notation_to_number_of_bytes>
 8000b00:	4603      	mov	r3, r0
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_FDCAN_RxFifo0Callback+0x98>)
 8000b06:	701a      	strb	r2, [r3, #0]

	receive = (double)(int64_t)array_of_uint8_to_uint64(RxData, number_of_bytes_received)/10000;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_FDCAN_RxFifo0Callback+0x98>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <HAL_FDCAN_RxFifo0Callback+0x90>)
 8000b10:	f7ff feed 	bl	80008ee <array_of_uint8_to_uint64>
 8000b14:	4602      	mov	r2, r0
 8000b16:	460b      	mov	r3, r1
 8000b18:	4610      	mov	r0, r2
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f7ff fd6a 	bl	80005f4 <__aeabi_l2d>
 8000b20:	ec41 0b15 	vmov	d5, r0, r1
 8000b24:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000b40 <HAL_FDCAN_RxFifo0Callback+0x88>
 8000b28:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8000b2e:	ed83 7b00 	vstr	d7, [r3]

  }
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	f3af 8000 	nop.w
 8000b40:	00000000 	.word	0x00000000
 8000b44:	40c38800 	.word	0x40c38800
 8000b48:	24000184 	.word	0x24000184
 8000b4c:	2400015c 	.word	0x2400015c
 8000b50:	24000198 	.word	0x24000198
 8000b54:	240001a0 	.word	0x240001a0

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b0a7      	sub	sp, #156	; 0x9c
 8000b5c:	af26      	add	r7, sp, #152	; 0x98
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b5e:	f000 fbd5 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b62:	f000 f8cd 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b66:	f000 f9c7 	bl	8000ef8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000b6a:	f000 f949 	bl	8000e00 <MX_FDCAN1_Init>
  MX_RNG_Init();
 8000b6e:	f000 f9ad 	bl	8000ecc <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000b72:	4853      	ldr	r0, [pc, #332]	; (8000cc0 <main+0x168>)
 8000b74:	f000 ff7a 	bl	8001a6c <HAL_FDCAN_Start>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <main+0x2a>
  {
	  Error_Handler();
 8000b7e:	f000 fa13 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000b82:	2200      	movs	r2, #0
 8000b84:	2101      	movs	r1, #1
 8000b86:	484e      	ldr	r0, [pc, #312]	; (8000cc0 <main+0x168>)
 8000b88:	f001 f964 	bl	8001e54 <HAL_FDCAN_ActivateNotification>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <main+0x3e>
  {
    /* Notification Error */
    Error_Handler();
 8000b92:	f000 fa09 	bl	8000fa8 <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    rngHandle.Instance = RNG;
 8000b96:	4b4b      	ldr	r3, [pc, #300]	; (8000cc4 <main+0x16c>)
 8000b98:	4a4b      	ldr	r2, [pc, #300]	; (8000cc8 <main+0x170>)
 8000b9a:	601a      	str	r2, [r3, #0]
	    HAL_RNG_Init(&rngHandle);
 8000b9c:	4849      	ldr	r0, [pc, #292]	; (8000cc4 <main+0x16c>)
 8000b9e:	f004 fbf7 	bl	8005390 <HAL_RNG_Init>
	    // -((2**15)-1)
	    // ...
	    // -((2**63)-1)


	    if (HAL_RNG_GenerateRandomNumber(&rngHandle, &randomNumber) == HAL_OK)
 8000ba2:	494a      	ldr	r1, [pc, #296]	; (8000ccc <main+0x174>)
 8000ba4:	4847      	ldr	r0, [pc, #284]	; (8000cc4 <main+0x16c>)
 8000ba6:	f004 fc55 	bl	8005454 <HAL_RNG_GenerateRandomNumber>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d174      	bne.n	8000c9a <main+0x142>
	    {
	    	if (randomNumber < (UINT32_MAX /8))
 8000bb0:	4b46      	ldr	r3, [pc, #280]	; (8000ccc <main+0x174>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d207      	bcs.n	8000bcc <main+0x74>
			{
	    		sent = -127;
 8000bbc:	4944      	ldr	r1, [pc, #272]	; (8000cd0 <main+0x178>)
 8000bbe:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	e9c1 2300 	strd	r2, r3, [r1]
 8000bca:	e054      	b.n	8000c76 <main+0x11e>
			}
			else if (randomNumber < (UINT32_MAX /8 * 2))
 8000bcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ccc <main+0x174>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a40      	ldr	r2, [pc, #256]	; (8000cd4 <main+0x17c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d806      	bhi.n	8000be4 <main+0x8c>
			{
				sent = -32767;
 8000bd6:	493e      	ldr	r1, [pc, #248]	; (8000cd0 <main+0x178>)
 8000bd8:	4a3f      	ldr	r2, [pc, #252]	; (8000cd8 <main+0x180>)
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e9c1 2300 	strd	r2, r3, [r1]
 8000be2:	e048      	b.n	8000c76 <main+0x11e>
			}
			else if (randomNumber < (UINT32_MAX /8 * 3))
 8000be4:	4b39      	ldr	r3, [pc, #228]	; (8000ccc <main+0x174>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a3c      	ldr	r2, [pc, #240]	; (8000cdc <main+0x184>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d806      	bhi.n	8000bfc <main+0xa4>
			{
				sent = -8388607;
 8000bee:	4938      	ldr	r1, [pc, #224]	; (8000cd0 <main+0x178>)
 8000bf0:	a32f      	add	r3, pc, #188	; (adr r3, 8000cb0 <main+0x158>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	e9c1 2300 	strd	r2, r3, [r1]
 8000bfa:	e03c      	b.n	8000c76 <main+0x11e>
			}
			else if (randomNumber < (UINT32_MAX /8 * 4))
 8000bfc:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <main+0x174>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a37      	ldr	r2, [pc, #220]	; (8000ce0 <main+0x188>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d806      	bhi.n	8000c14 <main+0xbc>
			{
				sent = -2147483647;
 8000c06:	4932      	ldr	r1, [pc, #200]	; (8000cd0 <main+0x178>)
 8000c08:	4a36      	ldr	r2, [pc, #216]	; (8000ce4 <main+0x18c>)
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e9c1 2300 	strd	r2, r3, [r1]
 8000c12:	e030      	b.n	8000c76 <main+0x11e>
			}
			else if (randomNumber < (UINT32_MAX /8 * 5))
 8000c14:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <main+0x174>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a33      	ldr	r2, [pc, #204]	; (8000ce8 <main+0x190>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d807      	bhi.n	8000c2e <main+0xd6>
			{
				sent = -549755813887;
 8000c1e:	492c      	ldr	r1, [pc, #176]	; (8000cd0 <main+0x178>)
 8000c20:	f04f 0201 	mov.w	r2, #1
 8000c24:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8000c28:	e9c1 2300 	strd	r2, r3, [r1]
 8000c2c:	e023      	b.n	8000c76 <main+0x11e>
			}
			else if (randomNumber < (UINT32_MAX /8 * 6))
 8000c2e:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <main+0x174>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a2e      	ldr	r2, [pc, #184]	; (8000cec <main+0x194>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d806      	bhi.n	8000c46 <main+0xee>
			{
				sent = -140737488355327;
 8000c38:	4925      	ldr	r1, [pc, #148]	; (8000cd0 <main+0x178>)
 8000c3a:	f04f 0201 	mov.w	r2, #1
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <main+0x198>)
 8000c40:	e9c1 2300 	strd	r2, r3, [r1]
 8000c44:	e017      	b.n	8000c76 <main+0x11e>
			}
			else if (randomNumber < (UINT32_MAX /8 * 7))
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <main+0x174>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a2a      	ldr	r2, [pc, #168]	; (8000cf4 <main+0x19c>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d806      	bhi.n	8000c5e <main+0x106>
			{
				sent = -36028797018963967;
 8000c50:	491f      	ldr	r1, [pc, #124]	; (8000cd0 <main+0x178>)
 8000c52:	f04f 0201 	mov.w	r2, #1
 8000c56:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <main+0x1a0>)
 8000c58:	e9c1 2300 	strd	r2, r3, [r1]
 8000c5c:	e00b      	b.n	8000c76 <main+0x11e>
			}
			else if (randomNumber < (UINT32_MAX /8 * 8))
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <main+0x174>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f113 0f09 	cmn.w	r3, #9
 8000c66:	d806      	bhi.n	8000c76 <main+0x11e>
			{
				sent = -9223372036854775807;
 8000c68:	4919      	ldr	r1, [pc, #100]	; (8000cd0 <main+0x178>)
 8000c6a:	f04f 0201 	mov.w	r2, #1
 8000c6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000c72:	e9c1 2300 	strd	r2, r3, [r1]
			}

	    	send_message_CAN_double(hfdcan1, 12, -312.3123, 4);
 8000c76:	4c12      	ldr	r4, [pc, #72]	; (8000cc0 <main+0x168>)
 8000c78:	2304      	movs	r3, #4
 8000c7a:	9325      	str	r3, [sp, #148]	; 0x94
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	9324      	str	r3, [sp, #144]	; 0x90
 8000c80:	4668      	mov	r0, sp
 8000c82:	f104 0310 	add.w	r3, r4, #16
 8000c86:	2290      	movs	r2, #144	; 0x90
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f004 fc63 	bl	8005554 <memcpy>
 8000c8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c92:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8000cb8 <main+0x160>
 8000c96:	f7ff fd13 	bl	80006c0 <send_message_CAN_double>
	    }

	  // Luz usada só para saber que loop está acontecendo
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	4817      	ldr	r0, [pc, #92]	; (8000cfc <main+0x1a4>)
 8000c9e:	f002 f82a 	bl	8002cf6 <HAL_GPIO_TogglePin>


      HAL_Delay (250);
 8000ca2:	20fa      	movs	r0, #250	; 0xfa
 8000ca4:	f000 fbc4 	bl	8001430 <HAL_Delay>
	    rngHandle.Instance = RNG;
 8000ca8:	e775      	b.n	8000b96 <main+0x3e>
 8000caa:	bf00      	nop
 8000cac:	f3af 8000 	nop.w
 8000cb0:	ff800001 	.word	0xff800001
 8000cb4:	ffffffff 	.word	0xffffffff
 8000cb8:	2e48e8a7 	.word	0x2e48e8a7
 8000cbc:	c07384ff 	.word	0xc07384ff
 8000cc0:	24000094 	.word	0x24000094
 8000cc4:	24000148 	.word	0x24000148
 8000cc8:	48021800 	.word	0x48021800
 8000ccc:	2400018c 	.word	0x2400018c
 8000cd0:	24000190 	.word	0x24000190
 8000cd4:	3ffffffd 	.word	0x3ffffffd
 8000cd8:	ffff8001 	.word	0xffff8001
 8000cdc:	5ffffffc 	.word	0x5ffffffc
 8000ce0:	7ffffffb 	.word	0x7ffffffb
 8000ce4:	80000001 	.word	0x80000001
 8000ce8:	9ffffffa 	.word	0x9ffffffa
 8000cec:	bffffff9 	.word	0xbffffff9
 8000cf0:	ffff8000 	.word	0xffff8000
 8000cf4:	dffffff8 	.word	0xdffffff8
 8000cf8:	ff800000 	.word	0xff800000
 8000cfc:	58020c00 	.word	0x58020c00

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b09c      	sub	sp, #112	; 0x70
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	224c      	movs	r2, #76	; 0x4c
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f004 fc2e 	bl	8005570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2220      	movs	r2, #32
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f004 fc28 	bl	8005570 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d20:	2002      	movs	r0, #2
 8000d22:	f002 f803 	bl	8002d2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <SystemClock_Config+0xf8>)
 8000d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2e:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <SystemClock_Config+0xf8>)
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d36:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <SystemClock_Config+0xf8>)
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <SystemClock_Config+0xfc>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d48:	4a2c      	ldr	r2, [pc, #176]	; (8000dfc <SystemClock_Config+0xfc>)
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <SystemClock_Config+0xfc>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d5c:	bf00      	nop
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <SystemClock_Config+0xfc>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d6a:	d1f8      	bne.n	8000d5e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000d6c:	2322      	movs	r3, #34	; 0x22
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d74:	2340      	movs	r3, #64	; 0x40
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d80:	2300      	movs	r3, #0
 8000d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d84:	2304      	movs	r3, #4
 8000d86:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000d88:	2309      	movs	r3, #9
 8000d8a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 19;
 8000d90:	2313      	movs	r3, #19
 8000d92:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d98:	230c      	movs	r3, #12
 8000d9a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 fff8 	bl	8002da0 <HAL_RCC_OscConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000db6:	f000 f8f7 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dba:	233f      	movs	r3, #63	; 0x3f
 8000dbc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 fc38 	bl	8003654 <HAL_RCC_ClockConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000dea:	f000 f8dd 	bl	8000fa8 <Error_Handler>
  }
}
 8000dee:	bf00      	nop
 8000df0:	3770      	adds	r7, #112	; 0x70
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	58000400 	.word	0x58000400
 8000dfc:	58024800 	.word	0x58024800

08000e00 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e04:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e06:	4a30      	ldr	r2, [pc, #192]	; (8000ec8 <MX_FDCAN1_Init+0xc8>)
 8000e08:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e10:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8000e12:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000e18:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e1e:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000e30:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e32:	2202      	movs	r2, #2
 8000e34:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000e36:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e38:	220d      	movs	r2, #13
 8000e3a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e3e:	2202      	movs	r2, #2
 8000e40:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e50:	220d      	movs	r2, #13
 8000e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e56:	2202      	movs	r2, #2
 8000e58:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e6e:	2220      	movs	r2, #32
 8000e70:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e74:	2204      	movs	r2, #4
 8000e76:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e80:	2204      	movs	r2, #4
 8000e82:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e86:	2220      	movs	r2, #32
 8000e88:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e92:	2220      	movs	r2, #32
 8000e94:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e98:	2220      	movs	r2, #32
 8000e9a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000e9e:	2220      	movs	r2, #32
 8000ea0:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000eaa:	2204      	movs	r2, #4
 8000eac:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_FDCAN1_Init+0xc4>)
 8000eb0:	f000 fbfe 	bl	80016b0 <HAL_FDCAN_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000eba:	f000 f875 	bl	8000fa8 <Error_Handler>
     //Error_Handler();
  // }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	24000094 	.word	0x24000094
 8000ec8:	4000a000 	.word	0x4000a000

08000ecc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <MX_RNG_Init+0x24>)
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <MX_RNG_Init+0x28>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_RNG_Init+0x24>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <MX_RNG_Init+0x24>)
 8000ede:	f004 fa57 	bl	8005390 <HAL_RNG_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000ee8:	f000 f85e 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	24000134 	.word	0x24000134
 8000ef4:	48021800 	.word	0x48021800

08000ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1e:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f32:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2120      	movs	r1, #32
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_GPIO_Init+0xac>)
 8000f6e:	f001 fea9 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2140      	movs	r1, #64	; 0x40
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <MX_GPIO_Init+0xac>)
 8000f78:	f001 fea4 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f7c:	2360      	movs	r3, #96	; 0x60
 8000f7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_GPIO_Init+0xac>)
 8000f94:	f001 fce6 	bl	8002964 <HAL_GPIO_Init>

}
 8000f98:	bf00      	nop
 8000f9a:	3720      	adds	r7, #32
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	58024400 	.word	0x58024400
 8000fa4:	58020c00 	.word	0x58020c00

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <Error_Handler+0x8>
	...

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	58024400 	.word	0x58024400

08000fe8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0ba      	sub	sp, #232	; 0xe8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	22c0      	movs	r2, #192	; 0xc0
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f004 fab1 	bl	8005570 <memset>
  if(hfdcan->Instance==FDCAN1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a2b      	ldr	r2, [pc, #172]	; (80010c0 <HAL_FDCAN_MspInit+0xd8>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d14f      	bne.n	80010b8 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001018:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001024:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001028:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fe3f 	bl	8003cb4 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 800103c:	f7ff ffb4 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001040:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <HAL_FDCAN_MspInit+0xdc>)
 8001042:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001046:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <HAL_FDCAN_MspInit+0xdc>)
 8001048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_FDCAN_MspInit+0xdc>)
 8001052:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_FDCAN_MspInit+0xdc>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001064:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <HAL_FDCAN_MspInit+0xdc>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_FDCAN_MspInit+0xdc>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800107c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001080:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001096:	2309      	movs	r3, #9
 8001098:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010a0:	4619      	mov	r1, r3
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <HAL_FDCAN_MspInit+0xe0>)
 80010a4:	f001 fc5e 	bl	8002964 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	2013      	movs	r0, #19
 80010ae:	f000 faca 	bl	8001646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80010b2:	2013      	movs	r0, #19
 80010b4:	f000 fae1 	bl	800167a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	37e8      	adds	r7, #232	; 0xe8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	4000a000 	.word	0x4000a000
 80010c4:	58024400 	.word	0x58024400
 80010c8:	58020400 	.word	0x58020400

080010cc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0b4      	sub	sp, #208	; 0xd0
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	22c0      	movs	r2, #192	; 0xc0
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f004 fa47 	bl	8005570 <memset>
  if(hrng->Instance==RNG)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <HAL_RNG_MspInit+0x6c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d121      	bne.n	8001130 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80010ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fdd6 	bl	8003cb4 <HAL_RCCEx_PeriphCLKConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 800110e:	f7ff ff4b 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_RNG_MspInit+0x70>)
 8001114:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001118:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_RNG_MspInit+0x70>)
 800111a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800111e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_RNG_MspInit+0x70>)
 8001124:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	37d0      	adds	r7, #208	; 0xd0
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	48021800 	.word	0x48021800
 800113c:	58024400 	.word	0x58024400

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <NMI_Handler+0x4>

08001146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <HardFault_Handler+0x4>

0800114c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <MemManage_Handler+0x4>

08001152 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <UsageFault_Handler+0x4>

0800115e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118c:	f000 f930 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <FDCAN1_IT0_IRQHandler+0x10>)
 800119a:	f000 fed5 	bl	8001f48 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24000094 	.word	0x24000094

080011a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011ac:	4b37      	ldr	r3, [pc, #220]	; (800128c <SystemInit+0xe4>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b2:	4a36      	ldr	r2, [pc, #216]	; (800128c <SystemInit+0xe4>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <SystemInit+0xe8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	2b06      	cmp	r3, #6
 80011c6:	d807      	bhi.n	80011d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c8:	4b31      	ldr	r3, [pc, #196]	; (8001290 <SystemInit+0xe8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 030f 	bic.w	r3, r3, #15
 80011d0:	4a2f      	ldr	r2, [pc, #188]	; (8001290 <SystemInit+0xe8>)
 80011d2:	f043 0307 	orr.w	r3, r3, #7
 80011d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011d8:	4b2e      	ldr	r3, [pc, #184]	; (8001294 <SystemInit+0xec>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a2d      	ldr	r2, [pc, #180]	; (8001294 <SystemInit+0xec>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011e4:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <SystemInit+0xec>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <SystemInit+0xec>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4929      	ldr	r1, [pc, #164]	; (8001294 <SystemInit+0xec>)
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <SystemInit+0xf0>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <SystemInit+0xe8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <SystemInit+0xe8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 030f 	bic.w	r3, r3, #15
 800120a:	4a21      	ldr	r2, [pc, #132]	; (8001290 <SystemInit+0xe8>)
 800120c:	f043 0307 	orr.w	r3, r3, #7
 8001210:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <SystemInit+0xec>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001218:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <SystemInit+0xec>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <SystemInit+0xec>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <SystemInit+0xec>)
 8001226:	4a1d      	ldr	r2, [pc, #116]	; (800129c <SystemInit+0xf4>)
 8001228:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <SystemInit+0xec>)
 800122c:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <SystemInit+0xf8>)
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <SystemInit+0xec>)
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <SystemInit+0xfc>)
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <SystemInit+0xec>)
 8001238:	2200      	movs	r2, #0
 800123a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <SystemInit+0xec>)
 800123e:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <SystemInit+0xfc>)
 8001240:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <SystemInit+0xec>)
 8001244:	2200      	movs	r2, #0
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <SystemInit+0xec>)
 800124a:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <SystemInit+0xfc>)
 800124c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <SystemInit+0xec>)
 8001250:	2200      	movs	r2, #0
 8001252:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <SystemInit+0xec>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <SystemInit+0xec>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <SystemInit+0xec>)
 8001262:	2200      	movs	r2, #0
 8001264:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <SystemInit+0x100>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <SystemInit+0x104>)
 800126c:	4013      	ands	r3, r2
 800126e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001272:	d202      	bcs.n	800127a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <SystemInit+0x108>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <SystemInit+0x10c>)
 800127c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001280:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00
 8001290:	52002000 	.word	0x52002000
 8001294:	58024400 	.word	0x58024400
 8001298:	eaf6ed7f 	.word	0xeaf6ed7f
 800129c:	02020200 	.word	0x02020200
 80012a0:	01ff0000 	.word	0x01ff0000
 80012a4:	01010280 	.word	0x01010280
 80012a8:	5c001000 	.word	0x5c001000
 80012ac:	ffff0000 	.word	0xffff0000
 80012b0:	51008108 	.word	0x51008108
 80012b4:	52004000 	.word	0x52004000

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012bc:	f7ff ff74 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	; (80012f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	; (8001304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e6:	f004 f911 	bl	800550c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff fc35 	bl	8000b58 <main>
  bx  lr
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012f8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80012fc:	080074b8 	.word	0x080074b8
  ldr r2, =_sbss
 8001300:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001304:	240001ac 	.word	0x240001ac

08001308 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC3_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001312:	2003      	movs	r0, #3
 8001314:	f000 f98c 	bl	8001630 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001318:	f002 fb52 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
 800131c:	4602      	mov	r2, r0
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_Init+0x68>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	f003 030f 	and.w	r3, r3, #15
 8001328:	4913      	ldr	r1, [pc, #76]	; (8001378 <HAL_Init+0x6c>)
 800132a:	5ccb      	ldrb	r3, [r1, r3]
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_Init+0x68>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <HAL_Init+0x6c>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
 8001342:	f003 031f 	and.w	r3, r3, #31
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <HAL_Init+0x70>)
 800134e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_Init+0x74>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001356:	200f      	movs	r0, #15
 8001358:	f000 f814 	bl	8001384 <HAL_InitTick>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e002      	b.n	800136c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001366:	f7ff fe25 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	58024400 	.word	0x58024400
 8001378:	08005bd4 	.word	0x08005bd4
 800137c:	24000004 	.word	0x24000004
 8001380:	24000000 	.word	0x24000000

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_InitTick+0x60>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e021      	b.n	80013dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <HAL_InitTick+0x64>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_InitTick+0x60>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f971 	bl	8001696 <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00e      	b.n	80013dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d80a      	bhi.n	80013da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f000 f93b 	bl	8001646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <HAL_InitTick+0x68>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2400000c 	.word	0x2400000c
 80013e8:	24000000 	.word	0x24000000
 80013ec:	24000008 	.word	0x24000008

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	2400000c 	.word	0x2400000c
 8001414:	240001a8 	.word	0x240001a8

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	240001a8 	.word	0x240001a8

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff ffee 	bl	8001418 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffde 	bl	8001418 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2400000c 	.word	0x2400000c

08001478 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_GetREVID+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0c1b      	lsrs	r3, r3, #16
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	5c001000 	.word	0x5c001000

08001490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <__NVIC_SetPriorityGrouping+0x40>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x40>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00
 80014d4:	05fa0000 	.word	0x05fa0000

080014d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <__NVIC_GetPriorityGrouping+0x18>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 0307 	and.w	r3, r3, #7
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db0b      	blt.n	800151e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	f003 021f 	and.w	r2, r3, #31
 800150c:	4907      	ldr	r1, [pc, #28]	; (800152c <__NVIC_EnableIRQ+0x38>)
 800150e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	2001      	movs	r0, #1
 8001516:	fa00 f202 	lsl.w	r2, r0, r2
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000e100 	.word	0xe000e100

08001530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800153c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0a      	blt.n	800155a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	490c      	ldr	r1, [pc, #48]	; (800157c <__NVIC_SetPriority+0x4c>)
 800154a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	440b      	add	r3, r1
 8001554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001558:	e00a      	b.n	8001570 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4908      	ldr	r1, [pc, #32]	; (8001580 <__NVIC_SetPriority+0x50>)
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3b04      	subs	r3, #4
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	440b      	add	r3, r1
 800156e:	761a      	strb	r2, [r3, #24]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1c3 0307 	rsb	r3, r3, #7
 800159e:	2b04      	cmp	r3, #4
 80015a0:	bf28      	it	cs
 80015a2:	2304      	movcs	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3304      	adds	r3, #4
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d902      	bls.n	80015b4 <NVIC_EncodePriority+0x30>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3b03      	subs	r3, #3
 80015b2:	e000      	b.n	80015b6 <NVIC_EncodePriority+0x32>
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	4313      	orrs	r3, r2
         );
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	; 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015fc:	d301      	bcc.n	8001602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fe:	2301      	movs	r3, #1
 8001600:	e00f      	b.n	8001622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <SysTick_Config+0x40>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160a:	210f      	movs	r1, #15
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f7ff ff8e 	bl	8001530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SysTick_Config+0x40>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <SysTick_Config+0x40>)
 800161c:	2207      	movs	r2, #7
 800161e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	e000e010 	.word	0xe000e010

08001630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff29 	bl	8001490 <__NVIC_SetPriorityGrouping>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001654:	f7ff ff40 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 8001658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7ff ff90 	bl	8001584 <NVIC_EncodePriority>
 8001664:	4602      	mov	r2, r0
 8001666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff5f 	bl	8001530 <__NVIC_SetPriority>
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff33 	bl	80014f4 <__NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffa4 	bl	80015ec <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b098      	sub	sp, #96	; 0x60
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80016b8:	4a84      	ldr	r2, [pc, #528]	; (80018cc <HAL_FDCAN_Init+0x21c>)
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4611      	mov	r1, r2
 80016c0:	224c      	movs	r2, #76	; 0x4c
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 ff46 	bl	8005554 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e1c6      	b.n	8001a60 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a7e      	ldr	r2, [pc, #504]	; (80018d0 <HAL_FDCAN_Init+0x220>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d106      	bne.n	80016ea <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d106      	bne.n	8001704 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fc72 	bl	8000fe8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0210 	bic.w	r2, r2, #16
 8001712:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001714:	f7ff fe80 	bl	8001418 <HAL_GetTick>
 8001718:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800171a:	e014      	b.n	8001746 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800171c:	f7ff fe7c 	bl	8001418 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b0a      	cmp	r3, #10
 8001728:	d90d      	bls.n	8001746 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001730:	f043 0201 	orr.w	r2, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2203      	movs	r2, #3
 800173e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e18c      	b.n	8001a60 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b08      	cmp	r3, #8
 8001752:	d0e3      	beq.n	800171c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	699a      	ldr	r2, [r3, #24]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001764:	f7ff fe58 	bl	8001418 <HAL_GetTick>
 8001768:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800176a:	e014      	b.n	8001796 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800176c:	f7ff fe54 	bl	8001418 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b0a      	cmp	r3, #10
 8001778:	d90d      	bls.n	8001796 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2203      	movs	r2, #3
 800178e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e164      	b.n	8001a60 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0e3      	beq.n	800176c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	699a      	ldr	r2, [r3, #24]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0202 	orr.w	r2, r2, #2
 80017b2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7c1b      	ldrb	r3, [r3, #16]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d108      	bne.n	80017ce <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ca:	619a      	str	r2, [r3, #24]
 80017cc:	e007      	b.n	80017de <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699a      	ldr	r2, [r3, #24]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017dc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7c5b      	ldrb	r3, [r3, #17]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d108      	bne.n	80017f8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699a      	ldr	r2, [r3, #24]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017f4:	619a      	str	r2, [r3, #24]
 80017f6:	e007      	b.n	8001808 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001806:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7c9b      	ldrb	r3, [r3, #18]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d108      	bne.n	8001822 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800181e:	619a      	str	r2, [r3, #24]
 8001820:	e007      	b.n	8001832 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699a      	ldr	r2, [r3, #24]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001830:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699a      	ldr	r2, [r3, #24]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001856:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0210 	bic.w	r2, r2, #16
 8001866:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d108      	bne.n	8001882 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0204 	orr.w	r2, r2, #4
 800187e:	619a      	str	r2, [r3, #24]
 8001880:	e030      	b.n	80018e4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d02c      	beq.n	80018e4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d020      	beq.n	80018d4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699a      	ldr	r2, [r3, #24]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018a0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0210 	orr.w	r2, r2, #16
 80018b0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d114      	bne.n	80018e4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699a      	ldr	r2, [r3, #24]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0220 	orr.w	r2, r2, #32
 80018c8:	619a      	str	r2, [r3, #24]
 80018ca:	e00b      	b.n	80018e4 <HAL_FDCAN_Init+0x234>
 80018cc:	08005b88 	.word	0x08005b88
 80018d0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0220 	orr.w	r2, r2, #32
 80018e2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018f4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80018fc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	3b01      	subs	r3, #1
 8001906:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800190c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800190e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001918:	d115      	bne.n	8001946 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	3b01      	subs	r3, #1
 8001926:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001928:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	3b01      	subs	r3, #1
 8001930:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001932:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	3b01      	subs	r3, #1
 800193c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001942:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001944:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00a      	beq.n	8001964 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196c:	4413      	add	r3, r2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d011      	beq.n	8001996 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800197a:	f023 0107 	bic.w	r1, r3, #7
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	3360      	adds	r3, #96	; 0x60
 8001986:	443b      	add	r3, r7
 8001988:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	2b00      	cmp	r3, #0
 800199c:	d011      	beq.n	80019c2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80019a6:	f023 0107 	bic.w	r1, r3, #7
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	3360      	adds	r3, #96	; 0x60
 80019b2:	443b      	add	r3, r7
 80019b4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d012      	beq.n	80019f0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80019d2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	3360      	adds	r3, #96	; 0x60
 80019de:	443b      	add	r3, r7
 80019e0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80019e4:	011a      	lsls	r2, r3, #4
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d012      	beq.n	8001a1e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001a00:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	3360      	adds	r3, #96	; 0x60
 8001a0c:	443b      	add	r3, r7
 8001a0e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001a12:	021a      	lsls	r2, r3, #8
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <HAL_FDCAN_Init+0x3b8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d107      	bne.n	8001a38 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f022 0203 	bic.w	r2, r2, #3
 8001a36:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 fd83 	bl	800255c <FDCAN_CalcultateRamBlockAddresses>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001a5c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3760      	adds	r7, #96	; 0x60
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	4000a000 	.word	0x4000a000

08001a6c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d111      	bne.n	8001aa4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	e008      	b.n	8001ab6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001aaa:	f043 0204 	orr.w	r2, r3, #4
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
  }
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d141      	bne.n	8001b5e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ae2:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d109      	bne.n	8001afe <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001af0:	f043 0220 	orr.w	r2, r3, #32
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e038      	b.n	8001b70 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e026      	b.n	8001b70 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b2a:	0c1b      	lsrs	r3, r3, #16
 8001b2c:	f003 031f 	and.w	r3, r3, #31
 8001b30:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	68b9      	ldr	r1, [r7, #8]
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 fe95 	bl	8002868 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2101      	movs	r1, #1
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	409a      	lsls	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e008      	b.n	8001b70 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b64:	f043 0208 	orr.w	r2, r3, #8
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
  }
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b08b      	sub	sp, #44	; 0x2c
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b90:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001b92:	7efb      	ldrb	r3, [r7, #27]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	f040 814b 	bne.w	8001e30 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b40      	cmp	r3, #64	; 0x40
 8001b9e:	d14d      	bne.n	8001c3c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001ba8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d109      	bne.n	8001bc4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bb6:	f043 0220 	orr.w	r2, r3, #32
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e13e      	b.n	8001e42 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e12c      	b.n	8001e42 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001bf0:	0e1b      	lsrs	r3, r3, #24
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d10b      	bne.n	8001c12 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001c02:	0fdb      	lsrs	r3, r3, #31
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c0c:	d101      	bne.n	8001c12 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	4413      	add	r3, r2
 8001c24:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	69f9      	ldr	r1, [r7, #28]
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3a:	e069      	b.n	8001d10 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b41      	cmp	r3, #65	; 0x41
 8001c40:	d14d      	bne.n	8001cde <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001c4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c58:	f043 0220 	orr.w	r2, r3, #32
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0ed      	b.n	8001e42 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0db      	b.n	8001e42 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001c92:	0e1b      	lsrs	r3, r3, #24
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001ca4:	0fdb      	lsrs	r3, r3, #31
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cae:	d101      	bne.n	8001cb4 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd0:	69f9      	ldr	r1, [r7, #28]
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	e018      	b.n	8001d10 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d309      	bcc.n	8001cfc <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cee:	f043 0220 	orr.w	r2, r3, #32
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0a2      	b.n	8001e42 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d107      	bne.n	8001d34 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0c9b      	lsrs	r3, r3, #18
 8001d2a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e005      	b.n	8001d40 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	0e1b      	lsrs	r3, r3, #24
 8001d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0fda      	lsrs	r2, r3, #31
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	3304      	adds	r3, #4
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
 8001db2:	e00a      	b.n	8001dca <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	441a      	add	r2, r3
 8001dba:	6839      	ldr	r1, [r7, #0]
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	440b      	add	r3, r1
 8001dc0:	7812      	ldrb	r2, [r2, #0]
 8001dc2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	623b      	str	r3, [r7, #32]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	0c1b      	lsrs	r3, r3, #16
 8001dd0:	4a1f      	ldr	r2, [pc, #124]	; (8001e50 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d3eb      	bcc.n	8001db4 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b40      	cmp	r3, #64	; 0x40
 8001de0:	d105      	bne.n	8001dee <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001dec:	e01e      	b.n	8001e2c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b41      	cmp	r3, #65	; 0x41
 8001df2:	d105      	bne.n	8001e00 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001dfe:	e015      	b.n	8001e2c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b1f      	cmp	r3, #31
 8001e04:	d808      	bhi.n	8001e18 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e12:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001e16:	e009      	b.n	8001e2c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 021f 	and.w	r2, r3, #31
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2101      	movs	r1, #1
 8001e24:	fa01 f202 	lsl.w	r2, r1, r2
 8001e28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e008      	b.n	8001e42 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e36:	f043 0208 	orr.w	r2, r3, #8
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
  }
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	372c      	adds	r7, #44	; 0x2c
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	08005be4 	.word	0x08005be4

08001e54 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001e66:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d002      	beq.n	8001e74 <HAL_FDCAN_ActivateNotification+0x20>
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d155      	bne.n	8001f20 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d108      	bne.n	8001e94 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e92:	e014      	b.n	8001ebe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d108      	bne.n	8001eb6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0202 	orr.w	r2, r2, #2
 8001eb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001eb4:	e003      	b.n	8001ebe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2203      	movs	r2, #3
 8001ebc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_FDCAN_ActivateNotification+0xec>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	430b      	orrs	r3, r1
 8001f0c:	6553      	str	r3, [r2, #84]	; 0x54
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	0f9b      	lsrs	r3, r3, #30
 8001f16:	490b      	ldr	r1, [pc, #44]	; (8001f44 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e008      	b.n	8001f32 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f26:	f043 0202 	orr.w	r2, r3, #2
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	3fcfffff 	.word	0x3fcfffff
 8001f44:	4000a800 	.word	0x4000a800

08001f48 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b096      	sub	sp, #88	; 0x58
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001f50:	4b9a      	ldr	r3, [pc, #616]	; (80021bc <HAL_FDCAN_IRQHandler+0x274>)
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	079b      	lsls	r3, r3, #30
 8001f56:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001f58:	4b98      	ldr	r3, [pc, #608]	; (80021bc <HAL_FDCAN_IRQHandler+0x274>)
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	079b      	lsls	r3, r3, #30
 8001f5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f60:	4013      	ands	r3, r2
 8001f62:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001f6e:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001f78:	4013      	ands	r3, r2
 8001f7a:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f90:	4013      	ands	r3, r2
 8001f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fa8:	4013      	ands	r3, r2
 8001faa:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001fb6:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fca:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001fce:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001fd8:	4013      	ands	r3, r2
 8001fda:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d010      	beq.n	800201a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800200c:	651a      	str	r2, [r3, #80]	; 0x50
 800200e:	4b6b      	ldr	r3, [pc, #428]	; (80021bc <HAL_FDCAN_IRQHandler+0x274>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fa54 	bl	80024c2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800201a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201c:	0a9b      	lsrs	r3, r3, #10
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01d      	beq.n	8002062 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002028:	0a9b      	lsrs	r3, r3, #10
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d017      	beq.n	8002062 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800203a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002046:	4013      	ands	r3, r2
 8002048:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002052:	651a      	str	r2, [r3, #80]	; 0x50
 8002054:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_FDCAN_IRQHandler+0x274>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800205a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fa07 	bl	8002470 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00d      	beq.n	8002084 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800206e:	4b54      	ldr	r3, [pc, #336]	; (80021c0 <HAL_FDCAN_IRQHandler+0x278>)
 8002070:	400b      	ands	r3, r1
 8002072:	6513      	str	r3, [r2, #80]	; 0x50
 8002074:	4a51      	ldr	r2, [pc, #324]	; (80021bc <HAL_FDCAN_IRQHandler+0x274>)
 8002076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002078:	0f9b      	lsrs	r3, r3, #30
 800207a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800207c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f9c0 	bl	8002404 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00d      	beq.n	80020a6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002090:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <HAL_FDCAN_IRQHandler+0x278>)
 8002092:	400b      	ands	r3, r1
 8002094:	6513      	str	r3, [r2, #80]	; 0x50
 8002096:	4a49      	ldr	r2, [pc, #292]	; (80021bc <HAL_FDCAN_IRQHandler+0x274>)
 8002098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800209a:	0f9b      	lsrs	r3, r3, #30
 800209c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800209e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f9ba 	bl	800241a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80020a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80020b2:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <HAL_FDCAN_IRQHandler+0x278>)
 80020b4:	400b      	ands	r3, r1
 80020b6:	6513      	str	r3, [r2, #80]	; 0x50
 80020b8:	4a40      	ldr	r2, [pc, #256]	; (80021bc <HAL_FDCAN_IRQHandler+0x274>)
 80020ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020bc:	0f9b      	lsrs	r3, r3, #30
 80020be:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80020c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe fcf8 	bl	8000ab8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80020c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00d      	beq.n	80020ea <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80020d4:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <HAL_FDCAN_IRQHandler+0x278>)
 80020d6:	400b      	ands	r3, r1
 80020d8:	6513      	str	r3, [r2, #80]	; 0x50
 80020da:	4a38      	ldr	r2, [pc, #224]	; (80021bc <HAL_FDCAN_IRQHandler+0x274>)
 80020dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020de:	0f9b      	lsrs	r3, r3, #30
 80020e0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80020e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f9a3 	bl	8002430 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80020ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ec:	0adb      	lsrs	r3, r3, #11
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d010      	beq.n	8002118 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80020f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f8:	0adb      	lsrs	r3, r3, #11
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800210a:	651a      	str	r2, [r3, #80]	; 0x50
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_FDCAN_IRQHandler+0x274>)
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f997 	bl	8002446 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8002118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800211a:	0a5b      	lsrs	r3, r3, #9
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01d      	beq.n	8002160 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002126:	0a5b      	lsrs	r3, r3, #9
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d017      	beq.n	8002160 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002138:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002144:	4013      	ands	r3, r2
 8002146:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002150:	651a      	str	r2, [r3, #80]	; 0x50
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_FDCAN_IRQHandler+0x274>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002158:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f97d 	bl	800245a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002162:	0cdb      	lsrs	r3, r3, #19
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d010      	beq.n	800218e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800216c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216e:	0cdb      	lsrs	r3, r3, #19
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002180:	651a      	str	r2, [r3, #80]	; 0x50
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_FDCAN_IRQHandler+0x274>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f97c 	bl	8002486 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800218e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002190:	0c1b      	lsrs	r3, r3, #16
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d016      	beq.n	80021c8 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800219a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d010      	beq.n	80021c8 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021ae:	651a      	str	r2, [r3, #80]	; 0x50
 80021b0:	4b02      	ldr	r3, [pc, #8]	; (80021bc <HAL_FDCAN_IRQHandler+0x274>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	e004      	b.n	80021c4 <HAL_FDCAN_IRQHandler+0x27c>
 80021ba:	bf00      	nop
 80021bc:	4000a800 	.word	0x4000a800
 80021c0:	3fcfffff 	.word	0x3fcfffff
 80021c4:	f000 f969 	bl	800249a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80021c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ca:	0c9b      	lsrs	r3, r3, #18
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80021d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d6:	0c9b      	lsrs	r3, r3, #18
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021e8:	651a      	str	r2, [r3, #80]	; 0x50
 80021ea:	4b83      	ldr	r3, [pc, #524]	; (80023f8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f95c 	bl	80024ae <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80021f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f8:	0c5b      	lsrs	r3, r3, #17
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d015      	beq.n	800222e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	0c5b      	lsrs	r3, r3, #17
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00f      	beq.n	800222e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002216:	651a      	str	r2, [r3, #80]	; 0x50
 8002218:	4b77      	ldr	r3, [pc, #476]	; (80023f8 <HAL_FDCAN_IRQHandler+0x4b0>)
 800221a:	2200      	movs	r2, #0
 800221c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002224:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800222e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00d      	beq.n	8002250 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800223a:	4b70      	ldr	r3, [pc, #448]	; (80023fc <HAL_FDCAN_IRQHandler+0x4b4>)
 800223c:	400b      	ands	r3, r1
 800223e:	6513      	str	r3, [r2, #80]	; 0x50
 8002240:	4a6d      	ldr	r2, [pc, #436]	; (80023f8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002244:	0f9b      	lsrs	r3, r3, #30
 8002246:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002248:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f94d 	bl	80024ea <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002252:	2b00      	cmp	r3, #0
 8002254:	d011      	beq.n	800227a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800225c:	4b67      	ldr	r3, [pc, #412]	; (80023fc <HAL_FDCAN_IRQHandler+0x4b4>)
 800225e:	400b      	ands	r3, r1
 8002260:	6513      	str	r3, [r2, #80]	; 0x50
 8002262:	4a65      	ldr	r2, [pc, #404]	; (80023f8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002266:	0f9b      	lsrs	r3, r3, #30
 8002268:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a60      	ldr	r2, [pc, #384]	; (8002400 <HAL_FDCAN_IRQHandler+0x4b8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	f040 80ac 	bne.w	80023de <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80a4 	beq.w	80023de <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022aa:	4013      	ands	r3, r2
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022c2:	4013      	ands	r3, r2
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022da:	4013      	ands	r3, r2
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80022e8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	6a3a      	ldr	r2, [r7, #32]
 80022f2:	4013      	ands	r3, r2
 80022f4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002300:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	4013      	ands	r3, r2
 800230c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d007      	beq.n	8002334 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800232a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800232c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f8e6 	bl	8002500 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002340:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f8e6 	bl	8002516 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01a      	beq.n	800238c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	099b      	lsrs	r3, r3, #6
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d014      	beq.n	800238c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	0c1b      	lsrs	r3, r3, #16
 800236a:	b29b      	uxth	r3, r3
 800236c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002378:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	6939      	ldr	r1, [r7, #16]
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f8d0 	bl	800252c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800239a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f8d1 	bl	8002544 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00b      	beq.n	80023c0 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	6a3a      	ldr	r2, [r7, #32]
 80023ae:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f874 	bl	80024d6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80023ee:	bf00      	nop
 80023f0:	3758      	adds	r7, #88	; 0x58
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	4000a800 	.word	0x4000a800
 80023fc:	3fcfffff 	.word	0x3fcfffff
 8002400:	4000a000 	.word	0x4000a000

08002404 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002572:	4ba7      	ldr	r3, [pc, #668]	; (8002810 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002574:	4013      	ands	r3, r2
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	0091      	lsls	r1, r2, #2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	430b      	orrs	r3, r1
 8002580:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	041a      	lsls	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	4413      	add	r3, r2
 80025a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025b2:	4b97      	ldr	r3, [pc, #604]	; (8002810 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	0091      	lsls	r1, r2, #2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	430b      	orrs	r3, r1
 80025c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025cc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	041a      	lsls	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4413      	add	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80025f4:	4b86      	ldr	r3, [pc, #536]	; (8002810 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	0091      	lsls	r1, r2, #2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	430b      	orrs	r3, r1
 8002602:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800260e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	041a      	lsls	r2, r3, #16
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800262a:	fb02 f303 	mul.w	r3, r2, r3
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	4413      	add	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800263c:	4b74      	ldr	r3, [pc, #464]	; (8002810 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800263e:	4013      	ands	r3, r2
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	0091      	lsls	r1, r2, #2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	430b      	orrs	r3, r1
 800264a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002656:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265e:	041a      	lsls	r2, r3, #16
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	4413      	add	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002684:	4b62      	ldr	r3, [pc, #392]	; (8002810 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002686:	4013      	ands	r3, r2
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	0091      	lsls	r1, r2, #2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	430b      	orrs	r3, r1
 8002692:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	4413      	add	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80026b0:	4b57      	ldr	r3, [pc, #348]	; (8002810 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	0091      	lsls	r1, r2, #2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	430b      	orrs	r3, r1
 80026be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026ca:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	041a      	lsls	r2, r3, #16
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	4413      	add	r3, r2
 80026e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	0091      	lsls	r1, r2, #2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	430b      	orrs	r3, r1
 8002700:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800270c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002714:	041a      	lsls	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002728:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002730:	061a      	lsls	r2, r3, #24
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002740:	4b34      	ldr	r3, [pc, #208]	; (8002814 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002742:	4413      	add	r3, r2
 8002744:	009a      	lsls	r2, r3, #2
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	441a      	add	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	441a      	add	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	441a      	add	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	441a      	add	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	441a      	add	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	441a      	add	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	441a      	add	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	441a      	add	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002806:	4a04      	ldr	r2, [pc, #16]	; (8002818 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d915      	bls.n	8002838 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800280c:	e006      	b.n	800281c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800280e:	bf00      	nop
 8002810:	ffff0003 	.word	0xffff0003
 8002814:	10002b00 	.word	0x10002b00
 8002818:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002822:	f043 0220 	orr.w	r2, r3, #32
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2203      	movs	r2, #3
 8002830:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e010      	b.n	800285a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e005      	b.n	800284c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3304      	adds	r3, #4
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	429a      	cmp	r2, r3
 8002856:	d3f3      	bcc.n	8002840 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop

08002868 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002886:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800288e:	4313      	orrs	r3, r2
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	e00a      	b.n	80028aa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800289c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80028a2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80028a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028a8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80028b4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80028ba:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80028c0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028d4:	6839      	ldr	r1, [r7, #0]
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	3304      	adds	r3, #4
 80028ea:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	3304      	adds	r3, #4
 80028f6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	e020      	b.n	8002940 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	3303      	adds	r3, #3
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3302      	adds	r3, #2
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	440b      	add	r3, r1
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002916:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	3301      	adds	r3, #1
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	440b      	add	r3, r1
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002924:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	440a      	add	r2, r1
 800292c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800292e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	3304      	adds	r3, #4
 8002938:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3304      	adds	r3, #4
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	4a06      	ldr	r2, [pc, #24]	; (8002960 <FDCAN_CopyMessageToRAM+0xf8>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	461a      	mov	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	4293      	cmp	r3, r2
 8002950:	d3d5      	bcc.n	80028fe <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	3724      	adds	r7, #36	; 0x24
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	08005be4 	.word	0x08005be4

08002964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002972:	4b89      	ldr	r3, [pc, #548]	; (8002b98 <HAL_GPIO_Init+0x234>)
 8002974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002976:	e194      	b.n	8002ca2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8186 	beq.w	8002c9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d005      	beq.n	80029a8 <HAL_GPIO_Init+0x44>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d130      	bne.n	8002a0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029de:	2201      	movs	r2, #1
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f003 0201 	and.w	r2, r3, #1
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d017      	beq.n	8002a46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2203      	movs	r2, #3
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d123      	bne.n	8002a9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	08da      	lsrs	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3208      	adds	r2, #8
 8002a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	220f      	movs	r2, #15
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	08da      	lsrs	r2, r3, #3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	69b9      	ldr	r1, [r7, #24]
 8002a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0203 	and.w	r2, r3, #3
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80e0 	beq.w	8002c9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002adc:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <HAL_GPIO_Init+0x238>)
 8002ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ae2:	4a2e      	ldr	r2, [pc, #184]	; (8002b9c <HAL_GPIO_Init+0x238>)
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002aec:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_GPIO_Init+0x238>)
 8002aee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afa:	4a29      	ldr	r2, [pc, #164]	; (8002ba0 <HAL_GPIO_Init+0x23c>)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	3302      	adds	r3, #2
 8002b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	220f      	movs	r2, #15
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <HAL_GPIO_Init+0x240>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d052      	beq.n	8002bcc <HAL_GPIO_Init+0x268>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <HAL_GPIO_Init+0x244>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d031      	beq.n	8002b92 <HAL_GPIO_Init+0x22e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1e      	ldr	r2, [pc, #120]	; (8002bac <HAL_GPIO_Init+0x248>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d02b      	beq.n	8002b8e <HAL_GPIO_Init+0x22a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <HAL_GPIO_Init+0x24c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d025      	beq.n	8002b8a <HAL_GPIO_Init+0x226>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <HAL_GPIO_Init+0x250>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01f      	beq.n	8002b86 <HAL_GPIO_Init+0x222>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a1b      	ldr	r2, [pc, #108]	; (8002bb8 <HAL_GPIO_Init+0x254>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d019      	beq.n	8002b82 <HAL_GPIO_Init+0x21e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a1a      	ldr	r2, [pc, #104]	; (8002bbc <HAL_GPIO_Init+0x258>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <HAL_GPIO_Init+0x21a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <HAL_GPIO_Init+0x25c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00d      	beq.n	8002b7a <HAL_GPIO_Init+0x216>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a18      	ldr	r2, [pc, #96]	; (8002bc4 <HAL_GPIO_Init+0x260>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <HAL_GPIO_Init+0x212>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <HAL_GPIO_Init+0x264>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d101      	bne.n	8002b72 <HAL_GPIO_Init+0x20e>
 8002b6e:	2309      	movs	r3, #9
 8002b70:	e02d      	b.n	8002bce <HAL_GPIO_Init+0x26a>
 8002b72:	230a      	movs	r3, #10
 8002b74:	e02b      	b.n	8002bce <HAL_GPIO_Init+0x26a>
 8002b76:	2308      	movs	r3, #8
 8002b78:	e029      	b.n	8002bce <HAL_GPIO_Init+0x26a>
 8002b7a:	2307      	movs	r3, #7
 8002b7c:	e027      	b.n	8002bce <HAL_GPIO_Init+0x26a>
 8002b7e:	2306      	movs	r3, #6
 8002b80:	e025      	b.n	8002bce <HAL_GPIO_Init+0x26a>
 8002b82:	2305      	movs	r3, #5
 8002b84:	e023      	b.n	8002bce <HAL_GPIO_Init+0x26a>
 8002b86:	2304      	movs	r3, #4
 8002b88:	e021      	b.n	8002bce <HAL_GPIO_Init+0x26a>
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e01f      	b.n	8002bce <HAL_GPIO_Init+0x26a>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e01d      	b.n	8002bce <HAL_GPIO_Init+0x26a>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e01b      	b.n	8002bce <HAL_GPIO_Init+0x26a>
 8002b96:	bf00      	nop
 8002b98:	58000080 	.word	0x58000080
 8002b9c:	58024400 	.word	0x58024400
 8002ba0:	58000400 	.word	0x58000400
 8002ba4:	58020000 	.word	0x58020000
 8002ba8:	58020400 	.word	0x58020400
 8002bac:	58020800 	.word	0x58020800
 8002bb0:	58020c00 	.word	0x58020c00
 8002bb4:	58021000 	.word	0x58021000
 8002bb8:	58021400 	.word	0x58021400
 8002bbc:	58021800 	.word	0x58021800
 8002bc0:	58021c00 	.word	0x58021c00
 8002bc4:	58022000 	.word	0x58022000
 8002bc8:	58022400 	.word	0x58022400
 8002bcc:	2300      	movs	r3, #0
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	f002 0203 	and.w	r2, r2, #3
 8002bd4:	0092      	lsls	r2, r2, #2
 8002bd6:	4093      	lsls	r3, r2
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bde:	4938      	ldr	r1, [pc, #224]	; (8002cc0 <HAL_GPIO_Init+0x35c>)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	3302      	adds	r3, #2
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f47f ae63 	bne.w	8002978 <HAL_GPIO_Init+0x14>
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
 8002cb6:	3724      	adds	r7, #36	; 0x24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	58000400 	.word	0x58000400

08002cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd4:	787b      	ldrb	r3, [r7, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cda:	887a      	ldrh	r2, [r7, #2]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ce0:	e003      	b.n	8002cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ce2:	887b      	ldrh	r3, [r7, #2]
 8002ce4:	041a      	lsls	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	619a      	str	r2, [r3, #24]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d08:	887a      	ldrh	r2, [r7, #2]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	041a      	lsls	r2, r3, #16
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43d9      	mvns	r1, r3
 8002d14:	887b      	ldrh	r3, [r7, #2]
 8002d16:	400b      	ands	r3, r1
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	619a      	str	r2, [r3, #24]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_PWREx_ConfigSupply+0x70>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d00a      	beq.n	8002d56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d40:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <HAL_PWREx_ConfigSupply+0x70>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d001      	beq.n	8002d52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e01f      	b.n	8002d92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e01d      	b.n	8002d92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_PWREx_ConfigSupply+0x70>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f023 0207 	bic.w	r2, r3, #7
 8002d5e:	490f      	ldr	r1, [pc, #60]	; (8002d9c <HAL_PWREx_ConfigSupply+0x70>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d66:	f7fe fb57 	bl	8001418 <HAL_GetTick>
 8002d6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d6c:	e009      	b.n	8002d82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d6e:	f7fe fb53 	bl	8001418 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d7c:	d901      	bls.n	8002d82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e007      	b.n	8002d92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_PWREx_ConfigSupply+0x70>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8e:	d1ee      	bne.n	8002d6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	58024800 	.word	0x58024800

08002da0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08c      	sub	sp, #48	; 0x30
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f000 bc48 	b.w	8003644 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8088 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc2:	4b99      	ldr	r3, [pc, #612]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dcc:	4b96      	ldr	r3, [pc, #600]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d007      	beq.n	8002de8 <HAL_RCC_OscConfig+0x48>
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	2b18      	cmp	r3, #24
 8002ddc:	d111      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62>
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d10c      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	4b8f      	ldr	r3, [pc, #572]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d06d      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x130>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d169      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f000 bc21 	b.w	8003644 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_OscConfig+0x7a>
 8002e0c:	4b86      	ldr	r3, [pc, #536]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a85      	ldr	r2, [pc, #532]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	e02e      	b.n	8002e78 <HAL_RCC_OscConfig+0xd8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x9c>
 8002e22:	4b81      	ldr	r3, [pc, #516]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a80      	ldr	r2, [pc, #512]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	4b7e      	ldr	r3, [pc, #504]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a7d      	ldr	r2, [pc, #500]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e01d      	b.n	8002e78 <HAL_RCC_OscConfig+0xd8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0xc0>
 8002e46:	4b78      	ldr	r3, [pc, #480]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a77      	ldr	r2, [pc, #476]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b75      	ldr	r3, [pc, #468]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a74      	ldr	r2, [pc, #464]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCC_OscConfig+0xd8>
 8002e60:	4b71      	ldr	r3, [pc, #452]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a70      	ldr	r2, [pc, #448]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	4b6e      	ldr	r3, [pc, #440]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a6d      	ldr	r2, [pc, #436]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe faca 	bl	8001418 <HAL_GetTick>
 8002e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fe fac6 	bl	8001418 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e3d4      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e9a:	4b63      	ldr	r3, [pc, #396]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0xe8>
 8002ea6:	e014      	b.n	8002ed2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fab6 	bl	8001418 <HAL_GetTick>
 8002eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7fe fab2 	bl	8001418 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	; 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e3c0      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ec2:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x110>
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80ca 	beq.w	8003074 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee0:	4b51      	ldr	r3, [pc, #324]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ee8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002eea:	4b4f      	ldr	r3, [pc, #316]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d007      	beq.n	8002f06 <HAL_RCC_OscConfig+0x166>
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	2b18      	cmp	r3, #24
 8002efa:	d156      	bne.n	8002faa <HAL_RCC_OscConfig+0x20a>
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d151      	bne.n	8002faa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f06:	4b48      	ldr	r3, [pc, #288]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_RCC_OscConfig+0x17e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e392      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f1e:	4b42      	ldr	r3, [pc, #264]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 0219 	bic.w	r2, r3, #25
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	493f      	ldr	r1, [pc, #252]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe fa72 	bl	8001418 <HAL_GetTick>
 8002f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f38:	f7fe fa6e 	bl	8001418 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e37c      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f56:	f7fe fa8f 	bl	8001478 <HAL_GetREVID>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d817      	bhi.n	8002f94 <HAL_RCC_OscConfig+0x1f4>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b40      	cmp	r3, #64	; 0x40
 8002f6a:	d108      	bne.n	8002f7e <HAL_RCC_OscConfig+0x1de>
 8002f6c:	4b2e      	ldr	r3, [pc, #184]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f74:	4a2c      	ldr	r2, [pc, #176]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f7a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f7c:	e07a      	b.n	8003074 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	031b      	lsls	r3, r3, #12
 8002f8c:	4926      	ldr	r1, [pc, #152]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f92:	e06f      	b.n	8003074 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b24      	ldr	r3, [pc, #144]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	4921      	ldr	r1, [pc, #132]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa8:	e064      	b.n	8003074 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d047      	beq.n	8003042 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 0219 	bic.w	r2, r3, #25
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	491a      	ldr	r1, [pc, #104]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fa28 	bl	8001418 <HAL_GetTick>
 8002fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fa24 	bl	8001418 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e332      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fea:	f7fe fa45 	bl	8001478 <HAL_GetREVID>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d819      	bhi.n	800302c <HAL_RCC_OscConfig+0x28c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d108      	bne.n	8003012 <HAL_RCC_OscConfig+0x272>
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003008:	4a07      	ldr	r2, [pc, #28]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 800300a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300e:	6053      	str	r3, [r2, #4]
 8003010:	e030      	b.n	8003074 <HAL_RCC_OscConfig+0x2d4>
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	031b      	lsls	r3, r3, #12
 8003020:	4901      	ldr	r1, [pc, #4]	; (8003028 <HAL_RCC_OscConfig+0x288>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
 8003026:	e025      	b.n	8003074 <HAL_RCC_OscConfig+0x2d4>
 8003028:	58024400 	.word	0x58024400
 800302c:	4b9a      	ldr	r3, [pc, #616]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	061b      	lsls	r3, r3, #24
 800303a:	4997      	ldr	r1, [pc, #604]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
 8003040:	e018      	b.n	8003074 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003042:	4b95      	ldr	r3, [pc, #596]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a94      	ldr	r2, [pc, #592]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fe f9e3 	bl	8001418 <HAL_GetTick>
 8003052:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003056:	f7fe f9df 	bl	8001418 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e2ed      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003068:	4b8b      	ldr	r3, [pc, #556]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80a9 	beq.w	80031d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003082:	4b85      	ldr	r3, [pc, #532]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800308a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800308c:	4b82      	ldr	r3, [pc, #520]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d007      	beq.n	80030a8 <HAL_RCC_OscConfig+0x308>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b18      	cmp	r3, #24
 800309c:	d13a      	bne.n	8003114 <HAL_RCC_OscConfig+0x374>
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d135      	bne.n	8003114 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030a8:	4b7b      	ldr	r3, [pc, #492]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_OscConfig+0x320>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	2b80      	cmp	r3, #128	; 0x80
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e2c1      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030c0:	f7fe f9da 	bl	8001478 <HAL_GetREVID>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d817      	bhi.n	80030fe <HAL_RCC_OscConfig+0x35e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d108      	bne.n	80030e8 <HAL_RCC_OscConfig+0x348>
 80030d6:	4b70      	ldr	r3, [pc, #448]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80030de:	4a6e      	ldr	r2, [pc, #440]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80030e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030e6:	e075      	b.n	80031d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030e8:	4b6b      	ldr	r3, [pc, #428]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	069b      	lsls	r3, r3, #26
 80030f6:	4968      	ldr	r1, [pc, #416]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030fc:	e06a      	b.n	80031d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030fe:	4b66      	ldr	r3, [pc, #408]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	061b      	lsls	r3, r3, #24
 800310c:	4962      	ldr	r1, [pc, #392]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800310e:	4313      	orrs	r3, r2
 8003110:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003112:	e05f      	b.n	80031d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d042      	beq.n	80031a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800311c:	4b5e      	ldr	r3, [pc, #376]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a5d      	ldr	r2, [pc, #372]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fe f976 	bl	8001418 <HAL_GetTick>
 800312c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003130:	f7fe f972 	bl	8001418 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e280      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003142:	4b55      	ldr	r3, [pc, #340]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800314e:	f7fe f993 	bl	8001478 <HAL_GetREVID>
 8003152:	4603      	mov	r3, r0
 8003154:	f241 0203 	movw	r2, #4099	; 0x1003
 8003158:	4293      	cmp	r3, r2
 800315a:	d817      	bhi.n	800318c <HAL_RCC_OscConfig+0x3ec>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	2b20      	cmp	r3, #32
 8003162:	d108      	bne.n	8003176 <HAL_RCC_OscConfig+0x3d6>
 8003164:	4b4c      	ldr	r3, [pc, #304]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800316c:	4a4a      	ldr	r2, [pc, #296]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800316e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003172:	6053      	str	r3, [r2, #4]
 8003174:	e02e      	b.n	80031d4 <HAL_RCC_OscConfig+0x434>
 8003176:	4b48      	ldr	r3, [pc, #288]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	069b      	lsls	r3, r3, #26
 8003184:	4944      	ldr	r1, [pc, #272]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003186:	4313      	orrs	r3, r2
 8003188:	604b      	str	r3, [r1, #4]
 800318a:	e023      	b.n	80031d4 <HAL_RCC_OscConfig+0x434>
 800318c:	4b42      	ldr	r3, [pc, #264]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	061b      	lsls	r3, r3, #24
 800319a:	493f      	ldr	r1, [pc, #252]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800319c:	4313      	orrs	r3, r2
 800319e:	60cb      	str	r3, [r1, #12]
 80031a0:	e018      	b.n	80031d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031a2:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a3c      	ldr	r2, [pc, #240]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80031a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fe f933 	bl	8001418 <HAL_GetTick>
 80031b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031b6:	f7fe f92f 	bl	8001418 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e23d      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031c8:	4b33      	ldr	r3, [pc, #204]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f0      	bne.n	80031b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d036      	beq.n	800324e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d019      	beq.n	800321c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e8:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80031ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ec:	4a2a      	ldr	r2, [pc, #168]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fe f910 	bl	8001418 <HAL_GetTick>
 80031f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fc:	f7fe f90c 	bl	8001418 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e21a      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0x45c>
 800321a:	e018      	b.n	800324e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800321e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe f8f6 	bl	8001418 <HAL_GetTick>
 800322c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003230:	f7fe f8f2 	bl	8001418 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e200      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b00      	cmp	r3, #0
 8003258:	d039      	beq.n	80032ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01c      	beq.n	800329c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800326c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800326e:	f7fe f8d3 	bl	8001418 <HAL_GetTick>
 8003272:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003276:	f7fe f8cf 	bl	8001418 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e1dd      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x4d6>
 8003294:	e01b      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
 8003296:	bf00      	nop
 8003298:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800329c:	4b9b      	ldr	r3, [pc, #620]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a9a      	ldr	r2, [pc, #616]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80032a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032a8:	f7fe f8b6 	bl	8001418 <HAL_GetTick>
 80032ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032b0:	f7fe f8b2 	bl	8001418 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e1c0      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032c2:	4b92      	ldr	r3, [pc, #584]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8081 	beq.w	80033de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032dc:	4b8c      	ldr	r3, [pc, #560]	; (8003510 <HAL_RCC_OscConfig+0x770>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a8b      	ldr	r2, [pc, #556]	; (8003510 <HAL_RCC_OscConfig+0x770>)
 80032e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032e8:	f7fe f896 	bl	8001418 <HAL_GetTick>
 80032ec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f0:	f7fe f892 	bl	8001418 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e1a0      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003302:	4b83      	ldr	r3, [pc, #524]	; (8003510 <HAL_RCC_OscConfig+0x770>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d106      	bne.n	8003324 <HAL_RCC_OscConfig+0x584>
 8003316:	4b7d      	ldr	r3, [pc, #500]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	4a7c      	ldr	r2, [pc, #496]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6713      	str	r3, [r2, #112]	; 0x70
 8003322:	e02d      	b.n	8003380 <HAL_RCC_OscConfig+0x5e0>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10c      	bne.n	8003346 <HAL_RCC_OscConfig+0x5a6>
 800332c:	4b77      	ldr	r3, [pc, #476]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	4a76      	ldr	r2, [pc, #472]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003332:	f023 0301 	bic.w	r3, r3, #1
 8003336:	6713      	str	r3, [r2, #112]	; 0x70
 8003338:	4b74      	ldr	r3, [pc, #464]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	4a73      	ldr	r2, [pc, #460]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 800333e:	f023 0304 	bic.w	r3, r3, #4
 8003342:	6713      	str	r3, [r2, #112]	; 0x70
 8003344:	e01c      	b.n	8003380 <HAL_RCC_OscConfig+0x5e0>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b05      	cmp	r3, #5
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x5c8>
 800334e:	4b6f      	ldr	r3, [pc, #444]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	4a6e      	ldr	r2, [pc, #440]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003354:	f043 0304 	orr.w	r3, r3, #4
 8003358:	6713      	str	r3, [r2, #112]	; 0x70
 800335a:	4b6c      	ldr	r3, [pc, #432]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a6b      	ldr	r2, [pc, #428]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0x5e0>
 8003368:	4b68      	ldr	r3, [pc, #416]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	4a67      	ldr	r2, [pc, #412]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	6713      	str	r3, [r2, #112]	; 0x70
 8003374:	4b65      	ldr	r3, [pc, #404]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4a64      	ldr	r2, [pc, #400]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 800337a:	f023 0304 	bic.w	r3, r3, #4
 800337e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d015      	beq.n	80033b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7fe f846 	bl	8001418 <HAL_GetTick>
 800338c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fe f842 	bl	8001418 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e14e      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a6:	4b59      	ldr	r3, [pc, #356]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0ee      	beq.n	8003390 <HAL_RCC_OscConfig+0x5f0>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe f830 	bl	8001418 <HAL_GetTick>
 80033b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fe f82c 	bl	8001418 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e138      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033d2:	4b4e      	ldr	r3, [pc, #312]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1ee      	bne.n	80033bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 812d 	beq.w	8003642 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033e8:	4b48      	ldr	r3, [pc, #288]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033f0:	2b18      	cmp	r3, #24
 80033f2:	f000 80bd 	beq.w	8003570 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	f040 809e 	bne.w	800353c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003400:	4b42      	ldr	r3, [pc, #264]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a41      	ldr	r2, [pc, #260]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800340a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe f804 	bl	8001418 <HAL_GetTick>
 8003410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003414:	f7fe f800 	bl	8001418 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e10e      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003426:	4b39      	ldr	r3, [pc, #228]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003432:	4b36      	ldr	r3, [pc, #216]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003436:	4b37      	ldr	r3, [pc, #220]	; (8003514 <HAL_RCC_OscConfig+0x774>)
 8003438:	4013      	ands	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	430a      	orrs	r2, r1
 8003446:	4931      	ldr	r1, [pc, #196]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003448:	4313      	orrs	r3, r2
 800344a:	628b      	str	r3, [r1, #40]	; 0x28
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	3b01      	subs	r3, #1
 8003452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345a:	3b01      	subs	r3, #1
 800345c:	025b      	lsls	r3, r3, #9
 800345e:	b29b      	uxth	r3, r3
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	3b01      	subs	r3, #1
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	3b01      	subs	r3, #1
 8003476:	061b      	lsls	r3, r3, #24
 8003478:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800347c:	4923      	ldr	r1, [pc, #140]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 800347e:	4313      	orrs	r3, r2
 8003480:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003482:	4b22      	ldr	r3, [pc, #136]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	4a21      	ldr	r2, [pc, #132]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800348e:	4b1f      	ldr	r3, [pc, #124]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 8003490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003492:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_RCC_OscConfig+0x778>)
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800349a:	00d2      	lsls	r2, r2, #3
 800349c:	491b      	ldr	r1, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034a2:	4b1a      	ldr	r3, [pc, #104]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	f023 020c 	bic.w	r2, r3, #12
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	4917      	ldr	r1, [pc, #92]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034b4:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	f023 0202 	bic.w	r2, r3, #2
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	4912      	ldr	r1, [pc, #72]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	4a10      	ldr	r2, [pc, #64]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	4a0d      	ldr	r2, [pc, #52]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	4a07      	ldr	r2, [pc, #28]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a04      	ldr	r2, [pc, #16]	; (800350c <HAL_RCC_OscConfig+0x76c>)
 80034fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fd ff89 	bl	8001418 <HAL_GetTick>
 8003506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003508:	e011      	b.n	800352e <HAL_RCC_OscConfig+0x78e>
 800350a:	bf00      	nop
 800350c:	58024400 	.word	0x58024400
 8003510:	58024800 	.word	0x58024800
 8003514:	fffffc0c 	.word	0xfffffc0c
 8003518:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fd ff7c 	bl	8001418 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e08a      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800352e:	4b47      	ldr	r3, [pc, #284]	; (800364c <HAL_RCC_OscConfig+0x8ac>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x77c>
 800353a:	e082      	b.n	8003642 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353c:	4b43      	ldr	r3, [pc, #268]	; (800364c <HAL_RCC_OscConfig+0x8ac>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a42      	ldr	r2, [pc, #264]	; (800364c <HAL_RCC_OscConfig+0x8ac>)
 8003542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fd ff66 	bl	8001418 <HAL_GetTick>
 800354c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003550:	f7fd ff62 	bl	8001418 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e070      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003562:	4b3a      	ldr	r3, [pc, #232]	; (800364c <HAL_RCC_OscConfig+0x8ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x7b0>
 800356e:	e068      	b.n	8003642 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003570:	4b36      	ldr	r3, [pc, #216]	; (800364c <HAL_RCC_OscConfig+0x8ac>)
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003576:	4b35      	ldr	r3, [pc, #212]	; (800364c <HAL_RCC_OscConfig+0x8ac>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	2b01      	cmp	r3, #1
 8003582:	d031      	beq.n	80035e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f003 0203 	and.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d12a      	bne.n	80035e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d122      	bne.n	80035e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d11a      	bne.n	80035e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	0a5b      	lsrs	r3, r3, #9
 80035b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d111      	bne.n	80035e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	0c1b      	lsrs	r3, r3, #16
 80035c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d108      	bne.n	80035e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	0e1b      	lsrs	r3, r3, #24
 80035da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e02b      	b.n	8003644 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80035ec:	4b17      	ldr	r3, [pc, #92]	; (800364c <HAL_RCC_OscConfig+0x8ac>)
 80035ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f0:	08db      	lsrs	r3, r3, #3
 80035f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d01f      	beq.n	8003642 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_RCC_OscConfig+0x8ac>)
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	4a11      	ldr	r2, [pc, #68]	; (800364c <HAL_RCC_OscConfig+0x8ac>)
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800360e:	f7fd ff03 	bl	8001418 <HAL_GetTick>
 8003612:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003614:	bf00      	nop
 8003616:	f7fd feff 	bl	8001418 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	4293      	cmp	r3, r2
 8003620:	d0f9      	beq.n	8003616 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_RCC_OscConfig+0x8ac>)
 8003624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_RCC_OscConfig+0x8b0>)
 8003628:	4013      	ands	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800362e:	00d2      	lsls	r2, r2, #3
 8003630:	4906      	ldr	r1, [pc, #24]	; (800364c <HAL_RCC_OscConfig+0x8ac>)
 8003632:	4313      	orrs	r3, r2
 8003634:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_OscConfig+0x8ac>)
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	4a04      	ldr	r2, [pc, #16]	; (800364c <HAL_RCC_OscConfig+0x8ac>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3730      	adds	r7, #48	; 0x30
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	58024400 	.word	0x58024400
 8003650:	ffff0007 	.word	0xffff0007

08003654 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e19c      	b.n	80039a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003668:	4b8a      	ldr	r3, [pc, #552]	; (8003894 <HAL_RCC_ClockConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d910      	bls.n	8003698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b87      	ldr	r3, [pc, #540]	; (8003894 <HAL_RCC_ClockConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 020f 	bic.w	r2, r3, #15
 800367e:	4985      	ldr	r1, [pc, #532]	; (8003894 <HAL_RCC_ClockConfig+0x240>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b83      	ldr	r3, [pc, #524]	; (8003894 <HAL_RCC_ClockConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e184      	b.n	80039a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d010      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	4b7b      	ldr	r3, [pc, #492]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d908      	bls.n	80036c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036b4:	4b78      	ldr	r3, [pc, #480]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	4975      	ldr	r1, [pc, #468]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d010      	beq.n	80036f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	4b70      	ldr	r3, [pc, #448]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036de:	429a      	cmp	r2, r3
 80036e0:	d908      	bls.n	80036f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036e2:	4b6d      	ldr	r3, [pc, #436]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	496a      	ldr	r1, [pc, #424]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d010      	beq.n	8003722 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699a      	ldr	r2, [r3, #24]
 8003704:	4b64      	ldr	r3, [pc, #400]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800370c:	429a      	cmp	r2, r3
 800370e:	d908      	bls.n	8003722 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003710:	4b61      	ldr	r3, [pc, #388]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	495e      	ldr	r1, [pc, #376]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 800371e:	4313      	orrs	r3, r2
 8003720:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d010      	beq.n	8003750 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	4b59      	ldr	r3, [pc, #356]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800373a:	429a      	cmp	r2, r3
 800373c:	d908      	bls.n	8003750 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800373e:	4b56      	ldr	r3, [pc, #344]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	4953      	ldr	r1, [pc, #332]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 800374c:	4313      	orrs	r3, r2
 800374e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d010      	beq.n	800377e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	4b4d      	ldr	r3, [pc, #308]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	429a      	cmp	r2, r3
 800376a:	d908      	bls.n	800377e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800376c:	4b4a      	ldr	r3, [pc, #296]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f023 020f 	bic.w	r2, r3, #15
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4947      	ldr	r1, [pc, #284]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 800377a:	4313      	orrs	r3, r2
 800377c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d055      	beq.n	8003836 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800378a:	4b43      	ldr	r3, [pc, #268]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	4940      	ldr	r1, [pc, #256]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003798:	4313      	orrs	r3, r2
 800379a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037a4:	4b3c      	ldr	r3, [pc, #240]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d121      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0f6      	b.n	80039a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037bc:	4b36      	ldr	r3, [pc, #216]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d115      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0ea      	b.n	80039a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037d4:	4b30      	ldr	r3, [pc, #192]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0de      	b.n	80039a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037e4:	4b2c      	ldr	r3, [pc, #176]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0d6      	b.n	80039a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037f4:	4b28      	ldr	r3, [pc, #160]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f023 0207 	bic.w	r2, r3, #7
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4925      	ldr	r1, [pc, #148]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003802:	4313      	orrs	r3, r2
 8003804:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003806:	f7fd fe07 	bl	8001418 <HAL_GetTick>
 800380a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380c:	e00a      	b.n	8003824 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380e:	f7fd fe03 	bl	8001418 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f241 3288 	movw	r2, #5000	; 0x1388
 800381c:	4293      	cmp	r3, r2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e0be      	b.n	80039a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003824:	4b1c      	ldr	r3, [pc, #112]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	429a      	cmp	r2, r3
 8003834:	d1eb      	bne.n	800380e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d010      	beq.n	8003864 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	4b14      	ldr	r3, [pc, #80]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	429a      	cmp	r2, r3
 8003850:	d208      	bcs.n	8003864 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003852:	4b11      	ldr	r3, [pc, #68]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f023 020f 	bic.w	r2, r3, #15
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	490e      	ldr	r1, [pc, #56]	; (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003860:	4313      	orrs	r3, r2
 8003862:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_ClockConfig+0x240>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d214      	bcs.n	800389c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b08      	ldr	r3, [pc, #32]	; (8003894 <HAL_RCC_ClockConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 020f 	bic.w	r2, r3, #15
 800387a:	4906      	ldr	r1, [pc, #24]	; (8003894 <HAL_RCC_ClockConfig+0x240>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b04      	ldr	r3, [pc, #16]	; (8003894 <HAL_RCC_ClockConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e086      	b.n	80039a2 <HAL_RCC_ClockConfig+0x34e>
 8003894:	52002000 	.word	0x52002000
 8003898:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d010      	beq.n	80038ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d208      	bcs.n	80038ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038b8:	4b3c      	ldr	r3, [pc, #240]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	4939      	ldr	r1, [pc, #228]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d010      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	4b34      	ldr	r3, [pc, #208]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d208      	bcs.n	80038f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038e6:	4b31      	ldr	r3, [pc, #196]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	492e      	ldr	r1, [pc, #184]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b00      	cmp	r3, #0
 8003902:	d010      	beq.n	8003926 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	4b28      	ldr	r3, [pc, #160]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003910:	429a      	cmp	r2, r3
 8003912:	d208      	bcs.n	8003926 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	4922      	ldr	r1, [pc, #136]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 8003922:	4313      	orrs	r3, r2
 8003924:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d010      	beq.n	8003954 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800393e:	429a      	cmp	r2, r3
 8003940:	d208      	bcs.n	8003954 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003942:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	4917      	ldr	r1, [pc, #92]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 8003950:	4313      	orrs	r3, r2
 8003952:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003954:	f000 f834 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b14      	ldr	r3, [pc, #80]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	4912      	ldr	r1, [pc, #72]	; (80039b0 <HAL_RCC_ClockConfig+0x35c>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
 8003970:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003972:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <HAL_RCC_ClockConfig+0x358>)
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	4a0d      	ldr	r2, [pc, #52]	; (80039b0 <HAL_RCC_ClockConfig+0x35c>)
 800397c:	5cd3      	ldrb	r3, [r2, r3]
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
 8003988:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <HAL_RCC_ClockConfig+0x360>)
 800398a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800398c:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <HAL_RCC_ClockConfig+0x364>)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <HAL_RCC_ClockConfig+0x368>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd fcf4 	bl	8001384 <HAL_InitTick>
 800399c:	4603      	mov	r3, r0
 800399e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	58024400 	.word	0x58024400
 80039b0:	08005bd4 	.word	0x08005bd4
 80039b4:	24000004 	.word	0x24000004
 80039b8:	24000000 	.word	0x24000000
 80039bc:	24000008 	.word	0x24000008

080039c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	; 0x24
 80039c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039c6:	4bb3      	ldr	r3, [pc, #716]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ce:	2b18      	cmp	r3, #24
 80039d0:	f200 8155 	bhi.w	8003c7e <HAL_RCC_GetSysClockFreq+0x2be>
 80039d4:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a41 	.word	0x08003a41
 80039e0:	08003c7f 	.word	0x08003c7f
 80039e4:	08003c7f 	.word	0x08003c7f
 80039e8:	08003c7f 	.word	0x08003c7f
 80039ec:	08003c7f 	.word	0x08003c7f
 80039f0:	08003c7f 	.word	0x08003c7f
 80039f4:	08003c7f 	.word	0x08003c7f
 80039f8:	08003c7f 	.word	0x08003c7f
 80039fc:	08003a67 	.word	0x08003a67
 8003a00:	08003c7f 	.word	0x08003c7f
 8003a04:	08003c7f 	.word	0x08003c7f
 8003a08:	08003c7f 	.word	0x08003c7f
 8003a0c:	08003c7f 	.word	0x08003c7f
 8003a10:	08003c7f 	.word	0x08003c7f
 8003a14:	08003c7f 	.word	0x08003c7f
 8003a18:	08003c7f 	.word	0x08003c7f
 8003a1c:	08003a6d 	.word	0x08003a6d
 8003a20:	08003c7f 	.word	0x08003c7f
 8003a24:	08003c7f 	.word	0x08003c7f
 8003a28:	08003c7f 	.word	0x08003c7f
 8003a2c:	08003c7f 	.word	0x08003c7f
 8003a30:	08003c7f 	.word	0x08003c7f
 8003a34:	08003c7f 	.word	0x08003c7f
 8003a38:	08003c7f 	.word	0x08003c7f
 8003a3c:	08003a73 	.word	0x08003a73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a40:	4b94      	ldr	r3, [pc, #592]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a4c:	4b91      	ldr	r3, [pc, #580]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	08db      	lsrs	r3, r3, #3
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	4a90      	ldr	r2, [pc, #576]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a5e:	e111      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a60:	4b8d      	ldr	r3, [pc, #564]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a62:	61bb      	str	r3, [r7, #24]
      break;
 8003a64:	e10e      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a66:	4b8d      	ldr	r3, [pc, #564]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a68:	61bb      	str	r3, [r7, #24]
      break;
 8003a6a:	e10b      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a6c:	4b8c      	ldr	r3, [pc, #560]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a6e:	61bb      	str	r3, [r7, #24]
      break;
 8003a70:	e108      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a72:	4b88      	ldr	r3, [pc, #544]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003a7c:	4b85      	ldr	r3, [pc, #532]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a88:	4b82      	ldr	r3, [pc, #520]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a92:	4b80      	ldr	r3, [pc, #512]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	08db      	lsrs	r3, r3, #3
 8003a98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aaa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80e1 	beq.w	8003c78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	f000 8083 	beq.w	8003bc4 <HAL_RCC_GetSysClockFreq+0x204>
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	f200 80a1 	bhi.w	8003c08 <HAL_RCC_GetSysClockFreq+0x248>
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x114>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d056      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ad2:	e099      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ad4:	4b6f      	ldr	r3, [pc, #444]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d02d      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ae0:	4b6c      	ldr	r3, [pc, #432]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	08db      	lsrs	r3, r3, #3
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	4a6b      	ldr	r2, [pc, #428]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
 8003af0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	ee07 3a90 	vmov	s15, r3
 8003af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b0a:	4b62      	ldr	r3, [pc, #392]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b3a:	e087      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b46:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003ca8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4e:	4b51      	ldr	r3, [pc, #324]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b62:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b7e:	e065      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003cac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b92:	4b40      	ldr	r3, [pc, #256]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ba6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bc2:	e043      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bce:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003cb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd6:	4b2f      	ldr	r3, [pc, #188]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c06:	e021      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c12:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003cac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c4c:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	0a5b      	lsrs	r3, r3, #9
 8003c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c56:	3301      	adds	r3, #1
 8003c58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c70:	ee17 3a90 	vmov	r3, s15
 8003c74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c76:	e005      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61bb      	str	r3, [r7, #24]
      break;
 8003c7c:	e002      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c80:	61bb      	str	r3, [r7, #24]
      break;
 8003c82:	bf00      	nop
  }

  return sysclockfreq;
 8003c84:	69bb      	ldr	r3, [r7, #24]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3724      	adds	r7, #36	; 0x24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	58024400 	.word	0x58024400
 8003c98:	03d09000 	.word	0x03d09000
 8003c9c:	003d0900 	.word	0x003d0900
 8003ca0:	017d7840 	.word	0x017d7840
 8003ca4:	46000000 	.word	0x46000000
 8003ca8:	4c742400 	.word	0x4c742400
 8003cac:	4a742400 	.word	0x4a742400
 8003cb0:	4bbebc20 	.word	0x4bbebc20

08003cb4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb8:	b0ca      	sub	sp, #296	; 0x128
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003cd8:	2500      	movs	r5, #0
 8003cda:	ea54 0305 	orrs.w	r3, r4, r5
 8003cde:	d049      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cea:	d02f      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003cec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cf0:	d828      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003cf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cf6:	d01a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cfc:	d822      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d06:	d007      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d08:	e01c      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d0a:	4bb8      	ldr	r3, [pc, #736]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	4ab7      	ldr	r2, [pc, #732]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d16:	e01a      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	2102      	movs	r1, #2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 f9d1 	bl	80050c8 <RCCEx_PLL2_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d2c:	e00f      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d32:	3328      	adds	r3, #40	; 0x28
 8003d34:	2102      	movs	r1, #2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 fa78 	bl	800522c <RCCEx_PLL3_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d56:	4ba5      	ldr	r3, [pc, #660]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d64:	4aa1      	ldr	r2, [pc, #644]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d66:	430b      	orrs	r3, r1
 8003d68:	6513      	str	r3, [r2, #80]	; 0x50
 8003d6a:	e003      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003d80:	f04f 0900 	mov.w	r9, #0
 8003d84:	ea58 0309 	orrs.w	r3, r8, r9
 8003d88:	d047      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d82a      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003db1 	.word	0x08003db1
 8003da0:	08003dbf 	.word	0x08003dbf
 8003da4:	08003dd5 	.word	0x08003dd5
 8003da8:	08003df3 	.word	0x08003df3
 8003dac:	08003df3 	.word	0x08003df3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db0:	4b8e      	ldr	r3, [pc, #568]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	4a8d      	ldr	r2, [pc, #564]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dbc:	e01a      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f001 f97e 	bl	80050c8 <RCCEx_PLL2_Config>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dd2:	e00f      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd8:	3328      	adds	r3, #40	; 0x28
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f001 fa25 	bl	800522c <RCCEx_PLL3_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003de8:	e004      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003df0:	e000      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10a      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dfc:	4b7b      	ldr	r3, [pc, #492]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e00:	f023 0107 	bic.w	r1, r3, #7
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	4a78      	ldr	r2, [pc, #480]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	6513      	str	r3, [r2, #80]	; 0x50
 8003e10:	e003      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003e26:	f04f 0b00 	mov.w	fp, #0
 8003e2a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003e2e:	d04c      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3a:	d030      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e40:	d829      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e42:	2bc0      	cmp	r3, #192	; 0xc0
 8003e44:	d02d      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e46:	2bc0      	cmp	r3, #192	; 0xc0
 8003e48:	d825      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e4a:	2b80      	cmp	r3, #128	; 0x80
 8003e4c:	d018      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003e4e:	2b80      	cmp	r3, #128	; 0x80
 8003e50:	d821      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d007      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003e5a:	e01c      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e5c:	4b63      	ldr	r3, [pc, #396]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	4a62      	ldr	r2, [pc, #392]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e68:	e01c      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6e:	3308      	adds	r3, #8
 8003e70:	2100      	movs	r1, #0
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 f928 	bl	80050c8 <RCCEx_PLL2_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e7e:	e011      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e84:	3328      	adds	r3, #40	; 0x28
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 f9cf 	bl	800522c <RCCEx_PLL3_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e94:	e006      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e9c:	e002      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003eac:	4b4f      	ldr	r3, [pc, #316]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	4a4c      	ldr	r2, [pc, #304]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	6513      	str	r3, [r2, #80]	; 0x50
 8003ec0:	e003      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ec6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003ed6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003eda:	2300      	movs	r3, #0
 8003edc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003ee0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	d053      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ef6:	d035      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003efc:	d82e      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003efe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f02:	d031      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003f04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f08:	d828      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f0e:	d01a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f14:	d822      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f1e:	d007      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003f20:	e01c      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f22:	4b32      	ldr	r3, [pc, #200]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	4a31      	ldr	r2, [pc, #196]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f2e:	e01c      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f34:	3308      	adds	r3, #8
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 f8c5 	bl	80050c8 <RCCEx_PLL2_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f44:	e011      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4a:	3328      	adds	r3, #40	; 0x28
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f001 f96c 	bl	800522c <RCCEx_PLL3_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f5a:	e006      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f62:	e002      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003f64:	bf00      	nop
 8003f66:	e000      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10b      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f72:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f82:	4a1a      	ldr	r2, [pc, #104]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6593      	str	r3, [r2, #88]	; 0x58
 8003f88:	e003      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003f9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003fa8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003fac:	460b      	mov	r3, r1
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	d056      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fbe:	d038      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003fc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fc4:	d831      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fca:	d034      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003fcc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fd0:	d82b      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fd6:	d01d      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003fd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fdc:	d825      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d006      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003fe2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe6:	d00a      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003fe8:	e01f      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fea:	bf00      	nop
 8003fec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff0:	4ba2      	ldr	r3, [pc, #648]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	4aa1      	ldr	r2, [pc, #644]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ffc:	e01c      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004002:	3308      	adds	r3, #8
 8004004:	2100      	movs	r1, #0
 8004006:	4618      	mov	r0, r3
 8004008:	f001 f85e 	bl	80050c8 <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004012:	e011      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004018:	3328      	adds	r3, #40	; 0x28
 800401a:	2100      	movs	r1, #0
 800401c:	4618      	mov	r0, r3
 800401e:	f001 f905 	bl	800522c <RCCEx_PLL3_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004028:	e006      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004030:	e002      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004040:	4b8e      	ldr	r3, [pc, #568]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004044:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004050:	4a8a      	ldr	r2, [pc, #552]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004052:	430b      	orrs	r3, r1
 8004054:	6593      	str	r3, [r2, #88]	; 0x58
 8004056:	e003      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004058:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800405c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800406c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004070:	2300      	movs	r3, #0
 8004072:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004076:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800407a:	460b      	mov	r3, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	d03a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004086:	2b30      	cmp	r3, #48	; 0x30
 8004088:	d01f      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800408a:	2b30      	cmp	r3, #48	; 0x30
 800408c:	d819      	bhi.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800408e:	2b20      	cmp	r3, #32
 8004090:	d00c      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004092:	2b20      	cmp	r3, #32
 8004094:	d815      	bhi.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d019      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800409a:	2b10      	cmp	r3, #16
 800409c:	d111      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800409e:	4b77      	ldr	r3, [pc, #476]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	4a76      	ldr	r2, [pc, #472]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80040aa:	e011      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b0:	3308      	adds	r3, #8
 80040b2:	2102      	movs	r1, #2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f001 f807 	bl	80050c8 <RCCEx_PLL2_Config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80040c0:	e006      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040c8:	e002      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80040ca:	bf00      	nop
 80040cc:	e000      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80040ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80040d8:	4b68      	ldr	r3, [pc, #416]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040dc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80040e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e6:	4a65      	ldr	r2, [pc, #404]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e8:	430b      	orrs	r3, r1
 80040ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ec:	e003      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004102:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004106:	2300      	movs	r3, #0
 8004108:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800410c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004110:	460b      	mov	r3, r1
 8004112:	4313      	orrs	r3, r2
 8004114:	d051      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004120:	d035      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004122:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004126:	d82e      	bhi.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004128:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800412c:	d031      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800412e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004132:	d828      	bhi.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004138:	d01a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800413a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800413e:	d822      	bhi.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004148:	d007      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800414a:	e01c      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414c:	4b4b      	ldr	r3, [pc, #300]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	4a4a      	ldr	r2, [pc, #296]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004158:	e01c      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800415e:	3308      	adds	r3, #8
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f000 ffb0 	bl	80050c8 <RCCEx_PLL2_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800416e:	e011      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004174:	3328      	adds	r3, #40	; 0x28
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f001 f857 	bl	800522c <RCCEx_PLL3_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004184:	e006      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800418c:	e002      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800418e:	bf00      	nop
 8004190:	e000      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004194:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800419c:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800419e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041aa:	4a34      	ldr	r2, [pc, #208]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6513      	str	r3, [r2, #80]	; 0x50
 80041b0:	e003      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80041c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041ca:	2300      	movs	r3, #0
 80041cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80041d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80041d4:	460b      	mov	r3, r1
 80041d6:	4313      	orrs	r3, r2
 80041d8:	d056      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e4:	d033      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80041e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ea:	d82c      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041f0:	d02f      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80041f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041f6:	d826      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041fc:	d02b      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80041fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004202:	d820      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004208:	d012      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800420a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800420e:	d81a      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d022      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004218:	d115      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421e:	3308      	adds	r3, #8
 8004220:	2101      	movs	r1, #1
 8004222:	4618      	mov	r0, r3
 8004224:	f000 ff50 	bl	80050c8 <RCCEx_PLL2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800422e:	e015      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004234:	3328      	adds	r3, #40	; 0x28
 8004236:	2101      	movs	r1, #1
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fff7 	bl	800522c <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004244:	e00a      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800424c:	e006      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800424e:	bf00      	nop
 8004250:	e004      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004252:	bf00      	nop
 8004254:	e002      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004256:	bf00      	nop
 8004258:	e000      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800425a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10d      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004268:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004272:	4a02      	ldr	r2, [pc, #8]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004274:	430b      	orrs	r3, r1
 8004276:	6513      	str	r3, [r2, #80]	; 0x50
 8004278:	e006      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800427a:	bf00      	nop
 800427c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004284:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004298:	2300      	movs	r3, #0
 800429a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800429e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	d055      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042b4:	d033      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80042b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ba:	d82c      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c0:	d02f      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80042c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c6:	d826      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042cc:	d02b      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80042ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042d2:	d820      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d8:	d012      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80042da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042de:	d81a      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d022      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80042e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042e8:	d115      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ee:	3308      	adds	r3, #8
 80042f0:	2101      	movs	r1, #1
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fee8 	bl	80050c8 <RCCEx_PLL2_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042fe:	e015      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004304:	3328      	adds	r3, #40	; 0x28
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f000 ff8f 	bl	800522c <RCCEx_PLL3_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004314:	e00a      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800431c:	e006      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800431e:	bf00      	nop
 8004320:	e004      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800432a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004334:	4ba3      	ldr	r3, [pc, #652]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004344:	4a9f      	ldr	r2, [pc, #636]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004346:	430b      	orrs	r3, r1
 8004348:	6593      	str	r3, [r2, #88]	; 0x58
 800434a:	e003      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004350:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004364:	2300      	movs	r3, #0
 8004366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800436a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800436e:	460b      	mov	r3, r1
 8004370:	4313      	orrs	r3, r2
 8004372:	d037      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800437e:	d00e      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004384:	d816      	bhi.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d018      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800438a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800438e:	d111      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004390:	4b8c      	ldr	r3, [pc, #560]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	4a8b      	ldr	r2, [pc, #556]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800439a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800439c:	e00f      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a2:	3308      	adds	r3, #8
 80043a4:	2101      	movs	r1, #1
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fe8e 	bl	80050c8 <RCCEx_PLL2_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043b2:	e004      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043ba:	e000      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80043bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043c6:	4b7f      	ldr	r3, [pc, #508]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	4a7b      	ldr	r2, [pc, #492]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d6:	430b      	orrs	r3, r1
 80043d8:	6513      	str	r3, [r2, #80]	; 0x50
 80043da:	e003      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80043f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043f4:	2300      	movs	r3, #0
 80043f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80043fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80043fe:	460b      	mov	r3, r1
 8004400:	4313      	orrs	r3, r2
 8004402:	d039      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440a:	2b03      	cmp	r3, #3
 800440c:	d81c      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800440e:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	08004451 	.word	0x08004451
 8004418:	08004425 	.word	0x08004425
 800441c:	08004433 	.word	0x08004433
 8004420:	08004451 	.word	0x08004451
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004424:	4b67      	ldr	r3, [pc, #412]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	4a66      	ldr	r2, [pc, #408]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800442a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004430:	e00f      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004436:	3308      	adds	r3, #8
 8004438:	2102      	movs	r1, #2
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fe44 	bl	80050c8 <RCCEx_PLL2_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004446:	e004      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800445a:	4b5a      	ldr	r3, [pc, #360]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	f023 0103 	bic.w	r1, r3, #3
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004468:	4a56      	ldr	r2, [pc, #344]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800446a:	430b      	orrs	r3, r1
 800446c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800446e:	e003      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004474:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004484:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004488:	2300      	movs	r3, #0
 800448a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800448e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	f000 809f 	beq.w	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800449a:	4b4b      	ldr	r3, [pc, #300]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a4a      	ldr	r2, [pc, #296]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80044a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044a6:	f7fc ffb7 	bl	8001418 <HAL_GetTick>
 80044aa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044ae:	e00b      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b0:	f7fc ffb2 	bl	8001418 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b64      	cmp	r3, #100	; 0x64
 80044be:	d903      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044c6:	e005      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044c8:	4b3f      	ldr	r3, [pc, #252]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ed      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80044d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d179      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80044dc:	4b39      	ldr	r3, [pc, #228]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044e8:	4053      	eors	r3, r2
 80044ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d015      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044f2:	4b34      	ldr	r3, [pc, #208]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044fe:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	4a30      	ldr	r2, [pc, #192]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004508:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800450a:	4b2e      	ldr	r3, [pc, #184]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a2d      	ldr	r2, [pc, #180]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004514:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004516:	4a2b      	ldr	r2, [pc, #172]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004518:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800451c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004522:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452a:	d118      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fc ff74 	bl	8001418 <HAL_GetTick>
 8004530:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004534:	e00d      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fc ff6f 	bl	8001418 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004540:	1ad2      	subs	r2, r2, r3
 8004542:	f241 3388 	movw	r3, #5000	; 0x1388
 8004546:	429a      	cmp	r2, r3
 8004548:	d903      	bls.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004550:	e005      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004552:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0eb      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800455e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004562:	2b00      	cmp	r3, #0
 8004564:	d129      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004576:	d10e      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004578:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004584:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004588:	091a      	lsrs	r2, r3, #4
 800458a:	4b10      	ldr	r3, [pc, #64]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800458c:	4013      	ands	r3, r2
 800458e:	4a0d      	ldr	r2, [pc, #52]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004590:	430b      	orrs	r3, r1
 8004592:	6113      	str	r3, [r2, #16]
 8004594:	e005      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800459c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045a0:	6113      	str	r3, [r2, #16]
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b2:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6713      	str	r3, [r2, #112]	; 0x70
 80045b8:	e00e      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80045c2:	e009      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80045c4:	58024400 	.word	0x58024400
 80045c8:	58024800 	.word	0x58024800
 80045cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	f002 0301 	and.w	r3, r2, #1
 80045e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045e8:	2300      	movs	r3, #0
 80045ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f000 8089 	beq.w	800470c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004600:	2b28      	cmp	r3, #40	; 0x28
 8004602:	d86b      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004604:	a201      	add	r2, pc, #4	; (adr r2, 800460c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	080046e5 	.word	0x080046e5
 8004610:	080046dd 	.word	0x080046dd
 8004614:	080046dd 	.word	0x080046dd
 8004618:	080046dd 	.word	0x080046dd
 800461c:	080046dd 	.word	0x080046dd
 8004620:	080046dd 	.word	0x080046dd
 8004624:	080046dd 	.word	0x080046dd
 8004628:	080046dd 	.word	0x080046dd
 800462c:	080046b1 	.word	0x080046b1
 8004630:	080046dd 	.word	0x080046dd
 8004634:	080046dd 	.word	0x080046dd
 8004638:	080046dd 	.word	0x080046dd
 800463c:	080046dd 	.word	0x080046dd
 8004640:	080046dd 	.word	0x080046dd
 8004644:	080046dd 	.word	0x080046dd
 8004648:	080046dd 	.word	0x080046dd
 800464c:	080046c7 	.word	0x080046c7
 8004650:	080046dd 	.word	0x080046dd
 8004654:	080046dd 	.word	0x080046dd
 8004658:	080046dd 	.word	0x080046dd
 800465c:	080046dd 	.word	0x080046dd
 8004660:	080046dd 	.word	0x080046dd
 8004664:	080046dd 	.word	0x080046dd
 8004668:	080046dd 	.word	0x080046dd
 800466c:	080046e5 	.word	0x080046e5
 8004670:	080046dd 	.word	0x080046dd
 8004674:	080046dd 	.word	0x080046dd
 8004678:	080046dd 	.word	0x080046dd
 800467c:	080046dd 	.word	0x080046dd
 8004680:	080046dd 	.word	0x080046dd
 8004684:	080046dd 	.word	0x080046dd
 8004688:	080046dd 	.word	0x080046dd
 800468c:	080046e5 	.word	0x080046e5
 8004690:	080046dd 	.word	0x080046dd
 8004694:	080046dd 	.word	0x080046dd
 8004698:	080046dd 	.word	0x080046dd
 800469c:	080046dd 	.word	0x080046dd
 80046a0:	080046dd 	.word	0x080046dd
 80046a4:	080046dd 	.word	0x080046dd
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	080046e5 	.word	0x080046e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b4:	3308      	adds	r3, #8
 80046b6:	2101      	movs	r1, #1
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fd05 	bl	80050c8 <RCCEx_PLL2_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80046c4:	e00f      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ca:	3328      	adds	r3, #40	; 0x28
 80046cc:	2101      	movs	r1, #1
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fdac 	bl	800522c <RCCEx_PLL3_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80046da:	e004      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046e2:	e000      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80046e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80046ee:	4bbf      	ldr	r3, [pc, #764]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046fc:	4abb      	ldr	r2, [pc, #748]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046fe:	430b      	orrs	r3, r1
 8004700:	6553      	str	r3, [r2, #84]	; 0x54
 8004702:	e003      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004708:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f002 0302 	and.w	r3, r2, #2
 8004718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004722:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004726:	460b      	mov	r3, r1
 8004728:	4313      	orrs	r3, r2
 800472a:	d041      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004732:	2b05      	cmp	r3, #5
 8004734:	d824      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004736:	a201      	add	r2, pc, #4	; (adr r2, 800473c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473c:	08004789 	.word	0x08004789
 8004740:	08004755 	.word	0x08004755
 8004744:	0800476b 	.word	0x0800476b
 8004748:	08004789 	.word	0x08004789
 800474c:	08004789 	.word	0x08004789
 8004750:	08004789 	.word	0x08004789
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004758:	3308      	adds	r3, #8
 800475a:	2101      	movs	r1, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fcb3 	bl	80050c8 <RCCEx_PLL2_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004768:	e00f      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800476a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476e:	3328      	adds	r3, #40	; 0x28
 8004770:	2101      	movs	r1, #1
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fd5a 	bl	800522c <RCCEx_PLL3_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800477e:	e004      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004786:	e000      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004792:	4b96      	ldr	r3, [pc, #600]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004796:	f023 0107 	bic.w	r1, r3, #7
 800479a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047a0:	4a92      	ldr	r2, [pc, #584]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047a2:	430b      	orrs	r3, r1
 80047a4:	6553      	str	r3, [r2, #84]	; 0x54
 80047a6:	e003      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f002 0304 	and.w	r3, r2, #4
 80047bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047c0:	2300      	movs	r3, #0
 80047c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4313      	orrs	r3, r2
 80047ce:	d044      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d825      	bhi.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80047dc:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80047de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	08004831 	.word	0x08004831
 80047e8:	080047fd 	.word	0x080047fd
 80047ec:	08004813 	.word	0x08004813
 80047f0:	08004831 	.word	0x08004831
 80047f4:	08004831 	.word	0x08004831
 80047f8:	08004831 	.word	0x08004831
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004800:	3308      	adds	r3, #8
 8004802:	2101      	movs	r1, #1
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fc5f 	bl	80050c8 <RCCEx_PLL2_Config>
 800480a:	4603      	mov	r3, r0
 800480c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004810:	e00f      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004816:	3328      	adds	r3, #40	; 0x28
 8004818:	2101      	movs	r1, #1
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fd06 	bl	800522c <RCCEx_PLL3_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004826:	e004      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800482e:	e000      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10b      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800483a:	4b6c      	ldr	r3, [pc, #432]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800483c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483e:	f023 0107 	bic.w	r1, r3, #7
 8004842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484a:	4a68      	ldr	r2, [pc, #416]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800484c:	430b      	orrs	r3, r1
 800484e:	6593      	str	r3, [r2, #88]	; 0x58
 8004850:	e003      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004856:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	f002 0320 	and.w	r3, r2, #32
 8004866:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800486a:	2300      	movs	r3, #0
 800486c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004870:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004874:	460b      	mov	r3, r1
 8004876:	4313      	orrs	r3, r2
 8004878:	d055      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004886:	d033      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800488c:	d82c      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004892:	d02f      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004898:	d826      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800489a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800489e:	d02b      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80048a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048a4:	d820      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80048a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048aa:	d012      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80048ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048b0:	d81a      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d022      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80048b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ba:	d115      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c0:	3308      	adds	r3, #8
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fbff 	bl	80050c8 <RCCEx_PLL2_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80048d0:	e015      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d6:	3328      	adds	r3, #40	; 0x28
 80048d8:	2102      	movs	r1, #2
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fca6 	bl	800522c <RCCEx_PLL3_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80048e6:	e00a      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048ee:	e006      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048f0:	bf00      	nop
 80048f2:	e004      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048f4:	bf00      	nop
 80048f6:	e002      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048f8:	bf00      	nop
 80048fa:	e000      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10b      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004906:	4b39      	ldr	r3, [pc, #228]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	4a35      	ldr	r2, [pc, #212]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004918:	430b      	orrs	r3, r1
 800491a:	6553      	str	r3, [r2, #84]	; 0x54
 800491c:	e003      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004922:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004936:	2300      	movs	r3, #0
 8004938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800493c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004940:	460b      	mov	r3, r1
 8004942:	4313      	orrs	r3, r2
 8004944:	d058      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800494a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800494e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004952:	d033      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004954:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004958:	d82c      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495e:	d02f      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004964:	d826      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004966:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800496a:	d02b      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800496c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004970:	d820      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004976:	d012      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800497c:	d81a      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d022      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004986:	d115      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498c:	3308      	adds	r3, #8
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fb99 	bl	80050c8 <RCCEx_PLL2_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800499c:	e015      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a2:	3328      	adds	r3, #40	; 0x28
 80049a4:	2102      	movs	r1, #2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fc40 	bl	800522c <RCCEx_PLL3_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049b2:	e00a      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049ba:	e006      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049bc:	bf00      	nop
 80049be:	e004      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049c0:	bf00      	nop
 80049c2:	e002      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049c4:	bf00      	nop
 80049c6:	e000      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10e      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80049da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049e2:	4a02      	ldr	r2, [pc, #8]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049e4:	430b      	orrs	r3, r1
 80049e6:	6593      	str	r3, [r2, #88]	; 0x58
 80049e8:	e006      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80049ea:	bf00      	nop
 80049ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80049f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004a12:	460b      	mov	r3, r1
 8004a14:	4313      	orrs	r3, r2
 8004a16:	d055      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a20:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a24:	d033      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004a26:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a2a:	d82c      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a30:	d02f      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a36:	d826      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a38:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a3c:	d02b      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004a3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a42:	d820      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a48:	d012      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004a4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a4e:	d81a      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d022      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a58:	d115      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a5e:	3308      	adds	r3, #8
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fb30 	bl	80050c8 <RCCEx_PLL2_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a6e:	e015      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a74:	3328      	adds	r3, #40	; 0x28
 8004a76:	2102      	movs	r1, #2
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fbd7 	bl	800522c <RCCEx_PLL3_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a84:	e00a      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a8c:	e006      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a8e:	bf00      	nop
 8004a90:	e004      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a92:	bf00      	nop
 8004a94:	e002      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a96:	bf00      	nop
 8004a98:	e000      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10b      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004aa4:	4ba1      	ldr	r3, [pc, #644]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ab4:	4a9d      	ldr	r2, [pc, #628]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8004aba:	e003      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f002 0308 	and.w	r3, r2, #8
 8004ad0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ada:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	d01e      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af6:	3328      	adds	r3, #40	; 0x28
 8004af8:	2102      	movs	r1, #2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fb96 	bl	800522c <RCCEx_PLL3_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b0c:	4b87      	ldr	r3, [pc, #540]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1c:	4a83      	ldr	r2, [pc, #524]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	f002 0310 	and.w	r3, r2, #16
 8004b2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b32:	2300      	movs	r3, #0
 8004b34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004b38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	d01e      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4e:	d10c      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b54:	3328      	adds	r3, #40	; 0x28
 8004b56:	2102      	movs	r1, #2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fb67 	bl	800522c <RCCEx_PLL3_Config>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b6a:	4b70      	ldr	r3, [pc, #448]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b7a:	4a6c      	ldr	r2, [pc, #432]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004b8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	d03e      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ba8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bac:	d022      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bb2:	d81b      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004bbe:	e015      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fa7d 	bl	80050c8 <RCCEx_PLL2_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004bd4:	e00f      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bda:	3328      	adds	r3, #40	; 0x28
 8004bdc:	2102      	movs	r1, #2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fb24 	bl	800522c <RCCEx_PLL3_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004bea:	e004      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10b      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bfe:	4b4b      	ldr	r3, [pc, #300]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c0e:	4a47      	ldr	r2, [pc, #284]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6593      	str	r3, [r2, #88]	; 0x58
 8004c14:	e003      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004c2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004c34:	460b      	mov	r3, r1
 8004c36:	4313      	orrs	r3, r2
 8004c38:	d03b      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c46:	d01f      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004c48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c4c:	d818      	bhi.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c52:	d003      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004c54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c58:	d007      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004c5a:	e011      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c5c:	4b33      	ldr	r3, [pc, #204]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	4a32      	ldr	r2, [pc, #200]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c68:	e00f      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c6e:	3328      	adds	r3, #40	; 0x28
 8004c70:	2101      	movs	r1, #1
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fada 	bl	800522c <RCCEx_PLL3_Config>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c7e:	e004      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c86:	e000      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10b      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c92:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	4a22      	ldr	r2, [pc, #136]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6553      	str	r3, [r2, #84]	; 0x54
 8004ca8:	e003      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004cbe:	673b      	str	r3, [r7, #112]	; 0x70
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	677b      	str	r3, [r7, #116]	; 0x74
 8004cc4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	d034      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d007      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004cde:	e011      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce0:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	4a11      	ldr	r2, [pc, #68]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004cec:	e00e      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 f9e6 	bl	80050c8 <RCCEx_PLL2_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d02:	e003      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10d      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d22:	4a02      	ldr	r2, [pc, #8]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d24:	430b      	orrs	r3, r1
 8004d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d28:	e006      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004d2a:	bf00      	nop
 8004d2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d46:	2300      	movs	r3, #0
 8004d48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4313      	orrs	r3, r2
 8004d52:	d00c      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d58:	3328      	adds	r3, #40	; 0x28
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fa65 	bl	800522c <RCCEx_PLL3_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004d7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	667b      	str	r3, [r7, #100]	; 0x64
 8004d80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004d84:	460b      	mov	r3, r1
 8004d86:	4313      	orrs	r3, r2
 8004d88:	d038      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d96:	d018      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d9c:	d811      	bhi.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da2:	d014      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da8:	d80b      	bhi.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d011      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db2:	d106      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db4:	4bc3      	ldr	r3, [pc, #780]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	4ac2      	ldr	r2, [pc, #776]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dc8:	e004      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004dca:	bf00      	nop
 8004dcc:	e002      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004dce:	bf00      	nop
 8004dd0:	e000      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10b      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ddc:	4bb9      	ldr	r3, [pc, #740]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dec:	4ab5      	ldr	r2, [pc, #724]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dee:	430b      	orrs	r3, r1
 8004df0:	6553      	str	r3, [r2, #84]	; 0x54
 8004df2:	e003      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004df8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004e08:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e0e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004e12:	460b      	mov	r3, r1
 8004e14:	4313      	orrs	r3, r2
 8004e16:	d009      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e18:	4baa      	ldr	r3, [pc, #680]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e26:	4aa7      	ldr	r2, [pc, #668]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004e38:	653b      	str	r3, [r7, #80]	; 0x50
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	657b      	str	r3, [r7, #84]	; 0x54
 8004e3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004e42:	460b      	mov	r3, r1
 8004e44:	4313      	orrs	r3, r2
 8004e46:	d00a      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004e48:	4b9e      	ldr	r3, [pc, #632]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004e58:	4a9a      	ldr	r2, [pc, #616]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e70:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004e74:	460b      	mov	r3, r1
 8004e76:	4313      	orrs	r3, r2
 8004e78:	d009      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e7a:	4b92      	ldr	r3, [pc, #584]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e88:	4a8e      	ldr	r2, [pc, #568]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004ea0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	d00e      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eaa:	4b86      	ldr	r3, [pc, #536]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	4a85      	ldr	r2, [pc, #532]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eb4:	6113      	str	r3, [r2, #16]
 8004eb6:	4b83      	ldr	r3, [pc, #524]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eb8:	6919      	ldr	r1, [r3, #16]
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ebe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ec2:	4a80      	ldr	r2, [pc, #512]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004ed4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eda:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	d009      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ee4:	4b77      	ldr	r3, [pc, #476]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef2:	4a74      	ldr	r2, [pc, #464]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004f04:	633b      	str	r3, [r7, #48]	; 0x30
 8004f06:	2300      	movs	r3, #0
 8004f08:	637b      	str	r3, [r7, #52]	; 0x34
 8004f0a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4313      	orrs	r3, r2
 8004f12:	d00a      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f14:	4b6b      	ldr	r3, [pc, #428]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f24:	4a67      	ldr	r2, [pc, #412]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	2100      	movs	r1, #0
 8004f34:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004f40:	460b      	mov	r3, r1
 8004f42:	4313      	orrs	r3, r2
 8004f44:	d011      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 f8ba 	bl	80050c8 <RCCEx_PLL2_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	2100      	movs	r1, #0
 8004f74:	6239      	str	r1, [r7, #32]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004f80:	460b      	mov	r3, r1
 8004f82:	4313      	orrs	r3, r2
 8004f84:	d011      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f89a 	bl	80050c8 <RCCEx_PLL2_Config>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	61b9      	str	r1, [r7, #24]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	61fb      	str	r3, [r7, #28]
 8004fbc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	d011      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fca:	3308      	adds	r3, #8
 8004fcc:	2102      	movs	r1, #2
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f87a 	bl	80050c8 <RCCEx_PLL2_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004fda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	6139      	str	r1, [r7, #16]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005000:	460b      	mov	r3, r1
 8005002:	4313      	orrs	r3, r2
 8005004:	d011      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800500a:	3328      	adds	r3, #40	; 0x28
 800500c:	2100      	movs	r1, #0
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f90c 	bl	800522c <RCCEx_PLL3_Config>
 8005014:	4603      	mov	r3, r0
 8005016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800501a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005026:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800502a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	2100      	movs	r1, #0
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005040:	460b      	mov	r3, r1
 8005042:	4313      	orrs	r3, r2
 8005044:	d011      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800504a:	3328      	adds	r3, #40	; 0x28
 800504c:	2101      	movs	r1, #1
 800504e:	4618      	mov	r0, r3
 8005050:	f000 f8ec 	bl	800522c <RCCEx_PLL3_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800505a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005062:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005066:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800506a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	2100      	movs	r1, #0
 8005074:	6039      	str	r1, [r7, #0]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005080:	460b      	mov	r3, r1
 8005082:	4313      	orrs	r3, r2
 8005084:	d011      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800508a:	3328      	adds	r3, #40	; 0x28
 800508c:	2102      	movs	r1, #2
 800508e:	4618      	mov	r0, r3
 8005090:	f000 f8cc 	bl	800522c <RCCEx_PLL3_Config>
 8005094:	4603      	mov	r3, r0
 8005096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800509a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80050aa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	e000      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80050be:	46bd      	mov	sp, r7
 80050c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c4:	58024400 	.word	0x58024400

080050c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050d6:	4b53      	ldr	r3, [pc, #332]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d101      	bne.n	80050e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e099      	b.n	800521a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050e6:	4b4f      	ldr	r3, [pc, #316]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a4e      	ldr	r2, [pc, #312]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80050ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f2:	f7fc f991 	bl	8001418 <HAL_GetTick>
 80050f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050f8:	e008      	b.n	800510c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050fa:	f7fc f98d 	bl	8001418 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e086      	b.n	800521a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800510c:	4b45      	ldr	r3, [pc, #276]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1f0      	bne.n	80050fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005118:	4b42      	ldr	r3, [pc, #264]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 800511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	031b      	lsls	r3, r3, #12
 8005126:	493f      	ldr	r1, [pc, #252]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005128:	4313      	orrs	r3, r2
 800512a:	628b      	str	r3, [r1, #40]	; 0x28
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	3b01      	subs	r3, #1
 8005132:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	3b01      	subs	r3, #1
 800513c:	025b      	lsls	r3, r3, #9
 800513e:	b29b      	uxth	r3, r3
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	3b01      	subs	r3, #1
 8005148:	041b      	lsls	r3, r3, #16
 800514a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	3b01      	subs	r3, #1
 8005156:	061b      	lsls	r3, r3, #24
 8005158:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800515c:	4931      	ldr	r1, [pc, #196]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005162:	4b30      	ldr	r3, [pc, #192]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	492d      	ldr	r1, [pc, #180]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005170:	4313      	orrs	r3, r2
 8005172:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005174:	4b2b      	ldr	r3, [pc, #172]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	f023 0220 	bic.w	r2, r3, #32
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	4928      	ldr	r1, [pc, #160]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005182:	4313      	orrs	r3, r2
 8005184:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005186:	4b27      	ldr	r3, [pc, #156]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	4a26      	ldr	r2, [pc, #152]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 800518c:	f023 0310 	bic.w	r3, r3, #16
 8005190:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 8005194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005196:	4b24      	ldr	r3, [pc, #144]	; (8005228 <RCCEx_PLL2_Config+0x160>)
 8005198:	4013      	ands	r3, r2
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	69d2      	ldr	r2, [r2, #28]
 800519e:	00d2      	lsls	r2, r2, #3
 80051a0:	4920      	ldr	r1, [pc, #128]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80051a6:	4b1f      	ldr	r3, [pc, #124]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	4a1e      	ldr	r2, [pc, #120]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051ac:	f043 0310 	orr.w	r3, r3, #16
 80051b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d106      	bne.n	80051c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051b8:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	4a19      	ldr	r2, [pc, #100]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051c4:	e00f      	b.n	80051e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d106      	bne.n	80051da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051cc:	4b15      	ldr	r3, [pc, #84]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	4a14      	ldr	r2, [pc, #80]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051d8:	e005      	b.n	80051e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051da:	4b12      	ldr	r3, [pc, #72]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	4a11      	ldr	r2, [pc, #68]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051e6:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a0e      	ldr	r2, [pc, #56]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 80051ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f2:	f7fc f911 	bl	8001418 <HAL_GetTick>
 80051f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051f8:	e008      	b.n	800520c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051fa:	f7fc f90d 	bl	8001418 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e006      	b.n	800521a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <RCCEx_PLL2_Config+0x15c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0f0      	beq.n	80051fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005218:	7bfb      	ldrb	r3, [r7, #15]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	58024400 	.word	0x58024400
 8005228:	ffff0007 	.word	0xffff0007

0800522c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800523a:	4b53      	ldr	r3, [pc, #332]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b03      	cmp	r3, #3
 8005244:	d101      	bne.n	800524a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e099      	b.n	800537e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800524a:	4b4f      	ldr	r3, [pc, #316]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a4e      	ldr	r2, [pc, #312]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005256:	f7fc f8df 	bl	8001418 <HAL_GetTick>
 800525a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800525c:	e008      	b.n	8005270 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800525e:	f7fc f8db 	bl	8001418 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e086      	b.n	800537e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005270:	4b45      	ldr	r3, [pc, #276]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1f0      	bne.n	800525e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800527c:	4b42      	ldr	r3, [pc, #264]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	051b      	lsls	r3, r3, #20
 800528a:	493f      	ldr	r1, [pc, #252]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800528c:	4313      	orrs	r3, r2
 800528e:	628b      	str	r3, [r1, #40]	; 0x28
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	3b01      	subs	r3, #1
 8005296:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	3b01      	subs	r3, #1
 80052a0:	025b      	lsls	r3, r3, #9
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	041b      	lsls	r3, r3, #16
 80052ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	061b      	lsls	r3, r3, #24
 80052bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052c0:	4931      	ldr	r1, [pc, #196]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052c6:	4b30      	ldr	r3, [pc, #192]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	492d      	ldr	r1, [pc, #180]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052d8:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	4928      	ldr	r1, [pc, #160]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052ea:	4b27      	ldr	r3, [pc, #156]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	4a26      	ldr	r2, [pc, #152]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052f6:	4b24      	ldr	r3, [pc, #144]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 80052f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052fa:	4b24      	ldr	r3, [pc, #144]	; (800538c <RCCEx_PLL3_Config+0x160>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	69d2      	ldr	r2, [r2, #28]
 8005302:	00d2      	lsls	r2, r2, #3
 8005304:	4920      	ldr	r1, [pc, #128]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005306:	4313      	orrs	r3, r2
 8005308:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800530a:	4b1f      	ldr	r3, [pc, #124]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	4a1e      	ldr	r2, [pc, #120]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005314:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d106      	bne.n	800532a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800531c:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	4a19      	ldr	r2, [pc, #100]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005322:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005326:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005328:	e00f      	b.n	800534a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d106      	bne.n	800533e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005330:	4b15      	ldr	r3, [pc, #84]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	4a14      	ldr	r2, [pc, #80]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005336:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800533a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800533c:	e005      	b.n	800534a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800533e:	4b12      	ldr	r3, [pc, #72]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	4a11      	ldr	r2, [pc, #68]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005348:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800534a:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a0e      	ldr	r2, [pc, #56]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005356:	f7fc f85f 	bl	8001418 <HAL_GetTick>
 800535a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800535c:	e008      	b.n	8005370 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800535e:	f7fc f85b 	bl	8001418 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e006      	b.n	800537e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <RCCEx_PLL3_Config+0x15c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0f0      	beq.n	800535e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800537c:	7bfb      	ldrb	r3, [r7, #15]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	58024400 	.word	0x58024400
 800538c:	ffff0007 	.word	0xffff0007

08005390 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e054      	b.n	800544c <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	7a5b      	ldrb	r3, [r3, #9]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fb fe8a 	bl	80010cc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f023 0120 	bic.w	r1, r3, #32
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0204 	orr.w	r2, r2, #4
 80053e2:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ee:	2b40      	cmp	r3, #64	; 0x40
 80053f0:	d104      	bne.n	80053fc <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2204      	movs	r2, #4
 80053f6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e027      	b.n	800544c <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80053fc:	f7fc f80c 	bl	8001418 <HAL_GetTick>
 8005400:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005402:	e015      	b.n	8005430 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005404:	f7fc f808 	bl	8001418 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d90e      	bls.n	8005430 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b04      	cmp	r3, #4
 800541e:	d107      	bne.n	8005430 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2204      	movs	r2, #4
 8005424:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2202      	movs	r2, #2
 800542a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e00d      	b.n	800544c <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b04      	cmp	r3, #4
 800543c:	d0e2      	beq.n	8005404 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	7a1b      	ldrb	r3, [r3, #8]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_RNG_GenerateRandomNumber+0x1a>
 800546a:	2302      	movs	r3, #2
 800546c:	e044      	b.n	80054f8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	7a5b      	ldrb	r3, [r3, #9]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b01      	cmp	r3, #1
 800547c:	d133      	bne.n	80054e6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2202      	movs	r2, #2
 8005482:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8005484:	f7fb ffc8 	bl	8001418 <HAL_GetTick>
 8005488:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800548a:	e018      	b.n	80054be <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800548c:	f7fb ffc4 	bl	8001418 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d911      	bls.n	80054be <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d00a      	beq.n	80054be <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e01c      	b.n	80054f8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d1df      	bne.n	800548c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	725a      	strb	r2, [r3, #9]
 80054e4:	e004      	b.n	80054f0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2204      	movs	r2, #4
 80054ea:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	721a      	strb	r2, [r3, #8]

  return status;
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <__errno>:
 8005500:	4b01      	ldr	r3, [pc, #4]	; (8005508 <__errno+0x8>)
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	24000010 	.word	0x24000010

0800550c <__libc_init_array>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	4d0d      	ldr	r5, [pc, #52]	; (8005544 <__libc_init_array+0x38>)
 8005510:	4c0d      	ldr	r4, [pc, #52]	; (8005548 <__libc_init_array+0x3c>)
 8005512:	1b64      	subs	r4, r4, r5
 8005514:	10a4      	asrs	r4, r4, #2
 8005516:	2600      	movs	r6, #0
 8005518:	42a6      	cmp	r6, r4
 800551a:	d109      	bne.n	8005530 <__libc_init_array+0x24>
 800551c:	4d0b      	ldr	r5, [pc, #44]	; (800554c <__libc_init_array+0x40>)
 800551e:	4c0c      	ldr	r4, [pc, #48]	; (8005550 <__libc_init_array+0x44>)
 8005520:	f000 fb26 	bl	8005b70 <_init>
 8005524:	1b64      	subs	r4, r4, r5
 8005526:	10a4      	asrs	r4, r4, #2
 8005528:	2600      	movs	r6, #0
 800552a:	42a6      	cmp	r6, r4
 800552c:	d105      	bne.n	800553a <__libc_init_array+0x2e>
 800552e:	bd70      	pop	{r4, r5, r6, pc}
 8005530:	f855 3b04 	ldr.w	r3, [r5], #4
 8005534:	4798      	blx	r3
 8005536:	3601      	adds	r6, #1
 8005538:	e7ee      	b.n	8005518 <__libc_init_array+0xc>
 800553a:	f855 3b04 	ldr.w	r3, [r5], #4
 800553e:	4798      	blx	r3
 8005540:	3601      	adds	r6, #1
 8005542:	e7f2      	b.n	800552a <__libc_init_array+0x1e>
 8005544:	080074b0 	.word	0x080074b0
 8005548:	080074b0 	.word	0x080074b0
 800554c:	080074b0 	.word	0x080074b0
 8005550:	080074b4 	.word	0x080074b4

08005554 <memcpy>:
 8005554:	440a      	add	r2, r1
 8005556:	4291      	cmp	r1, r2
 8005558:	f100 33ff 	add.w	r3, r0, #4294967295
 800555c:	d100      	bne.n	8005560 <memcpy+0xc>
 800555e:	4770      	bx	lr
 8005560:	b510      	push	{r4, lr}
 8005562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800556a:	4291      	cmp	r1, r2
 800556c:	d1f9      	bne.n	8005562 <memcpy+0xe>
 800556e:	bd10      	pop	{r4, pc}

08005570 <memset>:
 8005570:	4402      	add	r2, r0
 8005572:	4603      	mov	r3, r0
 8005574:	4293      	cmp	r3, r2
 8005576:	d100      	bne.n	800557a <memset+0xa>
 8005578:	4770      	bx	lr
 800557a:	f803 1b01 	strb.w	r1, [r3], #1
 800557e:	e7f9      	b.n	8005574 <memset+0x4>

08005580 <checkint>:
 8005580:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005584:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8005588:	429a      	cmp	r2, r3
 800558a:	b570      	push	{r4, r5, r6, lr}
 800558c:	dd2a      	ble.n	80055e4 <checkint+0x64>
 800558e:	f240 4333 	movw	r3, #1075	; 0x433
 8005592:	429a      	cmp	r2, r3
 8005594:	dc24      	bgt.n	80055e0 <checkint+0x60>
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	f1a3 0620 	sub.w	r6, r3, #32
 800559c:	f04f 32ff 	mov.w	r2, #4294967295
 80055a0:	fa02 f403 	lsl.w	r4, r2, r3
 80055a4:	fa02 f606 	lsl.w	r6, r2, r6
 80055a8:	f1c3 0520 	rsb	r5, r3, #32
 80055ac:	fa22 f505 	lsr.w	r5, r2, r5
 80055b0:	4334      	orrs	r4, r6
 80055b2:	432c      	orrs	r4, r5
 80055b4:	409a      	lsls	r2, r3
 80055b6:	ea20 0202 	bic.w	r2, r0, r2
 80055ba:	ea21 0404 	bic.w	r4, r1, r4
 80055be:	4322      	orrs	r2, r4
 80055c0:	f1a3 0420 	sub.w	r4, r3, #32
 80055c4:	f1c3 0220 	rsb	r2, r3, #32
 80055c8:	d10c      	bne.n	80055e4 <checkint+0x64>
 80055ca:	40d8      	lsrs	r0, r3
 80055cc:	fa01 f302 	lsl.w	r3, r1, r2
 80055d0:	4318      	orrs	r0, r3
 80055d2:	40e1      	lsrs	r1, r4
 80055d4:	4308      	orrs	r0, r1
 80055d6:	f000 0001 	and.w	r0, r0, #1
 80055da:	f1d0 0002 	rsbs	r0, r0, #2
 80055de:	bd70      	pop	{r4, r5, r6, pc}
 80055e0:	2002      	movs	r0, #2
 80055e2:	e7fc      	b.n	80055de <checkint+0x5e>
 80055e4:	2000      	movs	r0, #0
 80055e6:	e7fa      	b.n	80055de <checkint+0x5e>

080055e8 <pow>:
 80055e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ec:	ee10 4a90 	vmov	r4, s1
 80055f0:	ed2d 8b0a 	vpush	{d8-d12}
 80055f4:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80055f8:	ee11 7a90 	vmov	r7, s3
 80055fc:	f10a 32ff 	add.w	r2, sl, #4294967295
 8005600:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8005604:	429a      	cmp	r2, r3
 8005606:	ee10 6a10 	vmov	r6, s0
 800560a:	ee11 0a10 	vmov	r0, s2
 800560e:	b086      	sub	sp, #24
 8005610:	46d4      	mov	ip, sl
 8005612:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8005616:	d806      	bhi.n	8005626 <pow+0x3e>
 8005618:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800561c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8005620:	2b7f      	cmp	r3, #127	; 0x7f
 8005622:	f240 8156 	bls.w	80058d2 <pow+0x2ea>
 8005626:	1802      	adds	r2, r0, r0
 8005628:	eb47 0107 	adc.w	r1, r7, r7
 800562c:	f06f 0e01 	mvn.w	lr, #1
 8005630:	f112 39ff 	adds.w	r9, r2, #4294967295
 8005634:	f141 38ff 	adc.w	r8, r1, #4294967295
 8005638:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800563c:	45ce      	cmp	lr, r9
 800563e:	eb73 0808 	sbcs.w	r8, r3, r8
 8005642:	d23f      	bcs.n	80056c4 <pow+0xdc>
 8005644:	ea52 0301 	orrs.w	r3, r2, r1
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	d10c      	bne.n	8005668 <pow+0x80>
 800564e:	19b6      	adds	r6, r6, r6
 8005650:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8005654:	4164      	adcs	r4, r4
 8005656:	42b3      	cmp	r3, r6
 8005658:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800565c:	41a3      	sbcs	r3, r4
 800565e:	f0c0 808c 	bcc.w	800577a <pow+0x192>
 8005662:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8005666:	e028      	b.n	80056ba <pow+0xd2>
 8005668:	4da3      	ldr	r5, [pc, #652]	; (80058f8 <pow+0x310>)
 800566a:	42ac      	cmp	r4, r5
 800566c:	bf08      	it	eq
 800566e:	429e      	cmpeq	r6, r3
 8005670:	d107      	bne.n	8005682 <pow+0x9a>
 8005672:	1800      	adds	r0, r0, r0
 8005674:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8005678:	417f      	adcs	r7, r7
 800567a:	4283      	cmp	r3, r0
 800567c:	4b9f      	ldr	r3, [pc, #636]	; (80058fc <pow+0x314>)
 800567e:	41bb      	sbcs	r3, r7
 8005680:	e7ed      	b.n	800565e <pow+0x76>
 8005682:	19b6      	adds	r6, r6, r6
 8005684:	489e      	ldr	r0, [pc, #632]	; (8005900 <pow+0x318>)
 8005686:	4164      	adcs	r4, r4
 8005688:	42b3      	cmp	r3, r6
 800568a:	eb70 0504 	sbcs.w	r5, r0, r4
 800568e:	d374      	bcc.n	800577a <pow+0x192>
 8005690:	4281      	cmp	r1, r0
 8005692:	bf08      	it	eq
 8005694:	429a      	cmpeq	r2, r3
 8005696:	d170      	bne.n	800577a <pow+0x192>
 8005698:	4a9a      	ldr	r2, [pc, #616]	; (8005904 <pow+0x31c>)
 800569a:	4294      	cmp	r4, r2
 800569c:	bf08      	it	eq
 800569e:	429e      	cmpeq	r6, r3
 80056a0:	d0df      	beq.n	8005662 <pow+0x7a>
 80056a2:	4294      	cmp	r4, r2
 80056a4:	ea6f 0707 	mvn.w	r7, r7
 80056a8:	bf34      	ite	cc
 80056aa:	2400      	movcc	r4, #0
 80056ac:	2401      	movcs	r4, #1
 80056ae:	0fff      	lsrs	r7, r7, #31
 80056b0:	42bc      	cmp	r4, r7
 80056b2:	f040 81d9 	bne.w	8005a68 <pow+0x480>
 80056b6:	ee21 0b01 	vmul.f64	d0, d1, d1
 80056ba:	b006      	add	sp, #24
 80056bc:	ecbd 8b0a 	vpop	{d8-d12}
 80056c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c4:	eb16 0806 	adds.w	r8, r6, r6
 80056c8:	eb44 0904 	adc.w	r9, r4, r4
 80056cc:	f118 31ff 	adds.w	r1, r8, #4294967295
 80056d0:	f169 0200 	sbc.w	r2, r9, #0
 80056d4:	458e      	cmp	lr, r1
 80056d6:	4193      	sbcs	r3, r2
 80056d8:	d223      	bcs.n	8005722 <pow+0x13a>
 80056da:	ee20 0b00 	vmul.f64	d0, d0, d0
 80056de:	2c00      	cmp	r4, #0
 80056e0:	da12      	bge.n	8005708 <pow+0x120>
 80056e2:	4639      	mov	r1, r7
 80056e4:	f7ff ff4c 	bl	8005580 <checkint>
 80056e8:	2801      	cmp	r0, #1
 80056ea:	d10d      	bne.n	8005708 <pow+0x120>
 80056ec:	eeb1 0b40 	vneg.f64	d0, d0
 80056f0:	ea58 0309 	orrs.w	r3, r8, r9
 80056f4:	d10a      	bne.n	800570c <pow+0x124>
 80056f6:	2f00      	cmp	r7, #0
 80056f8:	dadf      	bge.n	80056ba <pow+0xd2>
 80056fa:	b006      	add	sp, #24
 80056fc:	ecbd 8b0a 	vpop	{d8-d12}
 8005700:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005704:	f000 b9f0 	b.w	8005ae8 <__math_divzero>
 8005708:	2000      	movs	r0, #0
 800570a:	e7f1      	b.n	80056f0 <pow+0x108>
 800570c:	2f00      	cmp	r7, #0
 800570e:	dad4      	bge.n	80056ba <pow+0xd2>
 8005710:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005714:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8005718:	ed8d 7b00 	vstr	d7, [sp]
 800571c:	ed9d 0b00 	vldr	d0, [sp]
 8005720:	e7cb      	b.n	80056ba <pow+0xd2>
 8005722:	2c00      	cmp	r4, #0
 8005724:	da2c      	bge.n	8005780 <pow+0x198>
 8005726:	4639      	mov	r1, r7
 8005728:	f7ff ff2a 	bl	8005580 <checkint>
 800572c:	b930      	cbnz	r0, 800573c <pow+0x154>
 800572e:	b006      	add	sp, #24
 8005730:	ecbd 8b0a 	vpop	{d8-d12}
 8005734:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005738:	f000 b9ee 	b.w	8005b18 <__math_invalid>
 800573c:	2801      	cmp	r0, #1
 800573e:	bf14      	ite	ne
 8005740:	2000      	movne	r0, #0
 8005742:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8005746:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800574a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800574e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8005752:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8005756:	2b7f      	cmp	r3, #127	; 0x7f
 8005758:	d92d      	bls.n	80057b6 <pow+0x1ce>
 800575a:	4b67      	ldr	r3, [pc, #412]	; (80058f8 <pow+0x310>)
 800575c:	2000      	movs	r0, #0
 800575e:	429c      	cmp	r4, r3
 8005760:	bf08      	it	eq
 8005762:	4286      	cmpeq	r6, r0
 8005764:	f43f af7d 	beq.w	8005662 <pow+0x7a>
 8005768:	f240 31bd 	movw	r1, #957	; 0x3bd
 800576c:	428a      	cmp	r2, r1
 800576e:	d80c      	bhi.n	800578a <pow+0x1a2>
 8005770:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8005774:	42b0      	cmp	r0, r6
 8005776:	41a3      	sbcs	r3, r4
 8005778:	d204      	bcs.n	8005784 <pow+0x19c>
 800577a:	ee31 0b00 	vadd.f64	d0, d1, d0
 800577e:	e79c      	b.n	80056ba <pow+0xd2>
 8005780:	2000      	movs	r0, #0
 8005782:	e7e4      	b.n	800574e <pow+0x166>
 8005784:	ee30 0b41 	vsub.f64	d0, d0, d1
 8005788:	e797      	b.n	80056ba <pow+0xd2>
 800578a:	2e01      	cmp	r6, #1
 800578c:	eb74 0303 	sbcs.w	r3, r4, r3
 8005790:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005794:	bf34      	ite	cc
 8005796:	2301      	movcc	r3, #1
 8005798:	2300      	movcs	r3, #0
 800579a:	4295      	cmp	r5, r2
 800579c:	bf8c      	ite	hi
 800579e:	2500      	movhi	r5, #0
 80057a0:	2501      	movls	r5, #1
 80057a2:	42ab      	cmp	r3, r5
 80057a4:	f000 809d 	beq.w	80058e2 <pow+0x2fa>
 80057a8:	b006      	add	sp, #24
 80057aa:	ecbd 8b0a 	vpop	{d8-d12}
 80057ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b2:	f000 b991 	b.w	8005ad8 <__math_oflow>
 80057b6:	f1bc 0f00 	cmp.w	ip, #0
 80057ba:	d10b      	bne.n	80057d4 <pow+0x1ec>
 80057bc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80058f0 <pow+0x308>
 80057c0:	ee20 7b07 	vmul.f64	d7, d0, d7
 80057c4:	ec53 2b17 	vmov	r2, r3, d7
 80057c8:	ee17 6a10 	vmov	r6, s14
 80057cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80057d0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80057d4:	4b4c      	ldr	r3, [pc, #304]	; (8005908 <pow+0x320>)
 80057d6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80057da:	4423      	add	r3, r4
 80057dc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80057e0:	1519      	asrs	r1, r3, #20
 80057e2:	0d1b      	lsrs	r3, r3, #20
 80057e4:	051b      	lsls	r3, r3, #20
 80057e6:	eba4 0903 	sub.w	r9, r4, r3
 80057ea:	4b48      	ldr	r3, [pc, #288]	; (800590c <pow+0x324>)
 80057ec:	ee04 1a10 	vmov	s8, r1
 80057f0:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80057f4:	f1b6 0800 	subs.w	r8, r6, #0
 80057f8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80057fc:	ec49 8b15 	vmov	d5, r8, r9
 8005800:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8005804:	eea5 6b07 	vfma.f64	d6, d5, d7
 8005808:	ed93 7b00 	vldr	d7, [r3]
 800580c:	ed93 5b02 	vldr	d5, [r3, #8]
 8005810:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8005814:	eea4 2b07 	vfma.f64	d2, d4, d7
 8005818:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800581c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8005820:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8005824:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005828:	ed93 5b04 	vldr	d5, [r3, #16]
 800582c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8005830:	ee37 7b02 	vadd.f64	d7, d7, d2
 8005834:	ee26 5b05 	vmul.f64	d5, d6, d5
 8005838:	ed93 4b08 	vldr	d4, [r3, #32]
 800583c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8005840:	eeb0 9b40 	vmov.f64	d9, d0
 8005844:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8005848:	ed93 5b06 	vldr	d5, [r3, #24]
 800584c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8005850:	ee26 bb00 	vmul.f64	d11, d6, d0
 8005854:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8005858:	eea6 5b04 	vfma.f64	d5, d6, d4
 800585c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8005860:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8005864:	ee37 9b09 	vadd.f64	d9, d7, d9
 8005868:	ee3a ab00 	vadd.f64	d10, d10, d0
 800586c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8005870:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8005874:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8005878:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800587c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8005880:	eea0 4b03 	vfma.f64	d4, d0, d3
 8005884:	eea0 5b04 	vfma.f64	d5, d0, d4
 8005888:	eeab ab05 	vfma.f64	d10, d11, d5
 800588c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8005890:	ee21 7b06 	vmul.f64	d7, d1, d6
 8005894:	ee17 3a90 	vmov	r3, s15
 8005898:	eeb0 5b47 	vmov.f64	d5, d7
 800589c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80058a0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80058a4:	18b2      	adds	r2, r6, r2
 80058a6:	2a3e      	cmp	r2, #62	; 0x3e
 80058a8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80058ac:	ee38 8b46 	vsub.f64	d8, d8, d6
 80058b0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80058b4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80058b8:	d92b      	bls.n	8005912 <pow+0x32a>
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	da0b      	bge.n	80058d6 <pow+0x2ee>
 80058be:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80058c2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80058c6:	2800      	cmp	r0, #0
 80058c8:	f43f aef7 	beq.w	80056ba <pow+0xd2>
 80058cc:	eeb1 0b40 	vneg.f64	d0, d0
 80058d0:	e6f3      	b.n	80056ba <pow+0xd2>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e77e      	b.n	80057d4 <pow+0x1ec>
 80058d6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 80058da:	d919      	bls.n	8005910 <pow+0x328>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f6bf af63 	bge.w	80057a8 <pow+0x1c0>
 80058e2:	b006      	add	sp, #24
 80058e4:	ecbd 8b0a 	vpop	{d8-d12}
 80058e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ec:	f000 b8ec 	b.w	8005ac8 <__math_uflow>
 80058f0:	00000000 	.word	0x00000000
 80058f4:	43300000 	.word	0x43300000
 80058f8:	3ff00000 	.word	0x3ff00000
 80058fc:	fff00000 	.word	0xfff00000
 8005900:	ffe00000 	.word	0xffe00000
 8005904:	7fe00000 	.word	0x7fe00000
 8005908:	c0196aab 	.word	0xc0196aab
 800590c:	08005bf8 	.word	0x08005bf8
 8005910:	2600      	movs	r6, #0
 8005912:	495d      	ldr	r1, [pc, #372]	; (8005a88 <pow+0x4a0>)
 8005914:	ed91 4b02 	vldr	d4, [r1, #8]
 8005918:	ed91 3b00 	vldr	d3, [r1]
 800591c:	eeb0 6b44 	vmov.f64	d6, d4
 8005920:	eea7 6b03 	vfma.f64	d6, d7, d3
 8005924:	ee16 5a10 	vmov	r5, s12
 8005928:	ee36 6b44 	vsub.f64	d6, d6, d4
 800592c:	ed91 4b04 	vldr	d4, [r1, #16]
 8005930:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8005934:	eea6 7b04 	vfma.f64	d7, d6, d4
 8005938:	eeb0 0b47 	vmov.f64	d0, d7
 800593c:	ed91 7b06 	vldr	d7, [r1, #24]
 8005940:	18dc      	adds	r4, r3, r3
 8005942:	f104 030f 	add.w	r3, r4, #15
 8005946:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800594a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800594e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8005952:	ee35 0b00 	vadd.f64	d0, d5, d0
 8005956:	ee20 6b00 	vmul.f64	d6, d0, d0
 800595a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800595e:	ed91 5b08 	vldr	d5, [r1, #32]
 8005962:	ee30 7b07 	vadd.f64	d7, d0, d7
 8005966:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800596a:	eea0 5b04 	vfma.f64	d5, d0, d4
 800596e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8005972:	eea6 7b05 	vfma.f64	d7, d6, d5
 8005976:	ee26 6b06 	vmul.f64	d6, d6, d6
 800597a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800597e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8005982:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8005986:	eea0 5b04 	vfma.f64	d5, d0, d4
 800598a:	1940      	adds	r0, r0, r5
 800598c:	2700      	movs	r7, #0
 800598e:	eb17 020c 	adds.w	r2, r7, ip
 8005992:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8005996:	eea6 7b05 	vfma.f64	d7, d6, d5
 800599a:	2e00      	cmp	r6, #0
 800599c:	d15f      	bne.n	8005a5e <pow+0x476>
 800599e:	42bd      	cmp	r5, r7
 80059a0:	db13      	blt.n	80059ca <pow+0x3e2>
 80059a2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80059a6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80059aa:	4610      	mov	r0, r2
 80059ac:	ec41 0b10 	vmov	d0, r0, r1
 80059b0:	eea7 0b00 	vfma.f64	d0, d7, d0
 80059b4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005a70 <pow+0x488>
 80059b8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80059bc:	b006      	add	sp, #24
 80059be:	ecbd 8b0a 	vpop	{d8-d12}
 80059c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c6:	f000 b8bf 	b.w	8005b48 <__math_check_oflow>
 80059ca:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80059ce:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80059d2:	4610      	mov	r0, r2
 80059d4:	ec41 0b15 	vmov	d5, r0, r1
 80059d8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80059dc:	ee27 6b05 	vmul.f64	d6, d7, d5
 80059e0:	ee35 7b06 	vadd.f64	d7, d5, d6
 80059e4:	eeb0 3bc7 	vabs.f64	d3, d7
 80059e8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80059ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005a78 <pow+0x490>
 80059f4:	d52a      	bpl.n	8005a4c <pow+0x464>
 80059f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80059fa:	ee35 5b47 	vsub.f64	d5, d5, d7
 80059fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a02:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8005a06:	ee35 6b06 	vadd.f64	d6, d5, d6
 8005a0a:	bf48      	it	mi
 8005a0c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8005a10:	ee37 3b04 	vadd.f64	d3, d7, d4
 8005a14:	ee34 5b43 	vsub.f64	d5, d4, d3
 8005a18:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005a1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a20:	ee37 7b03 	vadd.f64	d7, d7, d3
 8005a24:	ee37 7b44 	vsub.f64	d7, d7, d4
 8005a28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a30:	d104      	bne.n	8005a3c <pow+0x454>
 8005a32:	4632      	mov	r2, r6
 8005a34:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005a38:	ec43 2b17 	vmov	d7, r2, r3
 8005a3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a40:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005a44:	ee26 6b00 	vmul.f64	d6, d6, d0
 8005a48:	ed8d 6b04 	vstr	d6, [sp, #16]
 8005a4c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8005a50:	b006      	add	sp, #24
 8005a52:	ecbd 8b0a 	vpop	{d8-d12}
 8005a56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a5a:	f000 b86c 	b.w	8005b36 <__math_check_uflow>
 8005a5e:	ec43 2b10 	vmov	d0, r2, r3
 8005a62:	eea7 0b00 	vfma.f64	d0, d7, d0
 8005a66:	e628      	b.n	80056ba <pow+0xd2>
 8005a68:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005a80 <pow+0x498>
 8005a6c:	e625      	b.n	80056ba <pow+0xd2>
 8005a6e:	bf00      	nop
 8005a70:	00000000 	.word	0x00000000
 8005a74:	7f000000 	.word	0x7f000000
 8005a78:	00000000 	.word	0x00000000
 8005a7c:	00100000 	.word	0x00100000
	...
 8005a88:	08006c40 	.word	0x08006c40

08005a8c <with_errno>:
 8005a8c:	b513      	push	{r0, r1, r4, lr}
 8005a8e:	4604      	mov	r4, r0
 8005a90:	ed8d 0b00 	vstr	d0, [sp]
 8005a94:	f7ff fd34 	bl	8005500 <__errno>
 8005a98:	ed9d 0b00 	vldr	d0, [sp]
 8005a9c:	6004      	str	r4, [r0, #0]
 8005a9e:	b002      	add	sp, #8
 8005aa0:	bd10      	pop	{r4, pc}

08005aa2 <xflow>:
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	b158      	cbz	r0, 8005abe <xflow+0x1c>
 8005aa6:	eeb1 7b40 	vneg.f64	d7, d0
 8005aaa:	ed8d 7b00 	vstr	d7, [sp]
 8005aae:	ed9d 7b00 	vldr	d7, [sp]
 8005ab2:	2022      	movs	r0, #34	; 0x22
 8005ab4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005ab8:	b002      	add	sp, #8
 8005aba:	f7ff bfe7 	b.w	8005a8c <with_errno>
 8005abe:	eeb0 7b40 	vmov.f64	d7, d0
 8005ac2:	e7f2      	b.n	8005aaa <xflow+0x8>
 8005ac4:	0000      	movs	r0, r0
	...

08005ac8 <__math_uflow>:
 8005ac8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005ad0 <__math_uflow+0x8>
 8005acc:	f7ff bfe9 	b.w	8005aa2 <xflow>
 8005ad0:	00000000 	.word	0x00000000
 8005ad4:	10000000 	.word	0x10000000

08005ad8 <__math_oflow>:
 8005ad8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005ae0 <__math_oflow+0x8>
 8005adc:	f7ff bfe1 	b.w	8005aa2 <xflow>
 8005ae0:	00000000 	.word	0x00000000
 8005ae4:	70000000 	.word	0x70000000

08005ae8 <__math_divzero>:
 8005ae8:	b082      	sub	sp, #8
 8005aea:	2800      	cmp	r0, #0
 8005aec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005af0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8005af4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8005af8:	ed8d 7b00 	vstr	d7, [sp]
 8005afc:	ed9d 0b00 	vldr	d0, [sp]
 8005b00:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8005b10 <__math_divzero+0x28>
 8005b04:	2022      	movs	r0, #34	; 0x22
 8005b06:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8005b0a:	b002      	add	sp, #8
 8005b0c:	f7ff bfbe 	b.w	8005a8c <with_errno>
	...

08005b18 <__math_invalid>:
 8005b18:	eeb0 7b40 	vmov.f64	d7, d0
 8005b1c:	eeb4 7b47 	vcmp.f64	d7, d7
 8005b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b24:	ee30 6b40 	vsub.f64	d6, d0, d0
 8005b28:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8005b2c:	d602      	bvs.n	8005b34 <__math_invalid+0x1c>
 8005b2e:	2021      	movs	r0, #33	; 0x21
 8005b30:	f7ff bfac 	b.w	8005a8c <with_errno>
 8005b34:	4770      	bx	lr

08005b36 <__math_check_uflow>:
 8005b36:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8005b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3e:	d102      	bne.n	8005b46 <__math_check_uflow+0x10>
 8005b40:	2022      	movs	r0, #34	; 0x22
 8005b42:	f7ff bfa3 	b.w	8005a8c <with_errno>
 8005b46:	4770      	bx	lr

08005b48 <__math_check_oflow>:
 8005b48:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8005b68 <__math_check_oflow+0x20>
 8005b4c:	eeb0 7bc0 	vabs.f64	d7, d0
 8005b50:	eeb4 7b46 	vcmp.f64	d7, d6
 8005b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b58:	dd02      	ble.n	8005b60 <__math_check_oflow+0x18>
 8005b5a:	2022      	movs	r0, #34	; 0x22
 8005b5c:	f7ff bf96 	b.w	8005a8c <with_errno>
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	f3af 8000 	nop.w
 8005b68:	ffffffff 	.word	0xffffffff
 8005b6c:	7fefffff 	.word	0x7fefffff

08005b70 <_init>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	bf00      	nop
 8005b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b76:	bc08      	pop	{r3}
 8005b78:	469e      	mov	lr, r3
 8005b7a:	4770      	bx	lr

08005b7c <_fini>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	bf00      	nop
 8005b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b82:	bc08      	pop	{r3}
 8005b84:	469e      	mov	lr, r3
 8005b86:	4770      	bx	lr

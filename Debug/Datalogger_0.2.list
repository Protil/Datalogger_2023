
Datalogger_0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b774  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800ba0c  0800ba0c  0001ba0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bf00  0800bf00  0001bf00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bf08  0800bf08  0001bf08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bf0c  0800bf0c  0001bf0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800bf10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008f0  24000010  0800bf20  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24000900  0800bf20  00020900  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018781  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000300e  00000000  00000000  000387bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001180  00000000  00000000  0003b7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001038  00000000  00000000  0003c950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039085  00000000  00000000  0003d988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a2cc  00000000  00000000  00076a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015de0b  00000000  00000000  00090cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001eeae4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000047a8  00000000  00000000  001eeb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b9f4 	.word	0x0800b9f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800b9f4 	.word	0x0800b9f4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SD_Criar_Arquivo>:

// Usamos 8.3 format file name (SFN), que permite 9 bits no nome, isso signfica que só podemos colocar 8 letras no nome do arquivo, imagino que a 9 seja um caracter de terminacao ou o


FRESULT SD_Criar_Arquivo(const char* nomeArquivo)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	FRESULT fresult;

	fresult = f_mount(&g_sFatFs, "0:", 0);	/*mount SD card*/
 80005e4:	2200      	movs	r2, #0
 80005e6:	4913      	ldr	r1, [pc, #76]	; (8000634 <SD_Criar_Arquivo+0x58>)
 80005e8:	4813      	ldr	r0, [pc, #76]	; (8000638 <SD_Criar_Arquivo+0x5c>)
 80005ea:	f00a fc5b 	bl	800aea4 <f_mount>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]

	fresult = f_stat(nomeArquivo, &fileInfo);
 80005f2:	4912      	ldr	r1, [pc, #72]	; (800063c <SD_Criar_Arquivo+0x60>)
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f00b f876 	bl	800b6e6 <f_stat>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73fb      	strb	r3, [r7, #15]

	fresult = f_open(&file, nomeArquivo, FA_CREATE_ALWAYS ); /*Create file on SD card*/
 80005fe:	2208      	movs	r2, #8
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	480f      	ldr	r0, [pc, #60]	; (8000640 <SD_Criar_Arquivo+0x64>)
 8000604:	f00a fc94 	bl	800af30 <f_open>
 8000608:	4603      	mov	r3, r0
 800060a:	73fb      	strb	r3, [r7, #15]

	fresult = f_close(&file);
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <SD_Criar_Arquivo+0x64>)
 800060e:	f00b f840 	bl	800b692 <f_close>
 8000612:	4603      	mov	r3, r0
 8000614:	73fb      	strb	r3, [r7, #15]

    f_close(&file);
 8000616:	480a      	ldr	r0, [pc, #40]	; (8000640 <SD_Criar_Arquivo+0x64>)
 8000618:	f00b f83b 	bl	800b692 <f_close>

    //O unmount é a função mount adaptada como abaixo, de acordo com http://elm-chan.org/fsw/ff/doc/mount.html
	fresult = f_mount(0, "0:", 0);	/*unmount SD card*/
 800061c:	2200      	movs	r2, #0
 800061e:	4905      	ldr	r1, [pc, #20]	; (8000634 <SD_Criar_Arquivo+0x58>)
 8000620:	2000      	movs	r0, #0
 8000622:	f00a fc3f 	bl	800aea4 <f_mount>
 8000626:	4603      	mov	r3, r0
 8000628:	73fb      	strb	r3, [r7, #15]

	return fresult;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	0800ba0c 	.word	0x0800ba0c
 8000638:	2400002c 	.word	0x2400002c
 800063c:	24000490 	.word	0x24000490
 8000640:	24000260 	.word	0x24000260

08000644 <SD_Escrever_Arquivo>:

	return fresult;
}

FRESULT SD_Escrever_Arquivo(const char* nomeArquivo, const char* informacao)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	FRESULT fresult;

	uint bw;
	fresult = f_mount(&g_sFatFs, "0:", 0);	/*mount SD card*/
 800064e:	2200      	movs	r2, #0
 8000650:	4912      	ldr	r1, [pc, #72]	; (800069c <SD_Escrever_Arquivo+0x58>)
 8000652:	4813      	ldr	r0, [pc, #76]	; (80006a0 <SD_Escrever_Arquivo+0x5c>)
 8000654:	f00a fc26 	bl	800aea4 <f_mount>
 8000658:	4603      	mov	r3, r0
 800065a:	73fb      	strb	r3, [r7, #15]
	fresult = f_open(&file, nomeArquivo, FA_WRITE );
 800065c:	2202      	movs	r2, #2
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	4810      	ldr	r0, [pc, #64]	; (80006a4 <SD_Escrever_Arquivo+0x60>)
 8000662:	f00a fc65 	bl	800af30 <f_open>
 8000666:	4603      	mov	r3, r0
 8000668:	73fb      	strb	r3, [r7, #15]
	fresult = f_write(&file, informacao, 10, &bw);
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	220a      	movs	r2, #10
 8000670:	6839      	ldr	r1, [r7, #0]
 8000672:	480c      	ldr	r0, [pc, #48]	; (80006a4 <SD_Escrever_Arquivo+0x60>)
 8000674:	f00a fe1a 	bl	800b2ac <f_write>
 8000678:	4603      	mov	r3, r0
 800067a:	73fb      	strb	r3, [r7, #15]
	fresult = f_mount(0, "0:", 0);	/*unmount SD card*/
 800067c:	2200      	movs	r2, #0
 800067e:	4907      	ldr	r1, [pc, #28]	; (800069c <SD_Escrever_Arquivo+0x58>)
 8000680:	2000      	movs	r0, #0
 8000682:	f00a fc0f 	bl	800aea4 <f_mount>
 8000686:	4603      	mov	r3, r0
 8000688:	73fb      	strb	r3, [r7, #15]

    f_close(&file);
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <SD_Escrever_Arquivo+0x60>)
 800068c:	f00b f801 	bl	800b692 <f_close>

	return fresult;
 8000690:	7bfb      	ldrb	r3, [r7, #15]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	0800ba0c 	.word	0x0800ba0c
 80006a0:	2400002c 	.word	0x2400002c
 80006a4:	24000260 	.word	0x24000260

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fbbd 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f82d 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 f913 	bl	80008e0 <MX_GPIO_Init>
  MX_UART4_Init();
 80006ba:	f000 f8c5 	bl	8000848 <MX_UART4_Init>
  MX_SDMMC1_SD_Init();
 80006be:	f000 f8a5 	bl	800080c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80006c2:	f007 ffa3 	bl	800860c <MX_FATFS_Init>
  //HAL_SD_WriteBlocks(&hsd1, (const uint8_t*)"Oi David", 1, 1, 500);



  // precisa resolver, arquivo esta indo corrompido
  const char* nomeArquivo = "teste_clara.txt";
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <main+0x5c>)
 80006c8:	607b      	str	r3, [r7, #4]
  const char* informacao = "a cada um";
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <main+0x60>)
 80006cc:	603b      	str	r3, [r7, #0]
  //char infoLida[50] = {0};
  SD_Criar_Arquivo(nomeArquivo);
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ff84 	bl	80005dc <SD_Criar_Arquivo>
  SD_Escrever_Arquivo(nomeArquivo, informacao);
 80006d4:	6839      	ldr	r1, [r7, #0]
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ffb4 	bl	8000644 <SD_Escrever_Arquivo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 80006dc:	2108      	movs	r1, #8
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <main+0x64>)
 80006e0:	f000 ff57 	bl	8001592 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_4);
 80006e4:	2110      	movs	r1, #16
 80006e6:	4809      	ldr	r0, [pc, #36]	; (800070c <main+0x64>)
 80006e8:	f000 ff53 	bl	8001592 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5);
 80006ec:	2120      	movs	r1, #32
 80006ee:	4807      	ldr	r0, [pc, #28]	; (800070c <main+0x64>)
 80006f0:	f000 ff4f 	bl	8001592 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <main+0x64>)
 80006f8:	f000 ff4b 	bl	8001592 <HAL_GPIO_TogglePin>

	  // Isso aqui talvez mande uma msg não sei
	  // O objetivo é mandar tudo por UART e não ter que ficar tirando o cartão sd toda hora, que é chato :)
	  //HAL_UART_Transmit(&huart4, "Telles me ajuda\n", 17, 200);

	  HAL_Delay(100);
 80006fc:	2064      	movs	r0, #100	; 0x64
 80006fe:	f000 fc27 	bl	8000f50 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 8000702:	e7eb      	b.n	80006dc <main+0x34>
 8000704:	0800ba10 	.word	0x0800ba10
 8000708:	0800ba20 	.word	0x0800ba20
 800070c:	58020c00 	.word	0x58020c00

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09c      	sub	sp, #112	; 0x70
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	224c      	movs	r2, #76	; 0x4c
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00b f960 	bl	800b9e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2220      	movs	r2, #32
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f00b f95a 	bl	800b9e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000730:	2002      	movs	r0, #2
 8000732:	f000 ff49 	bl	80015c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <SystemClock_Config+0xf4>)
 800073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073e:	4a31      	ldr	r2, [pc, #196]	; (8000804 <SystemClock_Config+0xf4>)
 8000740:	f023 0301 	bic.w	r3, r3, #1
 8000744:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <SystemClock_Config+0xf4>)
 8000748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <SystemClock_Config+0xf8>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000758:	4a2b      	ldr	r2, [pc, #172]	; (8000808 <SystemClock_Config+0xf8>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b29      	ldr	r3, [pc, #164]	; (8000808 <SystemClock_Config+0xf8>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800076c:	bf00      	nop
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <SystemClock_Config+0xf8>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800077a:	d1f8      	bne.n	800076e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000780:	2301      	movs	r3, #1
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2340      	movs	r3, #64	; 0x40
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000794:	2309      	movs	r3, #9
 8000796:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007a4:	230c      	movs	r3, #12
 80007a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80007a8:	2302      	movs	r3, #2
 80007aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80007ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 ff40 	bl	800163c <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007c2:	f000 f92f 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	233f      	movs	r3, #63	; 0x3f
 80007c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007da:	2340      	movs	r3, #64	; 0x40
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2101      	movs	r1, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fb80 	bl	8001ef0 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xea>
  {
    Error_Handler();
 80007f6:	f000 f915 	bl	8000a24 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3770      	adds	r7, #112	; 0x70
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	58000400 	.word	0x58000400
 8000808:	58024800 	.word	0x58024800

0800080c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_SDMMC1_SD_Init+0x34>)
 8000812:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <MX_SDMMC1_SD_Init+0x38>)
 8000814:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <MX_SDMMC1_SD_Init+0x34>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_SDMMC1_SD_Init+0x34>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <MX_SDMMC1_SD_Init+0x34>)
 8000824:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000828:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <MX_SDMMC1_SD_Init+0x34>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <MX_SDMMC1_SD_Init+0x34>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	240005a8 	.word	0x240005a8
 8000844:	52007000 	.word	0x52007000

08000848 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_UART4_Init+0x90>)
 800084e:	4a23      	ldr	r2, [pc, #140]	; (80008dc <MX_UART4_Init+0x94>)
 8000850:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_UART4_Init+0x90>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_UART4_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_UART4_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_UART4_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_UART4_Init+0x90>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_UART4_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_UART4_Init+0x90>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_UART4_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_UART4_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_UART4_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000890:	4811      	ldr	r0, [pc, #68]	; (80008d8 <MX_UART4_Init+0x90>)
 8000892:	f006 f81b 	bl	80068cc <HAL_UART_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800089c:	f000 f8c2 	bl	8000a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_UART4_Init+0x90>)
 80008a4:	f007 f81d 	bl	80078e2 <HAL_UARTEx_SetTxFifoThreshold>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80008ae:	f000 f8b9 	bl	8000a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4808      	ldr	r0, [pc, #32]	; (80008d8 <MX_UART4_Init+0x90>)
 80008b6:	f007 f852 	bl	800795e <HAL_UARTEx_SetRxFifoThreshold>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80008c0:	f000 f8b0 	bl	8000a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_UART4_Init+0x90>)
 80008c6:	f006 ffd3 	bl	8007870 <HAL_UARTEx_DisableFifoMode>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80008d0:	f000 f8a8 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	24000624 	.word	0x24000624
 80008dc:	40004c00 	.word	0x40004c00

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <MX_GPIO_Init+0x138>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	4a46      	ldr	r2, [pc, #280]	; (8000a18 <MX_GPIO_Init+0x138>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000906:	4b44      	ldr	r3, [pc, #272]	; (8000a18 <MX_GPIO_Init+0x138>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000914:	4b40      	ldr	r3, [pc, #256]	; (8000a18 <MX_GPIO_Init+0x138>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	4a3f      	ldr	r2, [pc, #252]	; (8000a18 <MX_GPIO_Init+0x138>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000924:	4b3c      	ldr	r3, [pc, #240]	; (8000a18 <MX_GPIO_Init+0x138>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b39      	ldr	r3, [pc, #228]	; (8000a18 <MX_GPIO_Init+0x138>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	4a37      	ldr	r2, [pc, #220]	; (8000a18 <MX_GPIO_Init+0x138>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000942:	4b35      	ldr	r3, [pc, #212]	; (8000a18 <MX_GPIO_Init+0x138>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000948:	f003 0304 	and.w	r3, r3, #4
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000950:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <MX_GPIO_Init+0x138>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000956:	4a30      	ldr	r2, [pc, #192]	; (8000a18 <MX_GPIO_Init+0x138>)
 8000958:	f043 0310 	orr.w	r3, r3, #16
 800095c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000960:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <MX_GPIO_Init+0x138>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Can_LED_Pin|Gps_LED_Pin|Datalogger_LED_Pin|Accel_LED_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2178      	movs	r1, #120	; 0x78
 8000972:	482a      	ldr	r0, [pc, #168]	; (8000a1c <MX_GPIO_Init+0x13c>)
 8000974:	f000 fdf4 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI3;
 800098a:	2306      	movs	r3, #6
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4821      	ldr	r0, [pc, #132]	; (8000a1c <MX_GPIO_Init+0x13c>)
 8000996:	f000 fc1b 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800099a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 80009ac:	230f      	movs	r3, #15
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4819      	ldr	r0, [pc, #100]	; (8000a1c <MX_GPIO_Init+0x13c>)
 80009b8:	f000 fc0a 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 80009bc:	2301      	movs	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4813      	ldr	r0, [pc, #76]	; (8000a1c <MX_GPIO_Init+0x13c>)
 80009d0:	f000 fbfe 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Can_LED_Pin Gps_LED_Pin Datalogger_LED_Pin Accel_LED_Pin */
  GPIO_InitStruct.Pin = Can_LED_Pin|Gps_LED_Pin|Datalogger_LED_Pin|Accel_LED_Pin;
 80009d4:	2378      	movs	r3, #120	; 0x78
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MX_GPIO_Init+0x13c>)
 80009ec:	f000 fbf0 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009f0:	2302      	movs	r3, #2
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a00:	230d      	movs	r3, #13
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_GPIO_Init+0x140>)
 8000a0c:	f000 fbe0 	bl	80011d0 <HAL_GPIO_Init>

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	58024400 	.word	0x58024400
 8000a1c:	58020c00 	.word	0x58020c00
 8000a20:	58021000 	.word	0x58021000

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_MspInit+0x30>)
 8000a38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a3c:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x30>)
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x30>)
 8000a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	58024400 	.word	0x58024400

08000a64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0bc      	sub	sp, #240	; 0xf0
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a7c:	f107 0318 	add.w	r3, r7, #24
 8000a80:	22c0      	movs	r2, #192	; 0xc0
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f00a ffad 	bl	800b9e4 <memset>
  if(hsd->Instance==SDMMC1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a3c      	ldr	r2, [pc, #240]	; (8000b80 <HAL_SD_MspInit+0x11c>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d171      	bne.n	8000b78 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000a94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fdad 	bl	8002608 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000ab4:	f7ff ffb6 	bl	8000a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ab8:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <HAL_SD_MspInit+0x120>)
 8000aba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000abe:	4a31      	ldr	r2, [pc, #196]	; (8000b84 <HAL_SD_MspInit+0x120>)
 8000ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <HAL_SD_MspInit+0x120>)
 8000aca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <HAL_SD_MspInit+0x120>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	4a29      	ldr	r2, [pc, #164]	; (8000b84 <HAL_SD_MspInit+0x120>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae6:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <HAL_SD_MspInit+0x120>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <HAL_SD_MspInit+0x120>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <HAL_SD_MspInit+0x120>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <HAL_SD_MspInit+0x120>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b12:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b36:	4619      	mov	r1, r3
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <HAL_SD_MspInit+0x124>)
 8000b3a:	f000 fb49 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000b56:	230c      	movs	r3, #12
 8000b58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b60:	4619      	mov	r1, r3
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <HAL_SD_MspInit+0x128>)
 8000b64:	f000 fb34 	bl	80011d0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2031      	movs	r0, #49	; 0x31
 8000b6e:	f000 fafa 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000b72:	2031      	movs	r0, #49	; 0x31
 8000b74:	f000 fb11 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	37f0      	adds	r7, #240	; 0xf0
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	52007000 	.word	0x52007000
 8000b84:	58024400 	.word	0x58024400
 8000b88:	58020800 	.word	0x58020800
 8000b8c:	58020c00 	.word	0x58020c00

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0ba      	sub	sp, #232	; 0xe8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	22c0      	movs	r2, #192	; 0xc0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f00a ff17 	bl	800b9e4 <memset>
  if(huart->Instance==UART4)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <HAL_UART_MspInit+0xc4>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d145      	bne.n	8000c4c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000bc0:	f04f 0202 	mov.w	r2, #2
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 fd16 	bl	8002608 <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000be2:	f7ff ff1f 	bl	8000a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_UART_MspInit+0xc8>)
 8000be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bec:	4a1a      	ldr	r2, [pc, #104]	; (8000c58 <HAL_UART_MspInit+0xc8>)
 8000bee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_UART_MspInit+0xc8>)
 8000bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_UART_MspInit+0xc8>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <HAL_UART_MspInit+0xc8>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_UART_MspInit+0xc8>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c22:	2303      	movs	r3, #3
 8000c24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c44:	4619      	mov	r1, r3
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0xcc>)
 8000c48:	f000 fac2 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	37e8      	adds	r7, #232	; 0xe8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40004c00 	.word	0x40004c00
 8000c58:	58024400 	.word	0x58024400
 8000c5c:	58020000 	.word	0x58020000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 f930 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <SDMMC1_IRQHandler+0x10>)
 8000cba:	f004 fc13 	bl	80054e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	240005a8 	.word	0x240005a8

08000cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b37      	ldr	r3, [pc, #220]	; (8000dac <SystemInit+0xe4>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd2:	4a36      	ldr	r2, [pc, #216]	; (8000dac <SystemInit+0xe4>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cdc:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <SystemInit+0xe8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	2b06      	cmp	r3, #6
 8000ce6:	d807      	bhi.n	8000cf8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ce8:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <SystemInit+0xe8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f023 030f 	bic.w	r3, r3, #15
 8000cf0:	4a2f      	ldr	r2, [pc, #188]	; (8000db0 <SystemInit+0xe8>)
 8000cf2:	f043 0307 	orr.w	r3, r3, #7
 8000cf6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <SystemInit+0xec>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a2d      	ldr	r2, [pc, #180]	; (8000db4 <SystemInit+0xec>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d04:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <SystemInit+0xec>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <SystemInit+0xec>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4929      	ldr	r1, [pc, #164]	; (8000db4 <SystemInit+0xec>)
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <SystemInit+0xf0>)
 8000d12:	4013      	ands	r3, r2
 8000d14:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d16:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <SystemInit+0xe8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d007      	beq.n	8000d32 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <SystemInit+0xe8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f023 030f 	bic.w	r3, r3, #15
 8000d2a:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <SystemInit+0xe8>)
 8000d2c:	f043 0307 	orr.w	r3, r3, #7
 8000d30:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <SystemInit+0xec>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <SystemInit+0xec>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <SystemInit+0xec>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <SystemInit+0xec>)
 8000d46:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <SystemInit+0xf4>)
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <SystemInit+0xec>)
 8000d4c:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <SystemInit+0xf8>)
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <SystemInit+0xec>)
 8000d52:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <SystemInit+0xfc>)
 8000d54:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <SystemInit+0xec>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <SystemInit+0xec>)
 8000d5e:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <SystemInit+0xfc>)
 8000d60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <SystemInit+0xec>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <SystemInit+0xec>)
 8000d6a:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <SystemInit+0xfc>)
 8000d6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <SystemInit+0xec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <SystemInit+0xec>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <SystemInit+0xec>)
 8000d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <SystemInit+0xec>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <SystemInit+0x100>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <SystemInit+0x104>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d92:	d202      	bcs.n	8000d9a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <SystemInit+0x108>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <SystemInit+0x10c>)
 8000d9c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000da0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00
 8000db0:	52002000 	.word	0x52002000
 8000db4:	58024400 	.word	0x58024400
 8000db8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dbc:	02020200 	.word	0x02020200
 8000dc0:	01ff0000 	.word	0x01ff0000
 8000dc4:	01010280 	.word	0x01010280
 8000dc8:	5c001000 	.word	0x5c001000
 8000dcc:	ffff0000 	.word	0xffff0000
 8000dd0:	51008108 	.word	0x51008108
 8000dd4:	52004000 	.word	0x52004000

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ddc:	f7ff ff74 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de2:	490d      	ldr	r1, [pc, #52]	; (8000e18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df8:	4c0a      	ldr	r4, [pc, #40]	; (8000e24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e06:	f00a fdc9 	bl	800b99c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fc4d 	bl	80006a8 <main>
  bx  lr
 8000e0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e14:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e18:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e1c:	0800bf10 	.word	0x0800bf10
  ldr r2, =_sbss
 8000e20:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e24:	24000900 	.word	0x24000900

08000e28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC3_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e32:	2003      	movs	r0, #3
 8000e34:	f000 f98c 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e38:	f001 fa10 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_Init+0x68>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	4913      	ldr	r1, [pc, #76]	; (8000e98 <HAL_Init+0x6c>)
 8000e4a:	5ccb      	ldrb	r3, [r1, r3]
 8000e4c:	f003 031f 	and.w	r3, r3, #31
 8000e50:	fa22 f303 	lsr.w	r3, r2, r3
 8000e54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_Init+0x68>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_Init+0x6c>)
 8000e60:	5cd3      	ldrb	r3, [r2, r3]
 8000e62:	f003 031f 	and.w	r3, r3, #31
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_Init+0x70>)
 8000e6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_Init+0x74>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f814 	bl	8000ea4 <HAL_InitTick>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e002      	b.n	8000e8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e86:	f7ff fdd3 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	58024400 	.word	0x58024400
 8000e98:	0800ba74 	.word	0x0800ba74
 8000e9c:	24000004 	.word	0x24000004
 8000ea0:	24000000 	.word	0x24000000

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_InitTick+0x60>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e021      	b.n	8000efc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_InitTick+0x64>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_InitTick+0x60>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f971 	bl	80011b6 <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f93b 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_InitTick+0x68>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2400000c 	.word	0x2400000c
 8000f08:	24000000 	.word	0x24000000
 8000f0c:	24000008 	.word	0x24000008

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	2400000c 	.word	0x2400000c
 8000f34:	240006b8 	.word	0x240006b8

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	240006b8 	.word	0x240006b8

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2400000c 	.word	0x2400000c

08000f98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_GetREVID+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	0c1b      	lsrs	r3, r3, #16
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	5c001000 	.word	0x5c001000

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00
 8000ff4:	05fa0000 	.word	0x05fa0000

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	; (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff40 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff90 	bl	80010a4 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5f 	bl	8001050 <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff33 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa4 	bl	800110c <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011de:	4b89      	ldr	r3, [pc, #548]	; (8001404 <HAL_GPIO_Init+0x234>)
 80011e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011e2:	e194      	b.n	800150e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2101      	movs	r1, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8186 	beq.w	8001508 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d005      	beq.n	8001214 <HAL_GPIO_Init+0x44>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d130      	bne.n	8001276 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800124a:	2201      	movs	r2, #1
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	f003 0201 	and.w	r2, r3, #1
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b03      	cmp	r3, #3
 8001280:	d017      	beq.n	80012b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d123      	bne.n	8001306 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	69b9      	ldr	r1, [r7, #24]
 8001302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0203 	and.w	r2, r3, #3
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80e0 	beq.w	8001508 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <HAL_GPIO_Init+0x238>)
 800134a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800134e:	4a2e      	ldr	r2, [pc, #184]	; (8001408 <HAL_GPIO_Init+0x238>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_GPIO_Init+0x238>)
 800135a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001366:	4a29      	ldr	r2, [pc, #164]	; (800140c <HAL_GPIO_Init+0x23c>)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a20      	ldr	r2, [pc, #128]	; (8001410 <HAL_GPIO_Init+0x240>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d052      	beq.n	8001438 <HAL_GPIO_Init+0x268>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <HAL_GPIO_Init+0x244>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d031      	beq.n	80013fe <HAL_GPIO_Init+0x22e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <HAL_GPIO_Init+0x248>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d02b      	beq.n	80013fa <HAL_GPIO_Init+0x22a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_GPIO_Init+0x24c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d025      	beq.n	80013f6 <HAL_GPIO_Init+0x226>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <HAL_GPIO_Init+0x250>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01f      	beq.n	80013f2 <HAL_GPIO_Init+0x222>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <HAL_GPIO_Init+0x254>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x21e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1a      	ldr	r2, [pc, #104]	; (8001428 <HAL_GPIO_Init+0x258>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x21a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a19      	ldr	r2, [pc, #100]	; (800142c <HAL_GPIO_Init+0x25c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x216>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a18      	ldr	r2, [pc, #96]	; (8001430 <HAL_GPIO_Init+0x260>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x212>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a17      	ldr	r2, [pc, #92]	; (8001434 <HAL_GPIO_Init+0x264>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x20e>
 80013da:	2309      	movs	r3, #9
 80013dc:	e02d      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013de:	230a      	movs	r3, #10
 80013e0:	e02b      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013e2:	2308      	movs	r3, #8
 80013e4:	e029      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013e6:	2307      	movs	r3, #7
 80013e8:	e027      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013ea:	2306      	movs	r3, #6
 80013ec:	e025      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e023      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e021      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e01f      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e01d      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013fe:	2301      	movs	r3, #1
 8001400:	e01b      	b.n	800143a <HAL_GPIO_Init+0x26a>
 8001402:	bf00      	nop
 8001404:	58000080 	.word	0x58000080
 8001408:	58024400 	.word	0x58024400
 800140c:	58000400 	.word	0x58000400
 8001410:	58020000 	.word	0x58020000
 8001414:	58020400 	.word	0x58020400
 8001418:	58020800 	.word	0x58020800
 800141c:	58020c00 	.word	0x58020c00
 8001420:	58021000 	.word	0x58021000
 8001424:	58021400 	.word	0x58021400
 8001428:	58021800 	.word	0x58021800
 800142c:	58021c00 	.word	0x58021c00
 8001430:	58022000 	.word	0x58022000
 8001434:	58022400 	.word	0x58022400
 8001438:	2300      	movs	r3, #0
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	f002 0203 	and.w	r2, r2, #3
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	4093      	lsls	r3, r2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800144a:	4938      	ldr	r1, [pc, #224]	; (800152c <HAL_GPIO_Init+0x35c>)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800147e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	3301      	adds	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	f47f ae63 	bne.w	80011e4 <HAL_GPIO_Init+0x14>
  }
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	3724      	adds	r7, #36	; 0x24
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	58000400 	.word	0x58000400

08001530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e001      	b.n	8001552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800157c:	e003      	b.n	8001586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	041a      	lsls	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	619a      	str	r2, [r3, #24]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4013      	ands	r3, r2
 80015aa:	041a      	lsls	r2, r3, #16
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	400b      	ands	r3, r1
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	619a      	str	r2, [r3, #24]
}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_PWREx_ConfigSupply+0x70>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d00a      	beq.n	80015f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_PWREx_ConfigSupply+0x70>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d001      	beq.n	80015ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e01f      	b.n	800162e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e01d      	b.n	800162e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_PWREx_ConfigSupply+0x70>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f023 0207 	bic.w	r2, r3, #7
 80015fa:	490f      	ldr	r1, [pc, #60]	; (8001638 <HAL_PWREx_ConfigSupply+0x70>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4313      	orrs	r3, r2
 8001600:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001602:	f7ff fc99 	bl	8000f38 <HAL_GetTick>
 8001606:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001608:	e009      	b.n	800161e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800160a:	f7ff fc95 	bl	8000f38 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001618:	d901      	bls.n	800161e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e007      	b.n	800162e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_PWREx_ConfigSupply+0x70>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800162a:	d1ee      	bne.n	800160a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	58024800 	.word	0x58024800

0800163c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	; 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	f000 bc48 	b.w	8001ee0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8088 	beq.w	800176e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165e:	4b99      	ldr	r3, [pc, #612]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001668:	4b96      	ldr	r3, [pc, #600]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001670:	2b10      	cmp	r3, #16
 8001672:	d007      	beq.n	8001684 <HAL_RCC_OscConfig+0x48>
 8001674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001676:	2b18      	cmp	r3, #24
 8001678:	d111      	bne.n	800169e <HAL_RCC_OscConfig+0x62>
 800167a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d10c      	bne.n	800169e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	4b8f      	ldr	r3, [pc, #572]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d06d      	beq.n	800176c <HAL_RCC_OscConfig+0x130>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d169      	bne.n	800176c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	f000 bc21 	b.w	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x7a>
 80016a8:	4b86      	ldr	r3, [pc, #536]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a85      	ldr	r2, [pc, #532]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e02e      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x9c>
 80016be:	4b81      	ldr	r3, [pc, #516]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a80      	ldr	r2, [pc, #512]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b7e      	ldr	r3, [pc, #504]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7d      	ldr	r2, [pc, #500]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e01d      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0xc0>
 80016e2:	4b78      	ldr	r3, [pc, #480]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a77      	ldr	r2, [pc, #476]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b75      	ldr	r3, [pc, #468]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a74      	ldr	r2, [pc, #464]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016fc:	4b71      	ldr	r3, [pc, #452]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a70      	ldr	r2, [pc, #448]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b6e      	ldr	r3, [pc, #440]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a6d      	ldr	r2, [pc, #436]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 800170e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fc0c 	bl	8000f38 <HAL_GetTick>
 8001720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff fc08 	bl	8000f38 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	; 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e3d4      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001736:	4b63      	ldr	r3, [pc, #396]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0xe8>
 8001742:	e014      	b.n	800176e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fbf8 	bl	8000f38 <HAL_GetTick>
 8001748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fbf4 	bl	8000f38 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e3c0      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800175e:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x110>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80ca 	beq.w	8001910 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177c:	4b51      	ldr	r3, [pc, #324]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001784:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001786:	4b4f      	ldr	r3, [pc, #316]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_RCC_OscConfig+0x166>
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	2b18      	cmp	r3, #24
 8001796:	d156      	bne.n	8001846 <HAL_RCC_OscConfig+0x20a>
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d151      	bne.n	8001846 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a2:	4b48      	ldr	r3, [pc, #288]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x17e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e392      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017ba:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 0219 	bic.w	r2, r3, #25
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	493f      	ldr	r1, [pc, #252]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fbb4 	bl	8000f38 <HAL_GetTick>
 80017d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d4:	f7ff fbb0 	bl	8000f38 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e37c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017e6:	4b37      	ldr	r3, [pc, #220]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	f7ff fbd1 	bl	8000f98 <HAL_GetREVID>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d817      	bhi.n	8001830 <HAL_RCC_OscConfig+0x1f4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2b40      	cmp	r3, #64	; 0x40
 8001806:	d108      	bne.n	800181a <HAL_RCC_OscConfig+0x1de>
 8001808:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001810:	4a2c      	ldr	r2, [pc, #176]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001816:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001818:	e07a      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181a:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	031b      	lsls	r3, r3, #12
 8001828:	4926      	ldr	r1, [pc, #152]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800182e:	e06f      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	061b      	lsls	r3, r3, #24
 800183e:	4921      	ldr	r1, [pc, #132]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001844:	e064      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d047      	beq.n	80018de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 0219 	bic.w	r2, r3, #25
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	491a      	ldr	r1, [pc, #104]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fb6a 	bl	8000f38 <HAL_GetTick>
 8001864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fb66 	bl	8000f38 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e332      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001886:	f7ff fb87 	bl	8000f98 <HAL_GetREVID>
 800188a:	4603      	mov	r3, r0
 800188c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001890:	4293      	cmp	r3, r2
 8001892:	d819      	bhi.n	80018c8 <HAL_RCC_OscConfig+0x28c>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	2b40      	cmp	r3, #64	; 0x40
 800189a:	d108      	bne.n	80018ae <HAL_RCC_OscConfig+0x272>
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80018a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018aa:	6053      	str	r3, [r2, #4]
 80018ac:	e030      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	031b      	lsls	r3, r3, #12
 80018bc:	4901      	ldr	r1, [pc, #4]	; (80018c4 <HAL_RCC_OscConfig+0x288>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
 80018c2:	e025      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
 80018c4:	58024400 	.word	0x58024400
 80018c8:	4b9a      	ldr	r3, [pc, #616]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	4997      	ldr	r1, [pc, #604]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
 80018dc:	e018      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018de:	4b95      	ldr	r3, [pc, #596]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a94      	ldr	r2, [pc, #592]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff fb25 	bl	8000f38 <HAL_GetTick>
 80018ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff fb21 	bl	8000f38 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e2ed      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001904:	4b8b      	ldr	r3, [pc, #556]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a9 	beq.w	8001a70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191e:	4b85      	ldr	r3, [pc, #532]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001926:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001928:	4b82      	ldr	r3, [pc, #520]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b08      	cmp	r3, #8
 8001932:	d007      	beq.n	8001944 <HAL_RCC_OscConfig+0x308>
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b18      	cmp	r3, #24
 8001938:	d13a      	bne.n	80019b0 <HAL_RCC_OscConfig+0x374>
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d135      	bne.n	80019b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001944:	4b7b      	ldr	r3, [pc, #492]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_OscConfig+0x320>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	2b80      	cmp	r3, #128	; 0x80
 8001956:	d001      	beq.n	800195c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e2c1      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800195c:	f7ff fb1c 	bl	8000f98 <HAL_GetREVID>
 8001960:	4603      	mov	r3, r0
 8001962:	f241 0203 	movw	r2, #4099	; 0x1003
 8001966:	4293      	cmp	r3, r2
 8001968:	d817      	bhi.n	800199a <HAL_RCC_OscConfig+0x35e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	2b20      	cmp	r3, #32
 8001970:	d108      	bne.n	8001984 <HAL_RCC_OscConfig+0x348>
 8001972:	4b70      	ldr	r3, [pc, #448]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800197a:	4a6e      	ldr	r2, [pc, #440]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 800197c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001980:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001982:	e075      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001984:	4b6b      	ldr	r3, [pc, #428]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	069b      	lsls	r3, r3, #26
 8001992:	4968      	ldr	r1, [pc, #416]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001998:	e06a      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800199a:	4b66      	ldr	r3, [pc, #408]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	061b      	lsls	r3, r3, #24
 80019a8:	4962      	ldr	r1, [pc, #392]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019ae:	e05f      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d042      	beq.n	8001a3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80019b8:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a5d      	ldr	r2, [pc, #372]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80019be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fab8 	bl	8000f38 <HAL_GetTick>
 80019c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019cc:	f7ff fab4 	bl	8000f38 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e280      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019de:	4b55      	ldr	r3, [pc, #340]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019ea:	f7ff fad5 	bl	8000f98 <HAL_GetREVID>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d817      	bhi.n	8001a28 <HAL_RCC_OscConfig+0x3ec>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	d108      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3d6>
 8001a00:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a08:	4a4a      	ldr	r2, [pc, #296]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a0e:	6053      	str	r3, [r2, #4]
 8001a10:	e02e      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
 8001a12:	4b48      	ldr	r3, [pc, #288]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	069b      	lsls	r3, r3, #26
 8001a20:	4944      	ldr	r1, [pc, #272]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
 8001a26:	e023      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
 8001a28:	4b42      	ldr	r3, [pc, #264]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	493f      	ldr	r1, [pc, #252]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
 8001a3c:	e018      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a3c      	ldr	r2, [pc, #240]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fa75 	bl	8000f38 <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a52:	f7ff fa71 	bl	8000f38 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e23d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a64:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d036      	beq.n	8001aea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d019      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a88:	4a2a      	ldr	r2, [pc, #168]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff fa52 	bl	8000f38 <HAL_GetTick>
 8001a94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fa4e 	bl	8000f38 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e21a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x45c>
 8001ab6:	e018      	b.n	8001aea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001abc:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fa38 	bl	8000f38 <HAL_GetTick>
 8001ac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff fa34 	bl	8000f38 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e200      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d039      	beq.n	8001b6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d01c      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001b04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fa15 	bl	8000f38 <HAL_GetTick>
 8001b0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b12:	f7ff fa11 	bl	8000f38 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1dd      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x4d6>
 8001b30:	e01b      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
 8001b32:	bf00      	nop
 8001b34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b38:	4b9b      	ldr	r3, [pc, #620]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a9a      	ldr	r2, [pc, #616]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b44:	f7ff f9f8 	bl	8000f38 <HAL_GetTick>
 8001b48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b4c:	f7ff f9f4 	bl	8000f38 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1c0      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b5e:	4b92      	ldr	r3, [pc, #584]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8081 	beq.w	8001c7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b78:	4b8c      	ldr	r3, [pc, #560]	; (8001dac <HAL_RCC_OscConfig+0x770>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a8b      	ldr	r2, [pc, #556]	; (8001dac <HAL_RCC_OscConfig+0x770>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b84:	f7ff f9d8 	bl	8000f38 <HAL_GetTick>
 8001b88:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8c:	f7ff f9d4 	bl	8000f38 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1a0      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b9e:	4b83      	ldr	r3, [pc, #524]	; (8001dac <HAL_RCC_OscConfig+0x770>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d106      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x584>
 8001bb2:	4b7d      	ldr	r3, [pc, #500]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	4a7c      	ldr	r2, [pc, #496]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbe:	e02d      	b.n	8001c1c <HAL_RCC_OscConfig+0x5e0>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x5a6>
 8001bc8:	4b77      	ldr	r3, [pc, #476]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	4a76      	ldr	r2, [pc, #472]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd4:	4b74      	ldr	r3, [pc, #464]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	4a73      	ldr	r2, [pc, #460]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bda:	f023 0304 	bic.w	r3, r3, #4
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70
 8001be0:	e01c      	b.n	8001c1c <HAL_RCC_OscConfig+0x5e0>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x5c8>
 8001bea:	4b6f      	ldr	r3, [pc, #444]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	4a6e      	ldr	r2, [pc, #440]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf6:	4b6c      	ldr	r3, [pc, #432]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfa:	4a6b      	ldr	r2, [pc, #428]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6713      	str	r3, [r2, #112]	; 0x70
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_OscConfig+0x5e0>
 8001c04:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	4a67      	ldr	r2, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c10:	4b65      	ldr	r3, [pc, #404]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	4a64      	ldr	r2, [pc, #400]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d015      	beq.n	8001c50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff f988 	bl	8000f38 <HAL_GetTick>
 8001c28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7ff f984 	bl	8000f38 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e14e      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c42:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0ee      	beq.n	8001c2c <HAL_RCC_OscConfig+0x5f0>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff f972 	bl	8000f38 <HAL_GetTick>
 8001c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7ff f96e 	bl	8000f38 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e138      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c6e:	4b4e      	ldr	r3, [pc, #312]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ee      	bne.n	8001c58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 812d 	beq.w	8001ede <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c84:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c8c:	2b18      	cmp	r3, #24
 8001c8e:	f000 80bd 	beq.w	8001e0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	f040 809e 	bne.w	8001dd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9c:	4b42      	ldr	r3, [pc, #264]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a41      	ldr	r2, [pc, #260]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f946 	bl	8000f38 <HAL_GetTick>
 8001cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7ff f942 	bl	8000f38 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e10e      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cc2:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cce:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <HAL_RCC_OscConfig+0x774>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	4931      	ldr	r1, [pc, #196]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	628b      	str	r3, [r1, #40]	; 0x28
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	3b01      	subs	r3, #1
 8001cee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	025b      	lsls	r3, r3, #9
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	3b01      	subs	r3, #1
 8001d04:	041b      	lsls	r3, r3, #16
 8001d06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d10:	3b01      	subs	r3, #1
 8001d12:	061b      	lsls	r3, r3, #24
 8001d14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d18:	4923      	ldr	r1, [pc, #140]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_RCC_OscConfig+0x778>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d36:	00d2      	lsls	r2, r2, #3
 8001d38:	491b      	ldr	r1, [pc, #108]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	f023 020c 	bic.w	r2, r3, #12
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4917      	ldr	r1, [pc, #92]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	f023 0202 	bic.w	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	4912      	ldr	r1, [pc, #72]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7ff f8cb 	bl	8000f38 <HAL_GetTick>
 8001da2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001da4:	e011      	b.n	8001dca <HAL_RCC_OscConfig+0x78e>
 8001da6:	bf00      	nop
 8001da8:	58024400 	.word	0x58024400
 8001dac:	58024800 	.word	0x58024800
 8001db0:	fffffc0c 	.word	0xfffffc0c
 8001db4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7ff f8be 	bl	8000f38 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e08a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dca:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x77c>
 8001dd6:	e082      	b.n	8001ede <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd8:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a42      	ldr	r2, [pc, #264]	; (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f8a8 	bl	8000f38 <HAL_GetTick>
 8001de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff f8a4 	bl	8000f38 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e070      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x7b0>
 8001e0a:	e068      	b.n	8001ede <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e0c:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e12:	4b35      	ldr	r3, [pc, #212]	; (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d031      	beq.n	8001e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	f003 0203 	and.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d12a      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d122      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d11a      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	0a5b      	lsrs	r3, r3, #9
 8001e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d111      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	0c1b      	lsrs	r3, r3, #16
 8001e64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d108      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0e1b      	lsrs	r3, r3, #24
 8001e76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e02b      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d01f      	beq.n	8001ede <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eaa:	f7ff f845 	bl	8000f38 <HAL_GetTick>
 8001eae:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001eb0:	bf00      	nop
 8001eb2:	f7ff f841 	bl	8000f38 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d0f9      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_OscConfig+0x8b0>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001eca:	00d2      	lsls	r2, r2, #3
 8001ecc:	4906      	ldr	r1, [pc, #24]	; (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3730      	adds	r7, #48	; 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	ffff0007 	.word	0xffff0007

08001ef0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e19c      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	4b8a      	ldr	r3, [pc, #552]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d910      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b87      	ldr	r3, [pc, #540]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 020f 	bic.w	r2, r3, #15
 8001f1a:	4985      	ldr	r1, [pc, #532]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b83      	ldr	r3, [pc, #524]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e184      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d010      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	4b7b      	ldr	r3, [pc, #492]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d908      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f50:	4b78      	ldr	r3, [pc, #480]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	4975      	ldr	r1, [pc, #468]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d010      	beq.n	8001f90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	4b70      	ldr	r3, [pc, #448]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d908      	bls.n	8001f90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f7e:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	496a      	ldr	r1, [pc, #424]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d010      	beq.n	8001fbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	4b64      	ldr	r3, [pc, #400]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d908      	bls.n	8001fbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fac:	4b61      	ldr	r3, [pc, #388]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	495e      	ldr	r1, [pc, #376]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d010      	beq.n	8001fec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69da      	ldr	r2, [r3, #28]
 8001fce:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d908      	bls.n	8001fec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001fda:	4b56      	ldr	r3, [pc, #344]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4953      	ldr	r1, [pc, #332]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d010      	beq.n	800201a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	429a      	cmp	r2, r3
 8002006:	d908      	bls.n	800201a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f023 020f 	bic.w	r2, r3, #15
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4947      	ldr	r1, [pc, #284]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002016:	4313      	orrs	r3, r2
 8002018:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d055      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002026:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4940      	ldr	r1, [pc, #256]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002034:	4313      	orrs	r3, r2
 8002036:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d107      	bne.n	8002050 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002040:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d121      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0f6      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d107      	bne.n	8002068 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002058:	4b36      	ldr	r3, [pc, #216]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d115      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0ea      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002070:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0de      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0d6      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f023 0207 	bic.w	r2, r3, #7
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4925      	ldr	r1, [pc, #148]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a2:	f7fe ff49 	bl	8000f38 <HAL_GetTick>
 80020a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020aa:	f7fe ff45 	bl	8000f38 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0be      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c0:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d1eb      	bne.n	80020aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d010      	beq.n	8002100 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d208      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f023 020f 	bic.w	r2, r3, #15
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	490e      	ldr	r1, [pc, #56]	; (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d214      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 020f 	bic.w	r2, r3, #15
 8002116:	4906      	ldr	r1, [pc, #24]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e086      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
 8002130:	52002000 	.word	0x52002000
 8002134:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d010      	beq.n	8002166 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	4b3f      	ldr	r3, [pc, #252]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002150:	429a      	cmp	r2, r3
 8002152:	d208      	bcs.n	8002166 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002154:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	4939      	ldr	r1, [pc, #228]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002162:	4313      	orrs	r3, r2
 8002164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d010      	beq.n	8002194 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800217e:	429a      	cmp	r2, r3
 8002180:	d208      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002182:	4b31      	ldr	r3, [pc, #196]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	492e      	ldr	r1, [pc, #184]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002190:	4313      	orrs	r3, r2
 8002192:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	d010      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d208      	bcs.n	80021c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4922      	ldr	r1, [pc, #136]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d010      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021da:	429a      	cmp	r2, r3
 80021dc:	d208      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4917      	ldr	r1, [pc, #92]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021f0:	f000 f834 	bl	800225c <HAL_RCC_GetSysClockFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	4912      	ldr	r1, [pc, #72]	; (800224c <HAL_RCC_ClockConfig+0x35c>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	4a0d      	ldr	r2, [pc, #52]	; (800224c <HAL_RCC_ClockConfig+0x35c>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_RCC_ClockConfig+0x360>)
 8002226:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_RCC_ClockConfig+0x364>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_RCC_ClockConfig+0x368>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fe36 	bl	8000ea4 <HAL_InitTick>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800223c:	7bfb      	ldrb	r3, [r7, #15]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	58024400 	.word	0x58024400
 800224c:	0800ba74 	.word	0x0800ba74
 8002250:	24000004 	.word	0x24000004
 8002254:	24000000 	.word	0x24000000
 8002258:	24000008 	.word	0x24000008

0800225c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002262:	4bb3      	ldr	r3, [pc, #716]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800226a:	2b18      	cmp	r3, #24
 800226c:	f200 8155 	bhi.w	800251a <HAL_RCC_GetSysClockFreq+0x2be>
 8002270:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	080022dd 	.word	0x080022dd
 800227c:	0800251b 	.word	0x0800251b
 8002280:	0800251b 	.word	0x0800251b
 8002284:	0800251b 	.word	0x0800251b
 8002288:	0800251b 	.word	0x0800251b
 800228c:	0800251b 	.word	0x0800251b
 8002290:	0800251b 	.word	0x0800251b
 8002294:	0800251b 	.word	0x0800251b
 8002298:	08002303 	.word	0x08002303
 800229c:	0800251b 	.word	0x0800251b
 80022a0:	0800251b 	.word	0x0800251b
 80022a4:	0800251b 	.word	0x0800251b
 80022a8:	0800251b 	.word	0x0800251b
 80022ac:	0800251b 	.word	0x0800251b
 80022b0:	0800251b 	.word	0x0800251b
 80022b4:	0800251b 	.word	0x0800251b
 80022b8:	08002309 	.word	0x08002309
 80022bc:	0800251b 	.word	0x0800251b
 80022c0:	0800251b 	.word	0x0800251b
 80022c4:	0800251b 	.word	0x0800251b
 80022c8:	0800251b 	.word	0x0800251b
 80022cc:	0800251b 	.word	0x0800251b
 80022d0:	0800251b 	.word	0x0800251b
 80022d4:	0800251b 	.word	0x0800251b
 80022d8:	0800230f 	.word	0x0800230f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022dc:	4b94      	ldr	r3, [pc, #592]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022e8:	4b91      	ldr	r3, [pc, #580]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	4a90      	ldr	r2, [pc, #576]	; (8002534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
 80022f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80022fa:	e111      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022fc:	4b8d      	ldr	r3, [pc, #564]	; (8002534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022fe:	61bb      	str	r3, [r7, #24]
      break;
 8002300:	e10e      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002302:	4b8d      	ldr	r3, [pc, #564]	; (8002538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002304:	61bb      	str	r3, [r7, #24]
      break;
 8002306:	e10b      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002308:	4b8c      	ldr	r3, [pc, #560]	; (800253c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800230a:	61bb      	str	r3, [r7, #24]
      break;
 800230c:	e108      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800230e:	4b88      	ldr	r3, [pc, #544]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002318:	4b85      	ldr	r3, [pc, #532]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002322:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002324:	4b82      	ldr	r3, [pc, #520]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800232e:	4b80      	ldr	r3, [pc, #512]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	08db      	lsrs	r3, r3, #3
 8002334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002346:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80e1 	beq.w	8002514 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b02      	cmp	r3, #2
 8002356:	f000 8083 	beq.w	8002460 <HAL_RCC_GetSysClockFreq+0x204>
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b02      	cmp	r3, #2
 800235e:	f200 80a1 	bhi.w	80024a4 <HAL_RCC_GetSysClockFreq+0x248>
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x114>
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d056      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x1c0>
 800236e:	e099      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002370:	4b6f      	ldr	r3, [pc, #444]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	2b00      	cmp	r3, #0
 800237a:	d02d      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800237c:	4b6c      	ldr	r3, [pc, #432]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	08db      	lsrs	r3, r3, #3
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	4a6b      	ldr	r2, [pc, #428]	; (8002534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a6:	4b62      	ldr	r3, [pc, #392]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80023d6:	e087      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002544 <HAL_RCC_GetSysClockFreq+0x2e8>
 80023e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ea:	4b51      	ldr	r3, [pc, #324]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80023fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800240a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800240e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800241a:	e065      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002426:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002548 <HAL_RCC_GetSysClockFreq+0x2ec>
 800242a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800242e:	4b40      	ldr	r3, [pc, #256]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002436:	ee07 3a90 	vmov	s15, r3
 800243a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800243e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002442:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800244a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800244e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800245e:	e043      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800254c <HAL_RCC_GetSysClockFreq+0x2f0>
 800246e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002472:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002482:	ed97 6a02 	vldr	s12, [r7, #8]
 8002486:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 800248a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800248e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800249a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024a2:	e021      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002548 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	0a5b      	lsrs	r3, r3, #9
 80024ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024f2:	3301      	adds	r3, #1
 80024f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002500:	edd7 6a07 	vldr	s13, [r7, #28]
 8002504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250c:	ee17 3a90 	vmov	r3, s15
 8002510:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002512:	e005      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
      break;
 8002518:	e002      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800251c:	61bb      	str	r3, [r7, #24]
      break;
 800251e:	bf00      	nop
  }

  return sysclockfreq;
 8002520:	69bb      	ldr	r3, [r7, #24]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	58024400 	.word	0x58024400
 8002534:	03d09000 	.word	0x03d09000
 8002538:	003d0900 	.word	0x003d0900
 800253c:	017d7840 	.word	0x017d7840
 8002540:	46000000 	.word	0x46000000
 8002544:	4c742400 	.word	0x4c742400
 8002548:	4a742400 	.word	0x4a742400
 800254c:	4bbebc20 	.word	0x4bbebc20

08002550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002556:	f7ff fe81 	bl	800225c <HAL_RCC_GetSysClockFreq>
 800255a:	4602      	mov	r2, r0
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	490f      	ldr	r1, [pc, #60]	; (80025a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002568:	5ccb      	ldrb	r3, [r1, r3]
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800258c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	58024400 	.word	0x58024400
 80025a4:	0800ba74 	.word	0x0800ba74
 80025a8:	24000004 	.word	0x24000004
 80025ac:	24000000 	.word	0x24000000

080025b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80025b4:	f7ff ffcc 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4904      	ldr	r1, [pc, #16]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	58024400 	.word	0x58024400
 80025d8:	0800ba74 	.word	0x0800ba74

080025dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80025e0:	f7ff ffb6 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4904      	ldr	r1, [pc, #16]	; (8002604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	58024400 	.word	0x58024400
 8002604:	0800ba74 	.word	0x0800ba74

08002608 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800260c:	b0ca      	sub	sp, #296	; 0x128
 800260e:	af00      	add	r7, sp, #0
 8002610:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800261a:	2300      	movs	r3, #0
 800261c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800262c:	2500      	movs	r5, #0
 800262e:	ea54 0305 	orrs.w	r3, r4, r5
 8002632:	d049      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800263a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800263e:	d02f      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002640:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002644:	d828      	bhi.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800264a:	d01a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800264c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002650:	d822      	bhi.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800265a:	d007      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800265c:	e01c      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800265e:	4bb8      	ldr	r3, [pc, #736]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	4ab7      	ldr	r2, [pc, #732]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002668:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800266a:	e01a      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800266c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002670:	3308      	adds	r3, #8
 8002672:	2102      	movs	r1, #2
 8002674:	4618      	mov	r0, r3
 8002676:	f002 fb61 	bl	8004d3c <RCCEx_PLL2_Config>
 800267a:	4603      	mov	r3, r0
 800267c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002680:	e00f      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002686:	3328      	adds	r3, #40	; 0x28
 8002688:	2102      	movs	r1, #2
 800268a:	4618      	mov	r0, r3
 800268c:	f002 fc08 	bl	8004ea0 <RCCEx_PLL3_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002696:	e004      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800269e:	e000      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80026a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10a      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026aa:	4ba5      	ldr	r3, [pc, #660]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80026b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026b8:	4aa1      	ldr	r2, [pc, #644]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026ba:	430b      	orrs	r3, r1
 80026bc:	6513      	str	r3, [r2, #80]	; 0x50
 80026be:	e003      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80026d4:	f04f 0900 	mov.w	r9, #0
 80026d8:	ea58 0309 	orrs.w	r3, r8, r9
 80026dc:	d047      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80026de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d82a      	bhi.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80026e8:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002705 	.word	0x08002705
 80026f4:	08002713 	.word	0x08002713
 80026f8:	08002729 	.word	0x08002729
 80026fc:	08002747 	.word	0x08002747
 8002700:	08002747 	.word	0x08002747
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002704:	4b8e      	ldr	r3, [pc, #568]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	4a8d      	ldr	r2, [pc, #564]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800270a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002710:	e01a      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002716:	3308      	adds	r3, #8
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f002 fb0e 	bl	8004d3c <RCCEx_PLL2_Config>
 8002720:	4603      	mov	r3, r0
 8002722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002726:	e00f      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800272c:	3328      	adds	r3, #40	; 0x28
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fbb5 	bl	8004ea0 <RCCEx_PLL3_Config>
 8002736:	4603      	mov	r3, r0
 8002738:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800273c:	e004      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002744:	e000      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002748:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002750:	4b7b      	ldr	r3, [pc, #492]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002754:	f023 0107 	bic.w	r1, r3, #7
 8002758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	4a78      	ldr	r2, [pc, #480]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002760:	430b      	orrs	r3, r1
 8002762:	6513      	str	r3, [r2, #80]	; 0x50
 8002764:	e003      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800276a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800276e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800277a:	f04f 0b00 	mov.w	fp, #0
 800277e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002782:	d04c      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278e:	d030      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002794:	d829      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002796:	2bc0      	cmp	r3, #192	; 0xc0
 8002798:	d02d      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800279a:	2bc0      	cmp	r3, #192	; 0xc0
 800279c:	d825      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800279e:	2b80      	cmp	r3, #128	; 0x80
 80027a0:	d018      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80027a2:	2b80      	cmp	r3, #128	; 0x80
 80027a4:	d821      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80027aa:	2b40      	cmp	r3, #64	; 0x40
 80027ac:	d007      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80027ae:	e01c      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027b0:	4b63      	ldr	r3, [pc, #396]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	4a62      	ldr	r2, [pc, #392]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027bc:	e01c      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027c2:	3308      	adds	r3, #8
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f002 fab8 	bl	8004d3c <RCCEx_PLL2_Config>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027d2:	e011      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027d8:	3328      	adds	r3, #40	; 0x28
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fb5f 	bl	8004ea0 <RCCEx_PLL3_Config>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027e8:	e006      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80027f0:	e002      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002800:	4b4f      	ldr	r3, [pc, #316]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002804:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	4a4c      	ldr	r2, [pc, #304]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002810:	430b      	orrs	r3, r1
 8002812:	6513      	str	r3, [r2, #80]	; 0x50
 8002814:	e003      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800281a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800281e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002826:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800282a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800282e:	2300      	movs	r3, #0
 8002830:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002834:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002838:	460b      	mov	r3, r1
 800283a:	4313      	orrs	r3, r2
 800283c:	d053      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800283e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002846:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800284a:	d035      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800284c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002850:	d82e      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002852:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002856:	d031      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002858:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800285c:	d828      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800285e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002862:	d01a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002868:	d822      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800286e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002872:	d007      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002874:	e01c      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002876:	4b32      	ldr	r3, [pc, #200]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	4a31      	ldr	r2, [pc, #196]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800287c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002880:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002882:	e01c      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002888:	3308      	adds	r3, #8
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f002 fa55 	bl	8004d3c <RCCEx_PLL2_Config>
 8002892:	4603      	mov	r3, r0
 8002894:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002898:	e011      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800289a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800289e:	3328      	adds	r3, #40	; 0x28
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 fafc 	bl	8004ea0 <RCCEx_PLL3_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028ae:	e006      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80028b6:	e002      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80028b8:	bf00      	nop
 80028ba:	e000      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80028bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10b      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80028c6:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80028ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028d6:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028d8:	430b      	orrs	r3, r1
 80028da:	6593      	str	r3, [r2, #88]	; 0x58
 80028dc:	e003      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80028f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002900:	460b      	mov	r3, r1
 8002902:	4313      	orrs	r3, r2
 8002904:	d056      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800290a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800290e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002912:	d038      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002918:	d831      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800291a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800291e:	d034      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002920:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002924:	d82b      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800292a:	d01d      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800292c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002930:	d825      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002932:	2b00      	cmp	r3, #0
 8002934:	d006      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002936:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800293c:	e01f      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800293e:	bf00      	nop
 8002940:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002944:	4ba2      	ldr	r3, [pc, #648]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	4aa1      	ldr	r2, [pc, #644]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800294a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002950:	e01c      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002956:	3308      	adds	r3, #8
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f002 f9ee 	bl	8004d3c <RCCEx_PLL2_Config>
 8002960:	4603      	mov	r3, r0
 8002962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002966:	e011      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800296c:	3328      	adds	r3, #40	; 0x28
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f002 fa95 	bl	8004ea0 <RCCEx_PLL3_Config>
 8002976:	4603      	mov	r3, r0
 8002978:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800297c:	e006      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002984:	e002      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002986:	bf00      	nop
 8002988:	e000      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800298a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800298c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002994:	4b8e      	ldr	r3, [pc, #568]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800299c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029a4:	4a8a      	ldr	r2, [pc, #552]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6593      	str	r3, [r2, #88]	; 0x58
 80029aa:	e003      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80029c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80029c4:	2300      	movs	r3, #0
 80029c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80029ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80029ce:	460b      	mov	r3, r1
 80029d0:	4313      	orrs	r3, r2
 80029d2:	d03a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80029d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	2b30      	cmp	r3, #48	; 0x30
 80029dc:	d01f      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80029de:	2b30      	cmp	r3, #48	; 0x30
 80029e0:	d819      	bhi.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d00c      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d815      	bhi.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d019      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d111      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029f2:	4b77      	ldr	r3, [pc, #476]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	4a76      	ldr	r2, [pc, #472]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80029fe:	e011      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a04:	3308      	adds	r3, #8
 8002a06:	2102      	movs	r1, #2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 f997 	bl	8004d3c <RCCEx_PLL2_Config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002a14:	e006      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a1c:	e002      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a2c:	4b68      	ldr	r3, [pc, #416]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a30:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	4a65      	ldr	r2, [pc, #404]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a40:	e003      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002a56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002a60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4313      	orrs	r3, r2
 8002a68:	d051      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a74:	d035      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002a76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a7a:	d82e      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a80:	d031      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a86:	d828      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8c:	d01a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a92:	d822      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9c:	d007      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002a9e:	e01c      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	4a4a      	ldr	r2, [pc, #296]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002aac:	e01c      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f002 f940 	bl	8004d3c <RCCEx_PLL2_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ac2:	e011      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ac8:	3328      	adds	r3, #40	; 0x28
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f002 f9e7 	bl	8004ea0 <RCCEx_PLL3_Config>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ad8:	e006      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ae0:	e002      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002af0:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	4a34      	ldr	r2, [pc, #208]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b00:	430b      	orrs	r3, r1
 8002b02:	6513      	str	r3, [r2, #80]	; 0x50
 8002b04:	e003      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002b24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	d056      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b38:	d033      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002b3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b3e:	d82c      	bhi.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b44:	d02f      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002b46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b4a:	d826      	bhi.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b50:	d02b      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002b52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b56:	d820      	bhi.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b5c:	d012      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002b5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b62:	d81a      	bhi.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d022      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6c:	d115      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b72:	3308      	adds	r3, #8
 8002b74:	2101      	movs	r1, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 f8e0 	bl	8004d3c <RCCEx_PLL2_Config>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b82:	e015      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b88:	3328      	adds	r3, #40	; 0x28
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f002 f987 	bl	8004ea0 <RCCEx_PLL3_Config>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ba0:	e006      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ba2:	bf00      	nop
 8002ba4:	e004      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ba6:	bf00      	nop
 8002ba8:	e002      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10d      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bc6:	4a02      	ldr	r2, [pc, #8]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6513      	str	r3, [r2, #80]	; 0x50
 8002bcc:	e006      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002bce:	bf00      	nop
 8002bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bf2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	d055      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c08:	d033      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c0e:	d82c      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c14:	d02f      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1a:	d826      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c20:	d02b      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002c22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c26:	d820      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c2c:	d012      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c32:	d81a      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d022      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c3c:	d115      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c42:	3308      	adds	r3, #8
 8002c44:	2101      	movs	r1, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 f878 	bl	8004d3c <RCCEx_PLL2_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c52:	e015      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c58:	3328      	adds	r3, #40	; 0x28
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f002 f91f 	bl	8004ea0 <RCCEx_PLL3_Config>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c68:	e00a      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c70:	e006      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c72:	bf00      	nop
 8002c74:	e004      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c76:	bf00      	nop
 8002c78:	e002      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c7a:	bf00      	nop
 8002c7c:	e000      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c88:	4ba3      	ldr	r3, [pc, #652]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c98:	4a9f      	ldr	r2, [pc, #636]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c9e:	e003      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ca4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	d037      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd2:	d00e      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd8:	d816      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d018      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce2:	d111      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce4:	4b8c      	ldr	r3, [pc, #560]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	4a8b      	ldr	r2, [pc, #556]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cf0:	e00f      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cf6:	3308      	adds	r3, #8
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f002 f81e 	bl	8004d3c <RCCEx_PLL2_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d06:	e004      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d0e:	e000      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10a      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d1a:	4b7f      	ldr	r3, [pc, #508]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	4a7b      	ldr	r2, [pc, #492]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	6513      	str	r3, [r2, #80]	; 0x50
 8002d2e:	e003      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002d4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4313      	orrs	r3, r2
 8002d56:	d039      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d81c      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002d62:	a201      	add	r2, pc, #4	; (adr r2, 8002d68 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d68:	08002da5 	.word	0x08002da5
 8002d6c:	08002d79 	.word	0x08002d79
 8002d70:	08002d87 	.word	0x08002d87
 8002d74:	08002da5 	.word	0x08002da5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d78:	4b67      	ldr	r3, [pc, #412]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	4a66      	ldr	r2, [pc, #408]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d84:	e00f      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d8a:	3308      	adds	r3, #8
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f001 ffd4 	bl	8004d3c <RCCEx_PLL2_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d9a:	e004      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002da2:	e000      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002da6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002dae:	4b5a      	ldr	r3, [pc, #360]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	f023 0103 	bic.w	r1, r3, #3
 8002db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dbc:	4a56      	ldr	r2, [pc, #344]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dc2:	e003      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002de2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002de6:	460b      	mov	r3, r1
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f000 809f 	beq.w	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dee:	4b4b      	ldr	r3, [pc, #300]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a4a      	ldr	r2, [pc, #296]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dfa:	f7fe f89d 	bl	8000f38 <HAL_GetTick>
 8002dfe:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e02:	e00b      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e04:	f7fe f898 	bl	8000f38 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b64      	cmp	r3, #100	; 0x64
 8002e12:	d903      	bls.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e1a:	e005      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e1c:	4b3f      	ldr	r3, [pc, #252]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ed      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002e28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d179      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e30:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e3c:	4053      	eors	r3, r2
 8002e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d015      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e46:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	4a30      	ldr	r2, [pc, #192]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5e:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e6a:	4a2b      	ldr	r2, [pc, #172]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7e:	d118      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe f85a 	bl	8000f38 <HAL_GetTick>
 8002e84:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e88:	e00d      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe f855 	bl	8000f38 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e94:	1ad2      	subs	r2, r2, r3
 8002e96:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d903      	bls.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002ea4:	e005      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0eb      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d129      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ebe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eca:	d10e      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002edc:	091a      	lsrs	r2, r3, #4
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	4a0d      	ldr	r2, [pc, #52]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6113      	str	r3, [r2, #16]
 8002ee8:	e005      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ef0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ef4:	6113      	str	r3, [r2, #16]
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ef8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002efe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f06:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0c:	e00e      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002f16:	e009      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	58024800 	.word	0x58024800
 8002f20:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	f002 0301 	and.w	r3, r2, #1
 8002f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f000 8089 	beq.w	8003060 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f54:	2b28      	cmp	r3, #40	; 0x28
 8002f56:	d86b      	bhi.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002f58:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08003039 	.word	0x08003039
 8002f64:	08003031 	.word	0x08003031
 8002f68:	08003031 	.word	0x08003031
 8002f6c:	08003031 	.word	0x08003031
 8002f70:	08003031 	.word	0x08003031
 8002f74:	08003031 	.word	0x08003031
 8002f78:	08003031 	.word	0x08003031
 8002f7c:	08003031 	.word	0x08003031
 8002f80:	08003005 	.word	0x08003005
 8002f84:	08003031 	.word	0x08003031
 8002f88:	08003031 	.word	0x08003031
 8002f8c:	08003031 	.word	0x08003031
 8002f90:	08003031 	.word	0x08003031
 8002f94:	08003031 	.word	0x08003031
 8002f98:	08003031 	.word	0x08003031
 8002f9c:	08003031 	.word	0x08003031
 8002fa0:	0800301b 	.word	0x0800301b
 8002fa4:	08003031 	.word	0x08003031
 8002fa8:	08003031 	.word	0x08003031
 8002fac:	08003031 	.word	0x08003031
 8002fb0:	08003031 	.word	0x08003031
 8002fb4:	08003031 	.word	0x08003031
 8002fb8:	08003031 	.word	0x08003031
 8002fbc:	08003031 	.word	0x08003031
 8002fc0:	08003039 	.word	0x08003039
 8002fc4:	08003031 	.word	0x08003031
 8002fc8:	08003031 	.word	0x08003031
 8002fcc:	08003031 	.word	0x08003031
 8002fd0:	08003031 	.word	0x08003031
 8002fd4:	08003031 	.word	0x08003031
 8002fd8:	08003031 	.word	0x08003031
 8002fdc:	08003031 	.word	0x08003031
 8002fe0:	08003039 	.word	0x08003039
 8002fe4:	08003031 	.word	0x08003031
 8002fe8:	08003031 	.word	0x08003031
 8002fec:	08003031 	.word	0x08003031
 8002ff0:	08003031 	.word	0x08003031
 8002ff4:	08003031 	.word	0x08003031
 8002ff8:	08003031 	.word	0x08003031
 8002ffc:	08003031 	.word	0x08003031
 8003000:	08003039 	.word	0x08003039
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003008:	3308      	adds	r3, #8
 800300a:	2101      	movs	r1, #1
 800300c:	4618      	mov	r0, r3
 800300e:	f001 fe95 	bl	8004d3c <RCCEx_PLL2_Config>
 8003012:	4603      	mov	r3, r0
 8003014:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003018:	e00f      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800301a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800301e:	3328      	adds	r3, #40	; 0x28
 8003020:	2101      	movs	r1, #1
 8003022:	4618      	mov	r0, r3
 8003024:	f001 ff3c 	bl	8004ea0 <RCCEx_PLL3_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800302e:	e004      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003036:	e000      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800303a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10a      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003042:	4bbf      	ldr	r3, [pc, #764]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003046:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800304a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800304e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003050:	4abb      	ldr	r2, [pc, #748]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003052:	430b      	orrs	r3, r1
 8003054:	6553      	str	r3, [r2, #84]	; 0x54
 8003056:	e003      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800305c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f002 0302 	and.w	r3, r2, #2
 800306c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003076:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800307a:	460b      	mov	r3, r1
 800307c:	4313      	orrs	r3, r2
 800307e:	d041      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003086:	2b05      	cmp	r3, #5
 8003088:	d824      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800308a:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030dd 	.word	0x080030dd
 8003094:	080030a9 	.word	0x080030a9
 8003098:	080030bf 	.word	0x080030bf
 800309c:	080030dd 	.word	0x080030dd
 80030a0:	080030dd 	.word	0x080030dd
 80030a4:	080030dd 	.word	0x080030dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ac:	3308      	adds	r3, #8
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f001 fe43 	bl	8004d3c <RCCEx_PLL2_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030bc:	e00f      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030c2:	3328      	adds	r3, #40	; 0x28
 80030c4:	2101      	movs	r1, #1
 80030c6:	4618      	mov	r0, r3
 80030c8:	f001 feea 	bl	8004ea0 <RCCEx_PLL3_Config>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030d2:	e004      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030da:	e000      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80030dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80030e6:	4b96      	ldr	r3, [pc, #600]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	f023 0107 	bic.w	r1, r3, #7
 80030ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030f4:	4a92      	ldr	r2, [pc, #584]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030f6:	430b      	orrs	r3, r1
 80030f8:	6553      	str	r3, [r2, #84]	; 0x54
 80030fa:	e003      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003100:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f002 0304 	and.w	r3, r2, #4
 8003110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800311a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800311e:	460b      	mov	r3, r1
 8003120:	4313      	orrs	r3, r2
 8003122:	d044      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800312c:	2b05      	cmp	r3, #5
 800312e:	d825      	bhi.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	08003185 	.word	0x08003185
 800313c:	08003151 	.word	0x08003151
 8003140:	08003167 	.word	0x08003167
 8003144:	08003185 	.word	0x08003185
 8003148:	08003185 	.word	0x08003185
 800314c:	08003185 	.word	0x08003185
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003154:	3308      	adds	r3, #8
 8003156:	2101      	movs	r1, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f001 fdef 	bl	8004d3c <RCCEx_PLL2_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003164:	e00f      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800316a:	3328      	adds	r3, #40	; 0x28
 800316c:	2101      	movs	r1, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f001 fe96 	bl	8004ea0 <RCCEx_PLL3_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800317a:	e004      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003182:	e000      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10b      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800318e:	4b6c      	ldr	r3, [pc, #432]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	f023 0107 	bic.w	r1, r3, #7
 8003196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800319a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319e:	4a68      	ldr	r2, [pc, #416]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6593      	str	r3, [r2, #88]	; 0x58
 80031a4:	e003      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f002 0320 	and.w	r3, r2, #32
 80031ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031c8:	460b      	mov	r3, r1
 80031ca:	4313      	orrs	r3, r2
 80031cc:	d055      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80031ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031da:	d033      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80031dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031e0:	d82c      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e6:	d02f      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80031e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ec:	d826      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031f2:	d02b      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80031f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031f8:	d820      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031fe:	d012      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003204:	d81a      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d022      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800320a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800320e:	d115      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003214:	3308      	adds	r3, #8
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f001 fd8f 	bl	8004d3c <RCCEx_PLL2_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003224:	e015      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800322a:	3328      	adds	r3, #40	; 0x28
 800322c:	2102      	movs	r1, #2
 800322e:	4618      	mov	r0, r3
 8003230:	f001 fe36 	bl	8004ea0 <RCCEx_PLL3_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800323a:	e00a      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003242:	e006      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003244:	bf00      	nop
 8003246:	e004      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003248:	bf00      	nop
 800324a:	e002      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800324c:	bf00      	nop
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10b      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800325a:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	4a35      	ldr	r2, [pc, #212]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800326c:	430b      	orrs	r3, r1
 800326e:	6553      	str	r3, [r2, #84]	; 0x54
 8003270:	e003      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003276:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800327a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800327e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003282:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800328a:	2300      	movs	r3, #0
 800328c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003290:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003294:	460b      	mov	r3, r1
 8003296:	4313      	orrs	r3, r2
 8003298:	d058      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800329a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800329e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032a6:	d033      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80032a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032ac:	d82c      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80032ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b2:	d02f      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80032b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b8:	d826      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80032ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032be:	d02b      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80032c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032c4:	d820      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80032c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ca:	d012      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80032cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d0:	d81a      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d022      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032da:	d115      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e0:	3308      	adds	r3, #8
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 fd29 	bl	8004d3c <RCCEx_PLL2_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032f0:	e015      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032f6:	3328      	adds	r3, #40	; 0x28
 80032f8:	2102      	movs	r1, #2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 fdd0 	bl	8004ea0 <RCCEx_PLL3_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003306:	e00a      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800330e:	e006      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003310:	bf00      	nop
 8003312:	e004      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003314:	bf00      	nop
 8003316:	e002      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800331c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800331e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10e      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800332e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003332:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003336:	4a02      	ldr	r2, [pc, #8]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003338:	430b      	orrs	r3, r1
 800333a:	6593      	str	r3, [r2, #88]	; 0x58
 800333c:	e006      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800333e:	bf00      	nop
 8003340:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003348:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800334c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800335c:	2300      	movs	r3, #0
 800335e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003362:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003366:	460b      	mov	r3, r1
 8003368:	4313      	orrs	r3, r2
 800336a:	d055      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800336c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003374:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003378:	d033      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800337a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800337e:	d82c      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003384:	d02f      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800338a:	d826      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800338c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003390:	d02b      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003392:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003396:	d820      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800339c:	d012      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800339e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033a2:	d81a      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d022      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80033a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ac:	d115      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b2:	3308      	adds	r3, #8
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 fcc0 	bl	8004d3c <RCCEx_PLL2_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033c2:	e015      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c8:	3328      	adds	r3, #40	; 0x28
 80033ca:	2102      	movs	r1, #2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 fd67 	bl	8004ea0 <RCCEx_PLL3_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033d8:	e00a      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033e0:	e006      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033e2:	bf00      	nop
 80033e4:	e004      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033e6:	bf00      	nop
 80033e8:	e002      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033ea:	bf00      	nop
 80033ec:	e000      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10b      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033f8:	4ba1      	ldr	r3, [pc, #644]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003404:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003408:	4a9d      	ldr	r2, [pc, #628]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800340a:	430b      	orrs	r3, r1
 800340c:	6593      	str	r3, [r2, #88]	; 0x58
 800340e:	e003      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003414:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f002 0308 	and.w	r3, r2, #8
 8003424:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800342e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003432:	460b      	mov	r3, r1
 8003434:	4313      	orrs	r3, r2
 8003436:	d01e      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800343c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003444:	d10c      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800344a:	3328      	adds	r3, #40	; 0x28
 800344c:	2102      	movs	r1, #2
 800344e:	4618      	mov	r0, r3
 8003450:	f001 fd26 	bl	8004ea0 <RCCEx_PLL3_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003460:	4b87      	ldr	r3, [pc, #540]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800346c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003470:	4a83      	ldr	r2, [pc, #524]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003472:	430b      	orrs	r3, r1
 8003474:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347e:	f002 0310 	and.w	r3, r2, #16
 8003482:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800348c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003490:	460b      	mov	r3, r1
 8003492:	4313      	orrs	r3, r2
 8003494:	d01e      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800349a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800349e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a2:	d10c      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a8:	3328      	adds	r3, #40	; 0x28
 80034aa:	2102      	movs	r1, #2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 fcf7 	bl	8004ea0 <RCCEx_PLL3_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034be:	4b70      	ldr	r3, [pc, #448]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ce:	4a6c      	ldr	r2, [pc, #432]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80034e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80034ee:	460b      	mov	r3, r1
 80034f0:	4313      	orrs	r3, r2
 80034f2:	d03e      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003500:	d022      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003506:	d81b      	bhi.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800350c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003510:	d00b      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003512:	e015      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003518:	3308      	adds	r3, #8
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f001 fc0d 	bl	8004d3c <RCCEx_PLL2_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003528:	e00f      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352e:	3328      	adds	r3, #40	; 0x28
 8003530:	2102      	movs	r1, #2
 8003532:	4618      	mov	r0, r3
 8003534:	f001 fcb4 	bl	8004ea0 <RCCEx_PLL3_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800353e:	e004      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003546:	e000      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800354a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003552:	4b4b      	ldr	r3, [pc, #300]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800355a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003562:	4a47      	ldr	r2, [pc, #284]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003564:	430b      	orrs	r3, r1
 8003566:	6593      	str	r3, [r2, #88]	; 0x58
 8003568:	e003      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800356e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800357e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003580:	2300      	movs	r3, #0
 8003582:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003584:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003588:	460b      	mov	r3, r1
 800358a:	4313      	orrs	r3, r2
 800358c:	d03b      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800359a:	d01f      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800359c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035a0:	d818      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80035a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035a6:	d003      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80035a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035ac:	d007      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80035ae:	e011      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b0:	4b33      	ldr	r3, [pc, #204]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	4a32      	ldr	r2, [pc, #200]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80035bc:	e00f      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c2:	3328      	adds	r3, #40	; 0x28
 80035c4:	2101      	movs	r1, #1
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 fc6a 	bl	8004ea0 <RCCEx_PLL3_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80035d2:	e004      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035da:	e000      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80035dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035e6:	4b26      	ldr	r3, [pc, #152]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	4a22      	ldr	r2, [pc, #136]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6553      	str	r3, [r2, #84]	; 0x54
 80035fc:	e003      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003602:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003612:	673b      	str	r3, [r7, #112]	; 0x70
 8003614:	2300      	movs	r3, #0
 8003616:	677b      	str	r3, [r7, #116]	; 0x74
 8003618:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800361c:	460b      	mov	r3, r1
 800361e:	4313      	orrs	r3, r2
 8003620:	d034      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003630:	d007      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003632:	e011      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	4a11      	ldr	r2, [pc, #68]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800363a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003640:	e00e      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003646:	3308      	adds	r3, #8
 8003648:	2102      	movs	r1, #2
 800364a:	4618      	mov	r0, r3
 800364c:	f001 fb76 	bl	8004d3c <RCCEx_PLL2_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003656:	e003      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800365e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10d      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800366a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003676:	4a02      	ldr	r2, [pc, #8]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003678:	430b      	orrs	r3, r1
 800367a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800367c:	e006      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800367e:	bf00      	nop
 8003680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003688:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003698:	66bb      	str	r3, [r7, #104]	; 0x68
 800369a:	2300      	movs	r3, #0
 800369c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800369e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80036a2:	460b      	mov	r3, r1
 80036a4:	4313      	orrs	r3, r2
 80036a6:	d00c      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ac:	3328      	adds	r3, #40	; 0x28
 80036ae:	2102      	movs	r1, #2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 fbf5 	bl	8004ea0 <RCCEx_PLL3_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80036ce:	663b      	str	r3, [r7, #96]	; 0x60
 80036d0:	2300      	movs	r3, #0
 80036d2:	667b      	str	r3, [r7, #100]	; 0x64
 80036d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80036d8:	460b      	mov	r3, r1
 80036da:	4313      	orrs	r3, r2
 80036dc:	d038      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80036de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ea:	d018      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80036ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f0:	d811      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80036f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f6:	d014      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80036f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fc:	d80b      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d011      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003706:	d106      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003708:	4bc3      	ldr	r3, [pc, #780]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	4ac2      	ldr	r2, [pc, #776]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800370e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003714:	e008      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800371c:	e004      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800371e:	bf00      	nop
 8003720:	e002      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003730:	4bb9      	ldr	r3, [pc, #740]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003740:	4ab5      	ldr	r2, [pc, #724]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003742:	430b      	orrs	r3, r1
 8003744:	6553      	str	r3, [r2, #84]	; 0x54
 8003746:	e003      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800374c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800375c:	65bb      	str	r3, [r7, #88]	; 0x58
 800375e:	2300      	movs	r3, #0
 8003760:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003762:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003766:	460b      	mov	r3, r1
 8003768:	4313      	orrs	r3, r2
 800376a:	d009      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800376c:	4baa      	ldr	r3, [pc, #680]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800376e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003770:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377a:	4aa7      	ldr	r2, [pc, #668]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800377c:	430b      	orrs	r3, r1
 800377e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800378c:	653b      	str	r3, [r7, #80]	; 0x50
 800378e:	2300      	movs	r3, #0
 8003790:	657b      	str	r3, [r7, #84]	; 0x54
 8003792:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003796:	460b      	mov	r3, r1
 8003798:	4313      	orrs	r3, r2
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800379c:	4b9e      	ldr	r3, [pc, #632]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037ac:	4a9a      	ldr	r2, [pc, #616]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037ae:	430b      	orrs	r3, r1
 80037b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80037be:	64bb      	str	r3, [r7, #72]	; 0x48
 80037c0:	2300      	movs	r3, #0
 80037c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80037c8:	460b      	mov	r3, r1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	d009      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ce:	4b92      	ldr	r3, [pc, #584]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037dc:	4a8e      	ldr	r2, [pc, #568]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037de:	430b      	orrs	r3, r1
 80037e0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80037ee:	643b      	str	r3, [r7, #64]	; 0x40
 80037f0:	2300      	movs	r3, #0
 80037f2:	647b      	str	r3, [r7, #68]	; 0x44
 80037f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d00e      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037fe:	4b86      	ldr	r3, [pc, #536]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	4a85      	ldr	r2, [pc, #532]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003804:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003808:	6113      	str	r3, [r2, #16]
 800380a:	4b83      	ldr	r3, [pc, #524]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800380c:	6919      	ldr	r1, [r3, #16]
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003812:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003816:	4a80      	ldr	r2, [pc, #512]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003818:	430b      	orrs	r3, r1
 800381a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003828:	63bb      	str	r3, [r7, #56]	; 0x38
 800382a:	2300      	movs	r3, #0
 800382c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003832:	460b      	mov	r3, r1
 8003834:	4313      	orrs	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003838:	4b77      	ldr	r3, [pc, #476]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800383a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	4a74      	ldr	r2, [pc, #464]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003848:	430b      	orrs	r3, r1
 800384a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
 800385a:	2300      	movs	r3, #0
 800385c:	637b      	str	r3, [r7, #52]	; 0x34
 800385e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003862:	460b      	mov	r3, r1
 8003864:	4313      	orrs	r3, r2
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003868:	4b6b      	ldr	r3, [pc, #428]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003878:	4a67      	ldr	r2, [pc, #412]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800387a:	430b      	orrs	r3, r1
 800387c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	2100      	movs	r1, #0
 8003888:	62b9      	str	r1, [r7, #40]	; 0x28
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003890:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003894:	460b      	mov	r3, r1
 8003896:	4313      	orrs	r3, r2
 8003898:	d011      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389e:	3308      	adds	r3, #8
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 fa4a 	bl	8004d3c <RCCEx_PLL2_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80038ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	2100      	movs	r1, #0
 80038c8:	6239      	str	r1, [r7, #32]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
 80038d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80038d4:	460b      	mov	r3, r1
 80038d6:	4313      	orrs	r3, r2
 80038d8:	d011      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038de:	3308      	adds	r3, #8
 80038e0:	2101      	movs	r1, #1
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 fa2a 	bl	8004d3c <RCCEx_PLL2_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80038ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	2100      	movs	r1, #0
 8003908:	61b9      	str	r1, [r7, #24]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003914:	460b      	mov	r3, r1
 8003916:	4313      	orrs	r3, r2
 8003918:	d011      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800391a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800391e:	3308      	adds	r3, #8
 8003920:	2102      	movs	r1, #2
 8003922:	4618      	mov	r0, r3
 8003924:	f001 fa0a 	bl	8004d3c <RCCEx_PLL2_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800392e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800393a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800393e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	2100      	movs	r1, #0
 8003948:	6139      	str	r1, [r7, #16]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003954:	460b      	mov	r3, r1
 8003956:	4313      	orrs	r3, r2
 8003958:	d011      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800395e:	3328      	adds	r3, #40	; 0x28
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f001 fa9c 	bl	8004ea0 <RCCEx_PLL3_Config>
 8003968:	4603      	mov	r3, r0
 800396a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800396e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800397a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	2100      	movs	r1, #0
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003994:	460b      	mov	r3, r1
 8003996:	4313      	orrs	r3, r2
 8003998:	d011      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399e:	3328      	adds	r3, #40	; 0x28
 80039a0:	2101      	movs	r1, #1
 80039a2:	4618      	mov	r0, r3
 80039a4:	f001 fa7c 	bl	8004ea0 <RCCEx_PLL3_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80039ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	2100      	movs	r1, #0
 80039c8:	6039      	str	r1, [r7, #0]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039d4:	460b      	mov	r3, r1
 80039d6:	4313      	orrs	r3, r2
 80039d8:	d011      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039de:	3328      	adds	r3, #40	; 0x28
 80039e0:	2102      	movs	r1, #2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 fa5c 	bl	8004ea0 <RCCEx_PLL3_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80039ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80039fe:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e000      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003a12:	46bd      	mov	sp, r7
 8003a14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a18:	58024400 	.word	0x58024400

08003a1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b090      	sub	sp, #64	; 0x40
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a2a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	f040 8094 	bne.w	8003b5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8003a34:	4b9e      	ldr	r3, [pc, #632]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	f200 8087 	bhi.w	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8003a46:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a61 	.word	0x08003a61
 8003a50:	08003a89 	.word	0x08003a89
 8003a54:	08003ab1 	.word	0x08003ab1
 8003a58:	08003b4d 	.word	0x08003b4d
 8003a5c:	08003ad9 	.word	0x08003ad9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003a60:	4b93      	ldr	r3, [pc, #588]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a6c:	d108      	bne.n	8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f810 	bl	8004a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003a7c:	f000 bd45 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003a84:	f000 bd41 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003a88:	4b89      	ldr	r3, [pc, #548]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a94:	d108      	bne.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a96:	f107 0318 	add.w	r3, r7, #24
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fd54 	bl	8004548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003aa4:	f000 bd31 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003aac:	f000 bd2d 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003ab0:	4b7f      	ldr	r3, [pc, #508]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003abc:	d108      	bne.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003abe:	f107 030c 	add.w	r3, r7, #12
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fe94 	bl	80047f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003acc:	f000 bd1d 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003ad4:	f000 bd19 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003ad8:	4b75      	ldr	r3, [pc, #468]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003adc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003ae2:	4b73      	ldr	r3, [pc, #460]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003af4:	4b6e      	ldr	r3, [pc, #440]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	08db      	lsrs	r3, r3, #3
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	4a6d      	ldr	r2, [pc, #436]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
 8003b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b06:	e01f      	b.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003b08:	4b69      	ldr	r3, [pc, #420]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b14:	d106      	bne.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b1c:	d102      	bne.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003b1e:	4b66      	ldr	r3, [pc, #408]	; (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b22:	e011      	b.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003b24:	4b62      	ldr	r3, [pc, #392]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b30:	d106      	bne.n	8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8003b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b38:	d102      	bne.n	8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003b3a:	4b60      	ldr	r3, [pc, #384]	; (8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b3e:	e003      	b.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8003b44:	f000 bce1 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003b48:	f000 bcdf 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003b4c:	4b5c      	ldr	r3, [pc, #368]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b50:	f000 bcdb 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b58:	f000 bcd7 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b60:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8003b64:	430b      	orrs	r3, r1
 8003b66:	f040 80ad 	bne.w	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8003b6a:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003b72:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7a:	d056      	beq.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b82:	f200 8090 	bhi.w	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	2bc0      	cmp	r3, #192	; 0xc0
 8003b8a:	f000 8088 	beq.w	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	2bc0      	cmp	r3, #192	; 0xc0
 8003b92:	f200 8088 	bhi.w	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	2b80      	cmp	r3, #128	; 0x80
 8003b9a:	d032      	beq.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	2b80      	cmp	r3, #128	; 0x80
 8003ba0:	f200 8081 	bhi.w	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d014      	beq.n	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8003bb0:	e079      	b.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bbe:	d108      	bne.n	8003bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 ff67 	bl	8004a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003bce:	f000 bc9c 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003bd6:	f000 bc98 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003bda:	4b35      	ldr	r3, [pc, #212]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be6:	d108      	bne.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003be8:	f107 0318 	add.w	r3, r7, #24
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fcab 	bl	8004548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003bf6:	f000 bc88 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003bfe:	f000 bc84 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003c02:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c0e:	d108      	bne.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c10:	f107 030c 	add.w	r3, r7, #12
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fdeb 	bl	80047f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003c1e:	f000 bc74 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003c26:	f000 bc70 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003c2a:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c32:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003c34:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d10c      	bne.n	8003c5a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8003c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c46:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	08db      	lsrs	r3, r3, #3
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003c52:	fa22 f303 	lsr.w	r3, r2, r3
 8003c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c58:	e01f      	b.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c66:	d106      	bne.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8003c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c6e:	d102      	bne.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003c70:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c74:	e011      	b.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c82:	d106      	bne.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8a:	d102      	bne.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c90:	e003      	b.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8003c96:	f000 bc38 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003c9a:	f000 bc36 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003c9e:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003ca2:	f000 bc32 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003caa:	f000 bc2e 	b.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003cae:	bf00      	nop
 8003cb0:	58024400 	.word	0x58024400
 8003cb4:	03d09000 	.word	0x03d09000
 8003cb8:	003d0900 	.word	0x003d0900
 8003cbc:	017d7840 	.word	0x017d7840
 8003cc0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cc8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	f040 809c 	bne.w	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8003cd2:	4b9e      	ldr	r3, [pc, #632]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ce2:	d054      	beq.n	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cea:	f200 808b 	bhi.w	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003cf4:	f000 8083 	beq.w	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003cfe:	f200 8081 	bhi.w	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d08:	d02f      	beq.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d10:	d878      	bhi.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d004      	beq.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8003d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d1e:	d012      	beq.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8003d20:	e070      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d22:	4b8a      	ldr	r3, [pc, #552]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 feaf 	bl	8004a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003d3e:	e3e4      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003d44:	e3e1      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003d46:	4b81      	ldr	r3, [pc, #516]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d52:	d107      	bne.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d54:	f107 0318 	add.w	r3, r7, #24
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fbf5 	bl	8004548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003d62:	e3d2      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003d68:	e3cf      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003d6a:	4b78      	ldr	r3, [pc, #480]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d76:	d107      	bne.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d78:	f107 030c 	add.w	r3, r7, #12
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fd37 	bl	80047f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003d86:	e3c0      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003d8c:	e3bd      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003d8e:	4b6f      	ldr	r3, [pc, #444]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003d98:	4b6c      	ldr	r3, [pc, #432]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d10c      	bne.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8003da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003daa:	4b68      	ldr	r3, [pc, #416]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	08db      	lsrs	r3, r3, #3
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	4a66      	ldr	r2, [pc, #408]	; (8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dbc:	e01e      	b.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003dbe:	4b63      	ldr	r3, [pc, #396]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dca:	d106      	bne.n	8003dda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dd2:	d102      	bne.n	8003dda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003dd4:	4b5f      	ldr	r3, [pc, #380]	; (8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8003dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd8:	e010      	b.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003dda:	4b5c      	ldr	r3, [pc, #368]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de6:	d106      	bne.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8003de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dee:	d102      	bne.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003df0:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df4:	e002      	b.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8003dfa:	e386      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003dfc:	e385      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003dfe:	4b57      	ldr	r3, [pc, #348]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8003e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e02:	e382      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e08:	e37f      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e0e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8003e12:	430b      	orrs	r3, r1
 8003e14:	f040 80a7 	bne.w	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8003e18:	4b4c      	ldr	r3, [pc, #304]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003e20:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e28:	d055      	beq.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e30:	f200 8096 	bhi.w	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e3a:	f000 8084 	beq.w	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e44:	f200 808c 	bhi.w	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e4e:	d030      	beq.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e56:	f200 8083 	bhi.w	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e66:	d012      	beq.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8003e68:	e07a      	b.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003e6a:	4b38      	ldr	r3, [pc, #224]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e76:	d107      	bne.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fe0b 	bl	8004a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e86:	e340      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e8c:	e33d      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e8e:	4b2f      	ldr	r3, [pc, #188]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e9a:	d107      	bne.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e9c:	f107 0318 	add.w	r3, r7, #24
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fb51 	bl	8004548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003eaa:	e32e      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003eb0:	e32b      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003eb2:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ebe:	d107      	bne.n	8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ec0:	f107 030c 	add.w	r3, r7, #12
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fc93 	bl	80047f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003ece:	e31c      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003ed4:	e319      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d10c      	bne.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8003eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	08db      	lsrs	r3, r3, #3
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	4a14      	ldr	r2, [pc, #80]	; (8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8003efe:	fa22 f303 	lsr.w	r3, r2, r3
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f04:	e01e      	b.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003f06:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f12:	d106      	bne.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8003f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f1a:	d102      	bne.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8003f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f20:	e010      	b.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f2e:	d106      	bne.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8003f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f36:	d102      	bne.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003f38:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f3c:	e002      	b.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8003f42:	e2e2      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003f44:	e2e1      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8003f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003f4a:	e2de      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003f4c:	58024400 	.word	0x58024400
 8003f50:	03d09000 	.word	0x03d09000
 8003f54:	003d0900 	.word	0x003d0900
 8003f58:	017d7840 	.word	0x017d7840
 8003f5c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003f64:	e2d1      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f6a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	f040 809c 	bne.w	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8003f74:	4b93      	ldr	r3, [pc, #588]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f78:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f84:	d054      	beq.n	8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f8c:	f200 808b 	bhi.w	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8003f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f96:	f000 8083 	beq.w	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fa0:	f200 8081 	bhi.w	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003faa:	d02f      	beq.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb2:	d878      	bhi.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc0:	d012      	beq.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8003fc2:	e070      	b.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003fc4:	4b7f      	ldr	r3, [pc, #508]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fd0:	d107      	bne.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fd5e 	bl	8004a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003fe0:	e293      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003fe6:	e290      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003fe8:	4b76      	ldr	r3, [pc, #472]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ff4:	d107      	bne.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ff6:	f107 0318 	add.w	r3, r7, #24
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 faa4 	bl	8004548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004004:	e281      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800400a:	e27e      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800400c:	4b6d      	ldr	r3, [pc, #436]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004018:	d107      	bne.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800401a:	f107 030c 	add.w	r3, r7, #12
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fbe6 	bl	80047f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004028:	e26f      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800402a:	2300      	movs	r3, #0
 800402c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800402e:	e26c      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004030:	4b64      	ldr	r3, [pc, #400]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004034:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004038:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800403a:	4b62      	ldr	r3, [pc, #392]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b04      	cmp	r3, #4
 8004044:	d10c      	bne.n	8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004048:	2b00      	cmp	r3, #0
 800404a:	d109      	bne.n	8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800404c:	4b5d      	ldr	r3, [pc, #372]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	08db      	lsrs	r3, r3, #3
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	4a5c      	ldr	r2, [pc, #368]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
 800405c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800405e:	e01e      	b.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004060:	4b58      	ldr	r3, [pc, #352]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406c:	d106      	bne.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800406e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004074:	d102      	bne.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004076:	4b55      	ldr	r3, [pc, #340]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800407a:	e010      	b.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800407c:	4b51      	ldr	r3, [pc, #324]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004088:	d106      	bne.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004090:	d102      	bne.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004092:	4b4f      	ldr	r3, [pc, #316]	; (80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004094:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004096:	e002      	b.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800409c:	e235      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800409e:	e234      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80040a0:	4b4c      	ldr	r3, [pc, #304]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80040a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80040a4:	e231      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80040aa:	e22e      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80040ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040b0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80040b4:	430b      	orrs	r3, r1
 80040b6:	f040 808f 	bne.w	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80040ba:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80040bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040be:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80040c2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80040c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ca:	d06b      	beq.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80040cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d2:	d874      	bhi.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80040d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040da:	d056      	beq.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e2:	d86c      	bhi.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040ea:	d03b      	beq.n	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040f2:	d864      	bhi.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040fa:	d021      	beq.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80040fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004102:	d85c      	bhi.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	2b00      	cmp	r3, #0
 8004108:	d004      	beq.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004110:	d004      	beq.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8004112:	e054      	b.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004114:	f7fe fa4c 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8004118:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800411a:	e1f6      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800411c:	4b29      	ldr	r3, [pc, #164]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004128:	d107      	bne.n	800413a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800412a:	f107 0318 	add.w	r3, r7, #24
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fa0a 	bl	8004548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004138:	e1e7      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800413e:	e1e4      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004140:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800414c:	d107      	bne.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800414e:	f107 030c 	add.w	r3, r7, #12
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fb4c 	bl	80047f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800415c:	e1d5      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004162:	e1d2      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004164:	4b17      	ldr	r3, [pc, #92]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b04      	cmp	r3, #4
 800416e:	d109      	bne.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	08db      	lsrs	r3, r3, #3
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
 8004180:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004182:	e1c2      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004188:	e1bf      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800418a:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004196:	d102      	bne.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800419a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800419c:	e1b5      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80041a2:	e1b2      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80041a4:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b0:	d102      	bne.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80041b2:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80041b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80041b6:	e1a8      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80041bc:	e1a5      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80041c2:	e1a2      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80041c4:	58024400 	.word	0x58024400
 80041c8:	03d09000 	.word	0x03d09000
 80041cc:	003d0900 	.word	0x003d0900
 80041d0:	017d7840 	.word	0x017d7840
 80041d4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80041d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041dc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80041e0:	430b      	orrs	r3, r1
 80041e2:	d173      	bne.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80041e4:	4b9c      	ldr	r3, [pc, #624]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041f4:	d02f      	beq.n	8004256 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041fc:	d863      	bhi.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8004204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420a:	d012      	beq.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800420c:	e05b      	b.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800420e:	4b92      	ldr	r3, [pc, #584]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800421a:	d107      	bne.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800421c:	f107 0318 	add.w	r3, r7, #24
 8004220:	4618      	mov	r0, r3
 8004222:	f000 f991 	bl	8004548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800422a:	e16e      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004230:	e16b      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004232:	4b89      	ldr	r3, [pc, #548]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800423a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800423e:	d107      	bne.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004240:	f107 030c 	add.w	r3, r7, #12
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fad3 	bl	80047f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800424e:	e15c      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004254:	e159      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004256:	4b80      	ldr	r3, [pc, #512]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800425e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004260:	4b7d      	ldr	r3, [pc, #500]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b04      	cmp	r3, #4
 800426a:	d10c      	bne.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004272:	4b79      	ldr	r3, [pc, #484]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	08db      	lsrs	r3, r3, #3
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	4a77      	ldr	r2, [pc, #476]	; (800445c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800427e:	fa22 f303 	lsr.w	r3, r2, r3
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004284:	e01e      	b.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004286:	4b74      	ldr	r3, [pc, #464]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004292:	d106      	bne.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8004294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800429a:	d102      	bne.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800429c:	4b70      	ldr	r3, [pc, #448]	; (8004460 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800429e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a0:	e010      	b.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80042a2:	4b6d      	ldr	r3, [pc, #436]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042ae:	d106      	bne.n	80042be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b6:	d102      	bne.n	80042be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80042b8:	4b6a      	ldr	r3, [pc, #424]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80042ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042bc:	e002      	b.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80042c2:	e122      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80042c4:	e121      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042ca:	e11e      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80042cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042d0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80042d4:	430b      	orrs	r3, r1
 80042d6:	d133      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80042d8:	4b5f      	ldr	r3, [pc, #380]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80042da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ee:	d012      	beq.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80042f0:	e023      	b.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80042f2:	4b59      	ldr	r3, [pc, #356]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042fe:	d107      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fbc7 	bl	8004a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800430e:	e0fc      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004314:	e0f9      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004316:	4b50      	ldr	r3, [pc, #320]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800431e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004322:	d107      	bne.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004324:	f107 0318 	add.w	r3, r7, #24
 8004328:	4618      	mov	r0, r3
 800432a:	f000 f90d 	bl	8004548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004332:	e0ea      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004338:	e0e7      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800433e:	e0e4      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004344:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004348:	430b      	orrs	r3, r1
 800434a:	f040 808d 	bne.w	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800434e:	4b42      	ldr	r3, [pc, #264]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004356:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800435e:	d06b      	beq.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8004360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004366:	d874      	bhi.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436e:	d056      	beq.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004376:	d86c      	bhi.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800437e:	d03b      	beq.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8004380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004382:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004386:	d864      	bhi.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800438e:	d021      	beq.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004396:	d85c      	bhi.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043a4:	d004      	beq.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80043a6:	e054      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80043a8:	f000 f8b8 	bl	800451c <HAL_RCCEx_GetD3PCLK1Freq>
 80043ac:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80043ae:	e0ac      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80043b0:	4b29      	ldr	r3, [pc, #164]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043bc:	d107      	bne.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043be:	f107 0318 	add.w	r3, r7, #24
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f8c0 	bl	8004548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80043cc:	e09d      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043d2:	e09a      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80043d4:	4b20      	ldr	r3, [pc, #128]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043e0:	d107      	bne.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043e2:	f107 030c 	add.w	r3, r7, #12
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fa02 	bl	80047f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80043f0:	e08b      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043f6:	e088      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043f8:	4b17      	ldr	r3, [pc, #92]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b04      	cmp	r3, #4
 8004402:	d109      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004404:	4b14      	ldr	r3, [pc, #80]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	08db      	lsrs	r3, r3, #3
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	4a13      	ldr	r2, [pc, #76]	; (800445c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
 8004414:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004416:	e078      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800441c:	e075      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800441e:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442a:	d102      	bne.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800442c:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800442e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004430:	e06b      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004436:	e068      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004444:	d102      	bne.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004448:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800444a:	e05e      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004450:	e05b      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004456:	e058      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004458:	58024400 	.word	0x58024400
 800445c:	03d09000 	.word	0x03d09000
 8004460:	003d0900 	.word	0x003d0900
 8004464:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800446c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8004470:	430b      	orrs	r3, r1
 8004472:	d148      	bne.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004474:	4b27      	ldr	r3, [pc, #156]	; (8004514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004478:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800447c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004484:	d02a      	beq.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800448c:	d838      	bhi.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800449a:	d00d      	beq.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800449c:	e030      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800449e:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044aa:	d102      	bne.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80044ac:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80044ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80044b0:	e02b      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044b6:	e028      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80044b8:	4b16      	ldr	r3, [pc, #88]	; (8004514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044c4:	d107      	bne.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fae4 	bl	8004a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80044d4:	e019      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80044d6:	2300      	movs	r3, #0
 80044d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044da:	e016      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80044dc:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044e8:	d107      	bne.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044ea:	f107 0318 	add.w	r3, r7, #24
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f82a 	bl	8004548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80044f8:	e007      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044fe:	e004      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004504:	e001      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800450a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800450c:	4618      	mov	r0, r3
 800450e:	3740      	adds	r7, #64	; 0x40
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	58024400 	.word	0x58024400
 8004518:	017d7840 	.word	0x017d7840

0800451c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004520:	f7fe f816 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8004524:	4602      	mov	r2, r0
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	4904      	ldr	r1, [pc, #16]	; (8004544 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004532:	5ccb      	ldrb	r3, [r1, r3]
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	58024400 	.word	0x58024400
 8004544:	0800ba74 	.word	0x0800ba74

08004548 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004548:	b480      	push	{r7}
 800454a:	b089      	sub	sp, #36	; 0x24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004550:	4ba1      	ldr	r3, [pc, #644]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800455a:	4b9f      	ldr	r3, [pc, #636]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	0b1b      	lsrs	r3, r3, #12
 8004560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004564:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004566:	4b9c      	ldr	r3, [pc, #624]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004572:	4b99      	ldr	r3, [pc, #612]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	08db      	lsrs	r3, r3, #3
 8004578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8111 	beq.w	80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b02      	cmp	r3, #2
 800459a:	f000 8083 	beq.w	80046a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	f200 80a1 	bhi.w	80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d056      	beq.n	8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045b2:	e099      	b.n	80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b4:	4b88      	ldr	r3, [pc, #544]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02d      	beq.n	800461c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045c0:	4b85      	ldr	r3, [pc, #532]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	08db      	lsrs	r3, r3, #3
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	4a84      	ldr	r2, [pc, #528]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
 80045d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ea:	4b7b      	ldr	r3, [pc, #492]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80045fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004616:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800461a:	e087      	b.n	800472c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004626:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800462a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462e:	4b6a      	ldr	r3, [pc, #424]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004642:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800465e:	e065      	b.n	800472c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800466e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004672:	4b59      	ldr	r3, [pc, #356]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004682:	ed97 6a03 	vldr	s12, [r7, #12]
 8004686:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800468a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046a2:	e043      	b.n	800472c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b6:	4b48      	ldr	r3, [pc, #288]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046e6:	e021      	b.n	800472c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fa:	4b37      	ldr	r3, [pc, #220]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470a:	ed97 6a03 	vldr	s12, [r7, #12]
 800470e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800472a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800472c:	4b2a      	ldr	r3, [pc, #168]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	0a5b      	lsrs	r3, r3, #9
 8004732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004746:	edd7 6a07 	vldr	s13, [r7, #28]
 800474a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800474e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004752:	ee17 2a90 	vmov	r2, s15
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800475a:	4b1f      	ldr	r3, [pc, #124]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	0c1b      	lsrs	r3, r3, #16
 8004760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004764:	ee07 3a90 	vmov	s15, r3
 8004768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004770:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004774:	edd7 6a07 	vldr	s13, [r7, #28]
 8004778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800477c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004780:	ee17 2a90 	vmov	r2, s15
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004788:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	0e1b      	lsrs	r3, r3, #24
 800478e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800479e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ae:	ee17 2a90 	vmov	r2, s15
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047b6:	e008      	b.n	80047ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]
}
 80047ca:	bf00      	nop
 80047cc:	3724      	adds	r7, #36	; 0x24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	58024400 	.word	0x58024400
 80047dc:	03d09000 	.word	0x03d09000
 80047e0:	46000000 	.word	0x46000000
 80047e4:	4c742400 	.word	0x4c742400
 80047e8:	4a742400 	.word	0x4a742400
 80047ec:	4bbebc20 	.word	0x4bbebc20

080047f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b089      	sub	sp, #36	; 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047f8:	4ba1      	ldr	r3, [pc, #644]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004802:	4b9f      	ldr	r3, [pc, #636]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	0d1b      	lsrs	r3, r3, #20
 8004808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800480c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800480e:	4b9c      	ldr	r3, [pc, #624]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800481a:	4b99      	ldr	r3, [pc, #612]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	08db      	lsrs	r3, r3, #3
 8004820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	fb02 f303 	mul.w	r3, r2, r3
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004832:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8111 	beq.w	8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b02      	cmp	r3, #2
 8004842:	f000 8083 	beq.w	800494c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b02      	cmp	r3, #2
 800484a:	f200 80a1 	bhi.w	8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d056      	beq.n	8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800485a:	e099      	b.n	8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800485c:	4b88      	ldr	r3, [pc, #544]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d02d      	beq.n	80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004868:	4b85      	ldr	r3, [pc, #532]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	08db      	lsrs	r3, r3, #3
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	4a84      	ldr	r2, [pc, #528]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
 8004878:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	ee07 3a90 	vmov	s15, r3
 8004880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004892:	4b7b      	ldr	r3, [pc, #492]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048c2:	e087      	b.n	80049d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d6:	4b6a      	ldr	r3, [pc, #424]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004906:	e065      	b.n	80049d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004912:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491a:	4b59      	ldr	r3, [pc, #356]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492a:	ed97 6a03 	vldr	s12, [r7, #12]
 800492e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800493e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800494a:	e043      	b.n	80049d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004956:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800495a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495e:	4b48      	ldr	r3, [pc, #288]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004972:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800498e:	e021      	b.n	80049d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800499e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a2:	4b37      	ldr	r3, [pc, #220]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80049d4:	4b2a      	ldr	r3, [pc, #168]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	0a5b      	lsrs	r3, r3, #9
 80049da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80049f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049fa:	ee17 2a90 	vmov	r2, s15
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004a02:	4b1f      	ldr	r3, [pc, #124]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	0c1b      	lsrs	r3, r3, #16
 8004a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a28:	ee17 2a90 	vmov	r2, s15
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a30:	4b13      	ldr	r3, [pc, #76]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	0e1b      	lsrs	r3, r3, #24
 8004a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a56:	ee17 2a90 	vmov	r2, s15
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a5e:	e008      	b.n	8004a72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	609a      	str	r2, [r3, #8]
}
 8004a72:	bf00      	nop
 8004a74:	3724      	adds	r7, #36	; 0x24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	58024400 	.word	0x58024400
 8004a84:	03d09000 	.word	0x03d09000
 8004a88:	46000000 	.word	0x46000000
 8004a8c:	4c742400 	.word	0x4c742400
 8004a90:	4a742400 	.word	0x4a742400
 8004a94:	4bbebc20 	.word	0x4bbebc20

08004a98 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b089      	sub	sp, #36	; 0x24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004aa0:	4ba0      	ldr	r3, [pc, #640]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004aaa:	4b9e      	ldr	r3, [pc, #632]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	091b      	lsrs	r3, r3, #4
 8004ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004ab6:	4b9b      	ldr	r3, [pc, #620]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004ac0:	4b98      	ldr	r3, [pc, #608]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac4:	08db      	lsrs	r3, r3, #3
 8004ac6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	fb02 f303 	mul.w	r3, r2, r3
 8004ad0:	ee07 3a90 	vmov	s15, r3
 8004ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 8111 	beq.w	8004d06 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	f000 8083 	beq.w	8004bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	f200 80a1 	bhi.w	8004c36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d056      	beq.n	8004bae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8004b00:	e099      	b.n	8004c36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b02:	4b88      	ldr	r3, [pc, #544]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d02d      	beq.n	8004b6a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b0e:	4b85      	ldr	r3, [pc, #532]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	08db      	lsrs	r3, r3, #3
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	4a83      	ldr	r2, [pc, #524]	; (8004d28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8004b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b38:	4b7a      	ldr	r3, [pc, #488]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b48:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b64:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b68:	e087      	b.n	8004c7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	ee07 3a90 	vmov	s15, r3
 8004b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b74:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004d30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7c:	4b69      	ldr	r3, [pc, #420]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b84:	ee07 3a90 	vmov	s15, r3
 8004b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b90:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004b94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bac:	e065      	b.n	8004c7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	ee07 3a90 	vmov	s15, r3
 8004bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8004bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc0:	4b58      	ldr	r3, [pc, #352]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc8:	ee07 3a90 	vmov	s15, r3
 8004bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bd4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bf0:	e043      	b.n	8004c7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8004c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c04:	4b47      	ldr	r3, [pc, #284]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0c:	ee07 3a90 	vmov	s15, r3
 8004c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c14:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c18:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004c1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c34:	e021      	b.n	8004c7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c40:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8004d30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004c44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c48:	4b36      	ldr	r3, [pc, #216]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c50:	ee07 3a90 	vmov	s15, r3
 8004c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c58:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c5c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c78:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004c7a:	4b2a      	ldr	r3, [pc, #168]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	0a5b      	lsrs	r3, r3, #9
 8004c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca0:	ee17 2a90 	vmov	r2, s15
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cce:	ee17 2a90 	vmov	r2, s15
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004cd6:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	0e1b      	lsrs	r3, r3, #24
 8004cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ce0:	ee07 3a90 	vmov	s15, r3
 8004ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cfc:	ee17 2a90 	vmov	r2, s15
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004d04:	e008      	b.n	8004d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	609a      	str	r2, [r3, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	3724      	adds	r7, #36	; 0x24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	58024400 	.word	0x58024400
 8004d28:	03d09000 	.word	0x03d09000
 8004d2c:	46000000 	.word	0x46000000
 8004d30:	4c742400 	.word	0x4c742400
 8004d34:	4a742400 	.word	0x4a742400
 8004d38:	4bbebc20 	.word	0x4bbebc20

08004d3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d4a:	4b53      	ldr	r3, [pc, #332]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d101      	bne.n	8004d5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e099      	b.n	8004e8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d5a:	4b4f      	ldr	r3, [pc, #316]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a4e      	ldr	r2, [pc, #312]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004d60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d66:	f7fc f8e7 	bl	8000f38 <HAL_GetTick>
 8004d6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d6c:	e008      	b.n	8004d80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d6e:	f7fc f8e3 	bl	8000f38 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e086      	b.n	8004e8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d80:	4b45      	ldr	r3, [pc, #276]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f0      	bne.n	8004d6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d8c:	4b42      	ldr	r3, [pc, #264]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	031b      	lsls	r3, r3, #12
 8004d9a:	493f      	ldr	r1, [pc, #252]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	628b      	str	r3, [r1, #40]	; 0x28
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	025b      	lsls	r3, r3, #9
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	041b      	lsls	r3, r3, #16
 8004dbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	061b      	lsls	r3, r3, #24
 8004dcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004dd0:	4931      	ldr	r1, [pc, #196]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004dd6:	4b30      	ldr	r3, [pc, #192]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	492d      	ldr	r1, [pc, #180]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004de8:	4b2b      	ldr	r3, [pc, #172]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	f023 0220 	bic.w	r2, r3, #32
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	4928      	ldr	r1, [pc, #160]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004dfa:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	4a26      	ldr	r2, [pc, #152]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e00:	f023 0310 	bic.w	r3, r3, #16
 8004e04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e06:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e0a:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <RCCEx_PLL2_Config+0x160>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	69d2      	ldr	r2, [r2, #28]
 8004e12:	00d2      	lsls	r2, r2, #3
 8004e14:	4920      	ldr	r1, [pc, #128]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e1a:	4b1f      	ldr	r3, [pc, #124]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	4a1e      	ldr	r2, [pc, #120]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e20:	f043 0310 	orr.w	r3, r3, #16
 8004e24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e2c:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	4a19      	ldr	r2, [pc, #100]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e38:	e00f      	b.n	8004e5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d106      	bne.n	8004e4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e40:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	4a14      	ldr	r2, [pc, #80]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e4c:	e005      	b.n	8004e5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e4e:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	4a11      	ldr	r2, [pc, #68]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e5a:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a0e      	ldr	r2, [pc, #56]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e66:	f7fc f867 	bl	8000f38 <HAL_GetTick>
 8004e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e6c:	e008      	b.n	8004e80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e6e:	f7fc f863 	bl	8000f38 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e006      	b.n	8004e8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <RCCEx_PLL2_Config+0x15c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	ffff0007 	.word	0xffff0007

08004ea0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004eae:	4b53      	ldr	r3, [pc, #332]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d101      	bne.n	8004ebe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e099      	b.n	8004ff2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ebe:	4b4f      	ldr	r3, [pc, #316]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a4e      	ldr	r2, [pc, #312]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eca:	f7fc f835 	bl	8000f38 <HAL_GetTick>
 8004ece:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ed0:	e008      	b.n	8004ee4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ed2:	f7fc f831 	bl	8000f38 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e086      	b.n	8004ff2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ee4:	4b45      	ldr	r3, [pc, #276]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f0      	bne.n	8004ed2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ef0:	4b42      	ldr	r3, [pc, #264]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	051b      	lsls	r3, r3, #20
 8004efe:	493f      	ldr	r1, [pc, #252]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	628b      	str	r3, [r1, #40]	; 0x28
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	025b      	lsls	r3, r3, #9
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	041b      	lsls	r3, r3, #16
 8004f22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	061b      	lsls	r3, r3, #24
 8004f30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f34:	4931      	ldr	r1, [pc, #196]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f3a:	4b30      	ldr	r3, [pc, #192]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	492d      	ldr	r1, [pc, #180]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f4c:	4b2b      	ldr	r3, [pc, #172]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	4928      	ldr	r1, [pc, #160]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f5e:	4b27      	ldr	r3, [pc, #156]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	4a26      	ldr	r2, [pc, #152]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f6a:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f6e:	4b24      	ldr	r3, [pc, #144]	; (8005000 <RCCEx_PLL3_Config+0x160>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	69d2      	ldr	r2, [r2, #28]
 8004f76:	00d2      	lsls	r2, r2, #3
 8004f78:	4920      	ldr	r1, [pc, #128]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f7e:	4b1f      	ldr	r3, [pc, #124]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	4a1e      	ldr	r2, [pc, #120]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f90:	4b1a      	ldr	r3, [pc, #104]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004f96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f9c:	e00f      	b.n	8004fbe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d106      	bne.n	8004fb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fa4:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	4a14      	ldr	r2, [pc, #80]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004faa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fb0:	e005      	b.n	8004fbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fb2:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	4a11      	ldr	r2, [pc, #68]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004fb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a0e      	ldr	r2, [pc, #56]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fca:	f7fb ffb5 	bl	8000f38 <HAL_GetTick>
 8004fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fd0:	e008      	b.n	8004fe4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fd2:	f7fb ffb1 	bl	8000f38 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e006      	b.n	8004ff2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <RCCEx_PLL3_Config+0x15c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	58024400 	.word	0x58024400
 8005000:	ffff0007 	.word	0xffff0007

08005004 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	; 0x28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e075      	b.n	8005102 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d105      	bne.n	800502e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7fb fd1b 	bl	8000a64 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2204      	movs	r2, #4
 8005032:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f868 	bl	800510c <HAL_SD_InitCard>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e05d      	b.n	8005102 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fdaf 	bl	8005bb0 <HAL_SD_GetCardStatus>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e052      	b.n	8005102 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800505c:	7e3b      	ldrb	r3, [r7, #24]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005062:	7e7b      	ldrb	r3, [r7, #25]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	2b01      	cmp	r3, #1
 800506e:	d10a      	bne.n	8005086 <HAL_SD_Init+0x82>
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <HAL_SD_Init+0x78>
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005082:	659a      	str	r2, [r3, #88]	; 0x58
 8005084:	e00b      	b.n	800509e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	2b01      	cmp	r3, #1
 800508c:	d104      	bne.n	8005098 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005094:	659a      	str	r2, [r3, #88]	; 0x58
 8005096:	e002      	b.n	800509e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fe6d 	bl	8005d84 <HAL_SD_ConfigWideBusOperation>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e026      	b.n	8005102 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80050b4:	f7fb ff40 	bl	8000f38 <HAL_GetTick>
 80050b8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80050ba:	e011      	b.n	80050e0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80050bc:	f7fb ff3c 	bl	8000f38 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	d109      	bne.n	80050e0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050d2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e010      	b.n	8005102 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 ff61 	bl	8005fa8 <HAL_SD_GetCardState>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d1e7      	bne.n	80050bc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3728      	adds	r7, #40	; 0x28
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b08d      	sub	sp, #52	; 0x34
 8005110:	af02      	add	r7, sp, #8
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005124:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005128:	f04f 0100 	mov.w	r1, #0
 800512c:	f7fe fc76 	bl	8003a1c <HAL_RCCEx_GetPeriphCLKFreq>
 8005130:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	d109      	bne.n	800514c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005146:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e070      	b.n	800522e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	4a39      	ldr	r2, [pc, #228]	; (8005238 <HAL_SD_InitCard+0x12c>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681c      	ldr	r4, [r3, #0]
 800515e:	466a      	mov	r2, sp
 8005160:	f107 0318 	add.w	r3, r7, #24
 8005164:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005168:	e882 0003 	stmia.w	r2, {r0, r1}
 800516c:	f107 030c 	add.w	r3, r7, #12
 8005170:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005172:	4620      	mov	r0, r4
 8005174:	f002 fc80 	bl	8007a78 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f002 fcc3 	bl	8007b08 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800519a:	4a28      	ldr	r2, [pc, #160]	; (800523c <HAL_SD_InitCard+0x130>)
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a2:	3301      	adds	r3, #1
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fb fed3 	bl	8000f50 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 ffea 	bl	8006184 <SD_PowerON>
 80051b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00b      	beq.n	80051d0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e02e      	b.n	800522e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 ff09 	bl	8005fe8 <SD_InitCard>
 80051d6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00b      	beq.n	80051f6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e01b      	b.n	800522e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051fe:	4618      	mov	r0, r3
 8005200:	f002 fd18 	bl	8007c34 <SDMMC_CmdBlockLength>
 8005204:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00f      	beq.n	800522c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0b      	ldr	r2, [pc, #44]	; (8005240 <HAL_SD_InitCard+0x134>)
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	372c      	adds	r7, #44	; 0x2c
 8005232:	46bd      	mov	sp, r7
 8005234:	bd90      	pop	{r4, r7, pc}
 8005236:	bf00      	nop
 8005238:	014f8b59 	.word	0x014f8b59
 800523c:	00012110 	.word	0x00012110
 8005240:	1fe00fff 	.word	0x1fe00fff

08005244 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08c      	sub	sp, #48	; 0x30
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d107      	bne.n	800526c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005260:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e08d      	b.n	8005388 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	f040 8086 	bne.w	8005386 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	441a      	add	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528a:	429a      	cmp	r2, r3
 800528c:	d907      	bls.n	800529e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005292:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e074      	b.n	8005388 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2203      	movs	r2, #3
 80052a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2200      	movs	r2, #0
 80052ac:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	025a      	lsls	r2, r3, #9
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d002      	beq.n	80052ca <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	025b      	lsls	r3, r3, #9
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80052ca:	f04f 33ff 	mov.w	r3, #4294967295
 80052ce:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	025b      	lsls	r3, r3, #9
 80052d4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80052d6:	2390      	movs	r3, #144	; 0x90
 80052d8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80052da:	2302      	movs	r3, #2
 80052dc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80052de:	2300      	movs	r3, #0
 80052e0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f107 0210 	add.w	r2, r7, #16
 80052ee:	4611      	mov	r1, r2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f002 fc73 	bl	8007bdc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005304:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2201      	movs	r2, #1
 8005314:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d90a      	bls.n	8005332 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2282      	movs	r2, #130	; 0x82
 8005320:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005328:	4618      	mov	r0, r3
 800532a:	f002 fcc9 	bl	8007cc0 <SDMMC_CmdReadMultiBlock>
 800532e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005330:	e009      	b.n	8005346 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2281      	movs	r2, #129	; 0x81
 8005336:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800533e:	4618      	mov	r0, r3
 8005340:	f002 fc9b 	bl	8007c7a <SDMMC_CmdReadSingleBlock>
 8005344:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d012      	beq.n	8005372 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a0f      	ldr	r2, [pc, #60]	; (8005390 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8005352:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	431a      	orrs	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e00a      	b.n	8005388 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005380:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	e000      	b.n	8005388 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005386:	2302      	movs	r3, #2
  }
}
 8005388:	4618      	mov	r0, r3
 800538a:	3730      	adds	r7, #48	; 0x30
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	1fe00fff 	.word	0x1fe00fff

08005394 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08c      	sub	sp, #48	; 0x30
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d107      	bne.n	80053bc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e08d      	b.n	80054d8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	f040 8086 	bne.w	80054d6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80053d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	441a      	add	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053da:	429a      	cmp	r2, r3
 80053dc:	d907      	bls.n	80053ee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e074      	b.n	80054d8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2203      	movs	r2, #3
 80053f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2200      	movs	r2, #0
 80053fc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	025a      	lsls	r2, r3, #9
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	2b01      	cmp	r3, #1
 8005412:	d002      	beq.n	800541a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	025b      	lsls	r3, r3, #9
 8005418:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800541a:	f04f 33ff 	mov.w	r3, #4294967295
 800541e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	025b      	lsls	r3, r3, #9
 8005424:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005426:	2390      	movs	r3, #144	; 0x90
 8005428:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800542e:	2300      	movs	r3, #0
 8005430:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005432:	2300      	movs	r3, #0
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f107 0210 	add.w	r2, r7, #16
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f002 fbcb 	bl	8007bdc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005454:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2201      	movs	r2, #1
 8005464:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d90a      	bls.n	8005482 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	22a0      	movs	r2, #160	; 0xa0
 8005470:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005478:	4618      	mov	r0, r3
 800547a:	f002 fc67 	bl	8007d4c <SDMMC_CmdWriteMultiBlock>
 800547e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005480:	e009      	b.n	8005496 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2290      	movs	r2, #144	; 0x90
 8005486:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800548e:	4618      	mov	r0, r3
 8005490:	f002 fc39 	bl	8007d06 <SDMMC_CmdWriteSingleBlock>
 8005494:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d012      	beq.n	80054c2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0f      	ldr	r2, [pc, #60]	; (80054e0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80054a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	431a      	orrs	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e00a      	b.n	80054d8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80054d0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e000      	b.n	80054d8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
  }
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3730      	adds	r7, #48	; 0x30
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	1fe00fff 	.word	0x1fe00fff

080054e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d008      	beq.n	8005512 <HAL_SD_IRQHandler+0x2e>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 f926 	bl	800675c <SD_Read_IT>
 8005510:	e19a      	b.n	8005848 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80ac 	beq.w	800567a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800552a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	4b59      	ldr	r3, [pc, #356]	; (800569c <HAL_SD_IRQHandler+0x1b8>)
 8005538:	400b      	ands	r3, r1
 800553a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800554a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800555a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d038      	beq.n	80055d8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <HAL_SD_IRQHandler+0x96>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d011      	beq.n	800559e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f002 fc08 	bl	8007d94 <SDMMC_CmdStopTransfer>
 8005584:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f95b 	bl	8005854 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a3f      	ldr	r2, [pc, #252]	; (80056a0 <HAL_SD_IRQHandler+0x1bc>)
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <HAL_SD_IRQHandler+0xe4>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f003 f8bb 	bl	8008744 <HAL_SD_RxCpltCallback>
 80055ce:	e13b      	b.n	8005848 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f003 f8ad 	bl	8008730 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80055d6:	e137      	b.n	8005848 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8132 	beq.w	8005848 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2200      	movs	r2, #0
 80055ea:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2200      	movs	r2, #0
 80055f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2200      	movs	r2, #0
 80055fa:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d104      	bne.n	8005610 <HAL_SD_IRQHandler+0x12c>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d011      	beq.n	8005634 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f002 fbbd 	bl	8007d94 <SDMMC_CmdStopTransfer>
 800561a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d008      	beq.n	8005634 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f910 	bl	8005854 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <HAL_SD_IRQHandler+0x172>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f003 f86a 	bl	8008730 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d105      	bne.n	8005672 <HAL_SD_IRQHandler+0x18e>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80eb 	beq.w	8005848 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f003 f866 	bl	8008744 <HAL_SD_RxCpltCallback>
}
 8005678:	e0e6      	b.n	8005848 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00d      	beq.n	80056a4 <HAL_SD_IRQHandler+0x1c0>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d008      	beq.n	80056a4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f001 f8a8 	bl	80067e8 <SD_Write_IT>
 8005698:	e0d6      	b.n	8005848 <HAL_SD_IRQHandler+0x364>
 800569a:	bf00      	nop
 800569c:	ffff3ec5 	.word	0xffff3ec5
 80056a0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056aa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 809d 	beq.w	80057ee <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c6:	f043 0202 	orr.w	r2, r3, #2
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e0:	f043 0208 	orr.w	r2, r3, #8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fa:	f043 0220 	orr.w	r2, r3, #32
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005714:	f043 0210 	orr.w	r2, r3, #16
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a4b      	ldr	r2, [pc, #300]	; (8005850 <HAL_SD_IRQHandler+0x36c>)
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005732:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005742:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005762:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f002 fb13 	bl	8007d94 <SDMMC_CmdStopTransfer>
 800576e:	4602      	mov	r2, r0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005788:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005792:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f851 	bl	8005854 <HAL_SD_ErrorCallback>
}
 80057b2:	e049      	b.n	8005848 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d044      	beq.n	8005848 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d040      	beq.n	8005848 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80057d4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2200      	movs	r2, #0
 80057dc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f834 	bl	8005854 <HAL_SD_ErrorCallback>
}
 80057ec:	e02c      	b.n	8005848 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d025      	beq.n	8005848 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005804:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10c      	bne.n	800582e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f001 f84a 	bl	80068b8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8005824:	e010      	b.n	8005848 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 f832 	bl	8006890 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800582c:	e00c      	b.n	8005848 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f001 f833 	bl	80068a4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800583e:	e003      	b.n	8005848 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f001 f81b 	bl	800687c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8005846:	e7ff      	b.n	8005848 <HAL_SD_IRQHandler+0x364>
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	18000f3a 	.word	0x18000f3a

08005854 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005876:	0f9b      	lsrs	r3, r3, #30
 8005878:	b2da      	uxtb	r2, r3
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005882:	0e9b      	lsrs	r3, r3, #26
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	b2da      	uxtb	r2, r3
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005894:	0e1b      	lsrs	r3, r3, #24
 8005896:	b2db      	uxtb	r3, r3
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	b2da      	uxtb	r2, r3
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a6:	0c1b      	lsrs	r3, r3, #16
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b2:	0a1b      	lsrs	r3, r3, #8
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c8:	0d1b      	lsrs	r3, r3, #20
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d4:	0c1b      	lsrs	r3, r3, #16
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e6:	0bdb      	lsrs	r3, r3, #15
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f8:	0b9b      	lsrs	r3, r3, #14
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	b2da      	uxtb	r2, r3
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590a:	0b5b      	lsrs	r3, r3, #13
 800590c:	b2db      	uxtb	r3, r3
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	b2da      	uxtb	r2, r3
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591c:	0b1b      	lsrs	r3, r3, #12
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	b2da      	uxtb	r2, r3
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2200      	movs	r2, #0
 800592e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	2b00      	cmp	r3, #0
 8005936:	d163      	bne.n	8005a00 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593c:	009a      	lsls	r2, r3, #2
 800593e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005942:	4013      	ands	r3, r2
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005948:	0f92      	lsrs	r2, r2, #30
 800594a:	431a      	orrs	r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005954:	0edb      	lsrs	r3, r3, #27
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	b2da      	uxtb	r2, r3
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005966:	0e1b      	lsrs	r3, r3, #24
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	b2da      	uxtb	r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005978:	0d5b      	lsrs	r3, r3, #21
 800597a:	b2db      	uxtb	r3, r3
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	b2da      	uxtb	r2, r3
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800598a:	0c9b      	lsrs	r3, r3, #18
 800598c:	b2db      	uxtb	r3, r3
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	b2da      	uxtb	r2, r3
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800599c:	0bdb      	lsrs	r3, r3, #15
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	7e1b      	ldrb	r3, [r3, #24]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	3302      	adds	r3, #2
 80059c0:	2201      	movs	r2, #1
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059ca:	fb03 f202 	mul.w	r2, r3, r2
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	7a1b      	ldrb	r3, [r3, #8]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	2201      	movs	r2, #1
 80059de:	409a      	lsls	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80059ec:	0a52      	lsrs	r2, r2, #9
 80059ee:	fb03 f202 	mul.w	r2, r3, r2
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fc:	655a      	str	r2, [r3, #84]	; 0x54
 80059fe:	e031      	b.n	8005a64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d11d      	bne.n	8005a44 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a16:	0c1b      	lsrs	r3, r3, #16
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	3301      	adds	r3, #1
 8005a24:	029a      	lsls	r2, r3, #10
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a38:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54
 8005a42:	e00f      	b.n	8005a64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a58      	ldr	r2, [pc, #352]	; (8005bac <HAL_SD_GetCardCSD+0x344>)
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e09d      	b.n	8005ba0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a68:	0b9b      	lsrs	r3, r3, #14
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a7a:	09db      	lsrs	r3, r3, #7
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a9c:	0fdb      	lsrs	r3, r3, #31
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa8:	0f5b      	lsrs	r3, r3, #29
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aba:	0e9b      	lsrs	r3, r3, #26
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005acc:	0d9b      	lsrs	r3, r3, #22
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ade:	0d5b      	lsrs	r3, r3, #21
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005afa:	0c1b      	lsrs	r3, r3, #16
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b0e:	0bdb      	lsrs	r3, r3, #15
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b22:	0b9b      	lsrs	r3, r3, #14
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b36:	0b5b      	lsrs	r3, r3, #13
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b4a:	0b1b      	lsrs	r3, r3, #12
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b5e:	0a9b      	lsrs	r3, r3, #10
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b72:	0a1b      	lsrs	r3, r3, #8
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b86:	085b      	lsrs	r3, r3, #1
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	1fe00fff 	.word	0x1fe00fff

08005bb0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b094      	sub	sp, #80	; 0x50
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d101      	bne.n	8005bd0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e0a7      	b.n	8005d20 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005bd0:	f107 0308 	add.w	r3, r7, #8
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fb62 	bl	80062a0 <SD_SendSDStatus>
 8005bdc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d011      	beq.n	8005c08 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a4f      	ldr	r2, [pc, #316]	; (8005d28 <HAL_SD_GetCardStatus+0x178>)
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005c06:	e070      	b.n	8005cea <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	099b      	lsrs	r3, r3, #6
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	0e1b      	lsrs	r3, r3, #24
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	061a      	lsls	r2, r3, #24
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c4e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	0a1b      	lsrs	r3, r3, #8
 8005c54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005c58:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	0e1b      	lsrs	r3, r3, #24
 8005c5e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	0a1b      	lsrs	r3, r3, #8
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	0d1b      	lsrs	r3, r3, #20
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	0c1b      	lsrs	r3, r3, #16
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	0a9b      	lsrs	r3, r3, #10
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	0a1b      	lsrs	r3, r3, #8
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f003 0303 	and.w	r3, r3, #3
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	0e1b      	lsrs	r3, r3, #24
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 ff9e 	bl	8007c34 <SDMMC_CmdBlockLength>
 8005cf8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00d      	beq.n	8005d1c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a08      	ldr	r2, [pc, #32]	; (8005d28 <HAL_SD_GetCardStatus+0x178>)
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d0c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8005d1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3750      	adds	r7, #80	; 0x50
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	1fe00fff 	.word	0x1fe00fff

08005d2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005d84:	b590      	push	{r4, r7, lr}
 8005d86:	b08d      	sub	sp, #52	; 0x34
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2203      	movs	r2, #3
 8005d98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d02e      	beq.n	8005e02 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005daa:	d106      	bne.n	8005dba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	635a      	str	r2, [r3, #52]	; 0x34
 8005db8:	e029      	b.n	8005e0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dc0:	d10a      	bne.n	8005dd8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fb64 	bl	8006490 <SD_WideBus_Enable>
 8005dc8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8005dd6:	e01a      	b.n	8005e0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fba1 	bl	8006526 <SD_WideBus_Disable>
 8005de4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	635a      	str	r2, [r3, #52]	; 0x34
 8005df2:	e00c      	b.n	8005e0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	635a      	str	r2, [r3, #52]	; 0x34
 8005e00:	e005      	b.n	8005e0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a5f      	ldr	r2, [pc, #380]	; (8005f98 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005e1c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e24:	e096      	b.n	8005f54 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005e26:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005e2a:	f04f 0100 	mov.w	r1, #0
 8005e2e:	f7fd fdf5 	bl	8003a1c <HAL_RCCEx_GetPeriphCLKFreq>
 8005e32:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 8083 	beq.w	8005f42 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4950      	ldr	r1, [pc, #320]	; (8005f9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005e5a:	fba1 1303 	umull	r1, r3, r1, r3
 8005e5e:	0e1b      	lsrs	r3, r3, #24
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d303      	bcc.n	8005e6c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	e05a      	b.n	8005f22 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e74:	d103      	bne.n	8005e7e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	e051      	b.n	8005f22 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e86:	d126      	bne.n	8005ed6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10e      	bne.n	8005eae <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4a43      	ldr	r2, [pc, #268]	; (8005fa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d906      	bls.n	8005ea6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	4a40      	ldr	r2, [pc, #256]	; (8005f9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	0e5b      	lsrs	r3, r3, #25
 8005ea2:	61bb      	str	r3, [r7, #24]
 8005ea4:	e03d      	b.n	8005f22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	e039      	b.n	8005f22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eba:	4a39      	ldr	r2, [pc, #228]	; (8005fa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d906      	bls.n	8005ece <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4a36      	ldr	r2, [pc, #216]	; (8005f9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec8:	0e5b      	lsrs	r3, r3, #25
 8005eca:	61bb      	str	r3, [r7, #24]
 8005ecc:	e029      	b.n	8005f22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	e025      	b.n	8005f22 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10e      	bne.n	8005efc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4a30      	ldr	r2, [pc, #192]	; (8005fa4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d906      	bls.n	8005ef4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4a2c      	ldr	r2, [pc, #176]	; (8005f9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005eea:	fba2 2303 	umull	r2, r3, r2, r3
 8005eee:	0e1b      	lsrs	r3, r3, #24
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	e016      	b.n	8005f22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	e012      	b.n	8005f22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f08:	4a26      	ldr	r2, [pc, #152]	; (8005fa4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d906      	bls.n	8005f1c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4a22      	ldr	r2, [pc, #136]	; (8005f9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8005f12:	fba2 2303 	umull	r2, r3, r2, r3
 8005f16:	0e1b      	lsrs	r3, r3, #24
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	e002      	b.n	8005f22 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681c      	ldr	r4, [r3, #0]
 8005f26:	466a      	mov	r2, sp
 8005f28:	f107 0314 	add.w	r3, r7, #20
 8005f2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f30:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f34:	f107 0308 	add.w	r3, r7, #8
 8005f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f001 fd9c 	bl	8007a78 <SDMMC_Init>
 8005f40:	e008      	b.n	8005f54 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 fe69 	bl	8007c34 <SDMMC_CmdBlockLength>
 8005f62:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00c      	beq.n	8005f84 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a0a      	ldr	r2, [pc, #40]	; (8005f98 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005f70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8005f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	372c      	adds	r7, #44	; 0x2c
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd90      	pop	{r4, r7, pc}
 8005f98:	1fe00fff 	.word	0x1fe00fff
 8005f9c:	55e63b89 	.word	0x55e63b89
 8005fa0:	02faf080 	.word	0x02faf080
 8005fa4:	017d7840 	.word	0x017d7840

08005fa8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005fb4:	f107 030c 	add.w	r3, r7, #12
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa40 	bl	8006440 <SD_SendStatus>
 8005fc0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	0a5b      	lsrs	r3, r3, #9
 8005fd8:	f003 030f 	and.w	r3, r3, #15
 8005fdc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005fde:	693b      	ldr	r3, [r7, #16]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b090      	sub	sp, #64	; 0x40
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8005ff4:	f7fa ffa0 	bl	8000f38 <HAL_GetTick>
 8005ff8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 fd93 	bl	8007b2a <SDMMC_GetPowerState>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800600a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800600e:	e0b5      	b.n	800617c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	2b03      	cmp	r3, #3
 8006016:	d02e      	beq.n	8006076 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f001 ffde 	bl	8007fde <SDMMC_CmdSendCID>
 8006022:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <SD_InitCard+0x46>
    {
      return errorstate;
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	e0a6      	b.n	800617c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2100      	movs	r1, #0
 8006034:	4618      	mov	r0, r3
 8006036:	f001 fdbe 	bl	8007bb6 <SDMMC_GetResponse>
 800603a:	4602      	mov	r2, r0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2104      	movs	r1, #4
 8006046:	4618      	mov	r0, r3
 8006048:	f001 fdb5 	bl	8007bb6 <SDMMC_GetResponse>
 800604c:	4602      	mov	r2, r0
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2108      	movs	r1, #8
 8006058:	4618      	mov	r0, r3
 800605a:	f001 fdac 	bl	8007bb6 <SDMMC_GetResponse>
 800605e:	4602      	mov	r2, r0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	210c      	movs	r1, #12
 800606a:	4618      	mov	r0, r3
 800606c:	f001 fda3 	bl	8007bb6 <SDMMC_GetResponse>
 8006070:	4602      	mov	r2, r0
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	2b03      	cmp	r3, #3
 800607c:	d01d      	beq.n	80060ba <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800607e:	e019      	b.n	80060b4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f107 020a 	add.w	r2, r7, #10
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f001 ffe6 	bl	800805c <SDMMC_CmdSetRelAdd>
 8006090:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <SD_InitCard+0xb4>
      {
        return errorstate;
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	e06f      	b.n	800617c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800609c:	f7fa ff4c 	bl	8000f38 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3287 	movw	r2, #4999	; 0x1387
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d902      	bls.n	80060b4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80060ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80060b2:	e063      	b.n	800617c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80060b4:	897b      	ldrh	r3, [r7, #10]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0e2      	beq.n	8006080 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d036      	beq.n	8006130 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80060c2:	897b      	ldrh	r3, [r7, #10]
 80060c4:	461a      	mov	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f001 ffa0 	bl	800801c <SDMMC_CmdSendCSD>
 80060dc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <SD_InitCard+0x100>
    {
      return errorstate;
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	e049      	b.n	800617c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2100      	movs	r1, #0
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 fd61 	bl	8007bb6 <SDMMC_GetResponse>
 80060f4:	4602      	mov	r2, r0
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2104      	movs	r1, #4
 8006100:	4618      	mov	r0, r3
 8006102:	f001 fd58 	bl	8007bb6 <SDMMC_GetResponse>
 8006106:	4602      	mov	r2, r0
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2108      	movs	r1, #8
 8006112:	4618      	mov	r0, r3
 8006114:	f001 fd4f 	bl	8007bb6 <SDMMC_GetResponse>
 8006118:	4602      	mov	r2, r0
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	210c      	movs	r1, #12
 8006124:	4618      	mov	r0, r3
 8006126:	f001 fd46 	bl	8007bb6 <SDMMC_GetResponse>
 800612a:	4602      	mov	r2, r0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2104      	movs	r1, #4
 8006136:	4618      	mov	r0, r3
 8006138:	f001 fd3d 	bl	8007bb6 <SDMMC_GetResponse>
 800613c:	4603      	mov	r3, r0
 800613e:	0d1a      	lsrs	r2, r3, #20
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006144:	f107 030c 	add.w	r3, r7, #12
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fb8c 	bl	8005868 <HAL_SD_GetCardCSD>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006156:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800615a:	e00f      	b.n	800617c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006164:	041b      	lsls	r3, r3, #16
 8006166:	4619      	mov	r1, r3
 8006168:	4610      	mov	r0, r2
 800616a:	f001 fe4f 	bl	8007e0c <SDMMC_CmdSelDesel>
 800616e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <SD_InitCard+0x192>
  {
    return errorstate;
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	e000      	b.n	800617c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3740      	adds	r7, #64	; 0x40
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	f001 fe58 	bl	8007e52 <SDMMC_CmdGoIdleState>
 80061a2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <SD_PowerON+0x2a>
  {
    return errorstate;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	e072      	b.n	8006294 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 fe6b 	bl	8007e8e <SDMMC_CmdOperCond>
 80061b8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061c0:	d10d      	bne.n	80061de <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 fe40 	bl	8007e52 <SDMMC_CmdGoIdleState>
 80061d2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d004      	beq.n	80061e4 <SD_PowerON+0x60>
    {
      return errorstate;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	e05a      	b.n	8006294 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d137      	bne.n	800625c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2100      	movs	r1, #0
 80061f2:	4618      	mov	r0, r3
 80061f4:	f001 fe6b 	bl	8007ece <SDMMC_CmdAppCommand>
 80061f8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d02d      	beq.n	800625c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006200:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006204:	e046      	b.n	8006294 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f001 fe5e 	bl	8007ece <SDMMC_CmdAppCommand>
 8006212:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <SD_PowerON+0x9a>
    {
      return errorstate;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	e03a      	b.n	8006294 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	491e      	ldr	r1, [pc, #120]	; (800629c <SD_PowerON+0x118>)
 8006224:	4618      	mov	r0, r3
 8006226:	f001 fe75 	bl	8007f14 <SDMMC_CmdAppOperCommand>
 800622a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006232:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006236:	e02d      	b.n	8006294 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f001 fcb9 	bl	8007bb6 <SDMMC_GetResponse>
 8006244:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	0fdb      	lsrs	r3, r3, #31
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <SD_PowerON+0xce>
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <SD_PowerON+0xd0>
 8006252:	2300      	movs	r3, #0
 8006254:	613b      	str	r3, [r7, #16]

    count++;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	3301      	adds	r3, #1
 800625a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006262:	4293      	cmp	r3, r2
 8006264:	d802      	bhi.n	800626c <SD_PowerON+0xe8>
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0cc      	beq.n	8006206 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006272:	4293      	cmp	r3, r2
 8006274:	d902      	bls.n	800627c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006276:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800627a:	e00b      	b.n	8006294 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	c1100000 	.word	0xc1100000

080062a0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08c      	sub	sp, #48	; 0x30
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80062aa:	f7fa fe45 	bl	8000f38 <HAL_GetTick>
 80062ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2100      	movs	r1, #0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f001 fc7b 	bl	8007bb6 <SDMMC_GetResponse>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062ca:	d102      	bne.n	80062d2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80062cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062d0:	e0b0      	b.n	8006434 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2140      	movs	r1, #64	; 0x40
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 fcab 	bl	8007c34 <SDMMC_CmdBlockLength>
 80062de:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	e0a0      	b.n	8006434 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	041b      	lsls	r3, r3, #16
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f001 fde5 	bl	8007ece <SDMMC_CmdAppCommand>
 8006304:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d005      	beq.n	8006318 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	e08d      	b.n	8006434 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006318:	f04f 33ff 	mov.w	r3, #4294967295
 800631c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800631e:	2340      	movs	r3, #64	; 0x40
 8006320:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006322:	2360      	movs	r3, #96	; 0x60
 8006324:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006326:	2302      	movs	r3, #2
 8006328:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800632a:	2300      	movs	r3, #0
 800632c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800632e:	2301      	movs	r3, #1
 8006330:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f107 0208 	add.w	r2, r7, #8
 800633a:	4611      	mov	r1, r2
 800633c:	4618      	mov	r0, r3
 800633e:	f001 fc4d 	bl	8007bdc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f001 fecd 	bl	80080e6 <SDMMC_CmdStatusRegister>
 800634c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d02b      	beq.n	80063ac <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	e069      	b.n	8006434 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d013      	beq.n	8006396 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800636e:	2300      	movs	r3, #0
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006372:	e00d      	b.n	8006390 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4618      	mov	r0, r3
 800637a:	f001 fba7 	bl	8007acc <SDMMC_ReadFIFO>
 800637e:	4602      	mov	r2, r0
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	601a      	str	r2, [r3, #0]
        pData++;
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	3304      	adds	r3, #4
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638c:	3301      	adds	r3, #1
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	2b07      	cmp	r3, #7
 8006394:	d9ee      	bls.n	8006374 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006396:	f7fa fdcf 	bl	8000f38 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a4:	d102      	bne.n	80063ac <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80063a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063aa:	e043      	b.n	8006434 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0d2      	beq.n	8006360 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80063c8:	2308      	movs	r3, #8
 80063ca:	e033      	b.n	8006434 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80063da:	2302      	movs	r3, #2
 80063dc:	e02a      	b.n	8006434 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d017      	beq.n	800641c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80063ec:	2320      	movs	r3, #32
 80063ee:	e021      	b.n	8006434 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f001 fb69 	bl	8007acc <SDMMC_ReadFIFO>
 80063fa:	4602      	mov	r2, r0
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	601a      	str	r2, [r3, #0]
    pData++;
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	3304      	adds	r3, #4
 8006404:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006406:	f7fa fd97 	bl	8000f38 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	d102      	bne.n	800641c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006416:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800641a:	e00b      	b.n	8006434 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e2      	bne.n	80063f0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a03      	ldr	r2, [pc, #12]	; (800643c <SD_SendSDStatus+0x19c>)
 8006430:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3730      	adds	r7, #48	; 0x30
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	18000f3a 	.word	0x18000f3a

08006440 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d102      	bne.n	8006456 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006450:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006454:	e018      	b.n	8006488 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645e:	041b      	lsls	r3, r3, #16
 8006460:	4619      	mov	r1, r3
 8006462:	4610      	mov	r0, r2
 8006464:	f001 fe1c 	bl	80080a0 <SDMMC_CmdSendStatus>
 8006468:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	e009      	b.n	8006488 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f001 fb9b 	bl	8007bb6 <SDMMC_GetResponse>
 8006480:	4602      	mov	r2, r0
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	2300      	movs	r3, #0
 800649e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2100      	movs	r1, #0
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 fb85 	bl	8007bb6 <SDMMC_GetResponse>
 80064ac:	4603      	mov	r3, r0
 80064ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064b6:	d102      	bne.n	80064be <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80064b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064bc:	e02f      	b.n	800651e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80064be:	f107 030c 	add.w	r3, r7, #12
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f879 	bl	80065bc <SD_FindSCR>
 80064ca:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	e023      	b.n	800651e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01c      	beq.n	800651a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e8:	041b      	lsls	r3, r3, #16
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f001 fcee 	bl	8007ece <SDMMC_CmdAppCommand>
 80064f2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	e00f      	b.n	800651e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2102      	movs	r1, #2
 8006504:	4618      	mov	r0, r3
 8006506:	f001 fd25 	bl	8007f54 <SDMMC_CmdBusWidth>
 800650a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	e003      	b.n	800651e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006516:	2300      	movs	r3, #0
 8006518:	e001      	b.n	800651e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800651a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b086      	sub	sp, #24
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	2300      	movs	r3, #0
 8006534:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2100      	movs	r1, #0
 800653c:	4618      	mov	r0, r3
 800653e:	f001 fb3a 	bl	8007bb6 <SDMMC_GetResponse>
 8006542:	4603      	mov	r3, r0
 8006544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006548:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800654c:	d102      	bne.n	8006554 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800654e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006552:	e02f      	b.n	80065b4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006554:	f107 030c 	add.w	r3, r7, #12
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f82e 	bl	80065bc <SD_FindSCR>
 8006560:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	e023      	b.n	80065b4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d01c      	beq.n	80065b0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657e:	041b      	lsls	r3, r3, #16
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f001 fca3 	bl	8007ece <SDMMC_CmdAppCommand>
 8006588:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	e00f      	b.n	80065b4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2100      	movs	r1, #0
 800659a:	4618      	mov	r0, r3
 800659c:	f001 fcda 	bl	8007f54 <SDMMC_CmdBusWidth>
 80065a0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	e003      	b.n	80065b4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80065ac:	2300      	movs	r3, #0
 80065ae:	e001      	b.n	80065b4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80065b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08e      	sub	sp, #56	; 0x38
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80065c6:	f7fa fcb7 	bl	8000f38 <HAL_GetTick>
 80065ca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80065d0:	2300      	movs	r3, #0
 80065d2:	60bb      	str	r3, [r7, #8]
 80065d4:	2300      	movs	r3, #0
 80065d6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2108      	movs	r1, #8
 80065e2:	4618      	mov	r0, r3
 80065e4:	f001 fb26 	bl	8007c34 <SDMMC_CmdBlockLength>
 80065e8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	e0ad      	b.n	8006750 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fc:	041b      	lsls	r3, r3, #16
 80065fe:	4619      	mov	r1, r3
 8006600:	4610      	mov	r0, r2
 8006602:	f001 fc64 	bl	8007ece <SDMMC_CmdAppCommand>
 8006606:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <SD_FindSCR+0x56>
  {
    return errorstate;
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	e09e      	b.n	8006750 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006612:	f04f 33ff 	mov.w	r3, #4294967295
 8006616:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006618:	2308      	movs	r3, #8
 800661a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800661c:	2330      	movs	r3, #48	; 0x30
 800661e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006620:	2302      	movs	r3, #2
 8006622:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006624:	2300      	movs	r3, #0
 8006626:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006628:	2301      	movs	r3, #1
 800662a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f107 0210 	add.w	r2, r7, #16
 8006634:	4611      	mov	r1, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f001 fad0 	bl	8007bdc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4618      	mov	r0, r3
 8006642:	f001 fcaa 	bl	8007f9a <SDMMC_CmdSendSCR>
 8006646:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	2b00      	cmp	r3, #0
 800664c:	d027      	beq.n	800669e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	e07e      	b.n	8006750 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d113      	bne.n	8006688 <SD_FindSCR+0xcc>
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	2b00      	cmp	r3, #0
 8006664:	d110      	bne.n	8006688 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f001 fa2e 	bl	8007acc <SDMMC_ReadFIFO>
 8006670:	4603      	mov	r3, r0
 8006672:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f001 fa27 	bl	8007acc <SDMMC_ReadFIFO>
 800667e:	4603      	mov	r3, r0
 8006680:	60fb      	str	r3, [r7, #12]
      index++;
 8006682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006684:	3301      	adds	r3, #1
 8006686:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006688:	f7fa fc56 	bl	8000f38 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d102      	bne.n	800669e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006698:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800669c:	e058      	b.n	8006750 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066a4:	f240 532a 	movw	r3, #1322	; 0x52a
 80066a8:	4013      	ands	r3, r2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0d1      	beq.n	8006652 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2208      	movs	r2, #8
 80066c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80066c4:	2308      	movs	r3, #8
 80066c6:	e043      	b.n	8006750 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d005      	beq.n	80066e2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2202      	movs	r2, #2
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80066de:	2302      	movs	r3, #2
 80066e0:	e036      	b.n	8006750 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e8:	f003 0320 	and.w	r3, r3, #32
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2220      	movs	r2, #32
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80066f8:	2320      	movs	r3, #32
 80066fa:	e029      	b.n	8006750 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a15      	ldr	r2, [pc, #84]	; (8006758 <SD_FindSCR+0x19c>)
 8006702:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	061a      	lsls	r2, r3, #24
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006710:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	0a1b      	lsrs	r3, r3, #8
 8006716:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800671a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	0e1b      	lsrs	r3, r3, #24
 8006720:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	601a      	str	r2, [r3, #0]
    scr++;
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	3304      	adds	r3, #4
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	061a      	lsls	r2, r3, #24
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006738:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	0a1b      	lsrs	r3, r3, #8
 800673e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006742:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	0e1b      	lsrs	r3, r3, #24
 8006748:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3738      	adds	r7, #56	; 0x38
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	18000f3a 	.word	0x18000f3a

0800675c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676e:	2b1f      	cmp	r3, #31
 8006770:	d936      	bls.n	80067e0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	e027      	b.n	80067c8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4618      	mov	r0, r3
 800677e:	f001 f9a5 	bl	8007acc <SDMMC_ReadFIFO>
 8006782:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	b2da      	uxtb	r2, r3
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	3301      	adds	r3, #1
 8006790:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	0a1b      	lsrs	r3, r3, #8
 8006796:	b2da      	uxtb	r2, r3
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	3301      	adds	r3, #1
 80067a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	3301      	adds	r3, #1
 80067b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	0e1b      	lsrs	r3, r3, #24
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	3301      	adds	r3, #1
 80067c0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	3301      	adds	r3, #1
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2b07      	cmp	r3, #7
 80067cc:	d9d4      	bls.n	8006778 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	f1a3 0220 	sub.w	r2, r3, #32
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80067e0:	bf00      	nop
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	2b1f      	cmp	r3, #31
 80067fc:	d93a      	bls.n	8006874 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	e02b      	b.n	800685c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	60fb      	str	r3, [r7, #12]
      tmp++;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	3301      	adds	r3, #1
 800680e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	021a      	lsls	r2, r3, #8
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3301      	adds	r3, #1
 8006820:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	041a      	lsls	r2, r3, #16
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	3301      	adds	r3, #1
 8006832:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	061a      	lsls	r2, r3, #24
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	3301      	adds	r3, #1
 8006844:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f107 020c 	add.w	r2, r7, #12
 800684e:	4611      	mov	r1, r2
 8006850:	4618      	mov	r0, r3
 8006852:	f001 f948 	bl	8007ae6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	3301      	adds	r3, #1
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2b07      	cmp	r3, #7
 8006860:	d9d0      	bls.n	8006804 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	f1a3 0220 	sub.w	r2, r3, #32
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	621a      	str	r2, [r3, #32]
  }
}
 8006874:	bf00      	nop
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e042      	b.n	8006964 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fa f94d 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2224      	movs	r2, #36	; 0x24
 80068fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0201 	bic.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f82c 	bl	800696c <UART_SetConfig>
 8006914:	4603      	mov	r3, r0
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e022      	b.n	8006964 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fd88 	bl	800743c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800693a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800694a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fe0f 	bl	8007580 <UART_CheckIdleState>
 8006962:	4603      	mov	r3, r0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800696c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006970:	b092      	sub	sp, #72	; 0x48
 8006972:	af00      	add	r7, sp, #0
 8006974:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	431a      	orrs	r2, r3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	431a      	orrs	r2, r3
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	4313      	orrs	r3, r2
 8006992:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4bbe      	ldr	r3, [pc, #760]	; (8006c94 <UART_SetConfig+0x328>)
 800699c:	4013      	ands	r3, r2
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	6812      	ldr	r2, [r2, #0]
 80069a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069a4:	430b      	orrs	r3, r1
 80069a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4ab3      	ldr	r2, [pc, #716]	; (8006c98 <UART_SetConfig+0x32c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d004      	beq.n	80069d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069d4:	4313      	orrs	r3, r2
 80069d6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	4baf      	ldr	r3, [pc, #700]	; (8006c9c <UART_SetConfig+0x330>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	6812      	ldr	r2, [r2, #0]
 80069e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069e8:	430b      	orrs	r3, r1
 80069ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	f023 010f 	bic.w	r1, r3, #15
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4aa6      	ldr	r2, [pc, #664]	; (8006ca0 <UART_SetConfig+0x334>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d177      	bne.n	8006afc <UART_SetConfig+0x190>
 8006a0c:	4ba5      	ldr	r3, [pc, #660]	; (8006ca4 <UART_SetConfig+0x338>)
 8006a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a14:	2b28      	cmp	r3, #40	; 0x28
 8006a16:	d86d      	bhi.n	8006af4 <UART_SetConfig+0x188>
 8006a18:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <UART_SetConfig+0xb4>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006ac5 	.word	0x08006ac5
 8006a24:	08006af5 	.word	0x08006af5
 8006a28:	08006af5 	.word	0x08006af5
 8006a2c:	08006af5 	.word	0x08006af5
 8006a30:	08006af5 	.word	0x08006af5
 8006a34:	08006af5 	.word	0x08006af5
 8006a38:	08006af5 	.word	0x08006af5
 8006a3c:	08006af5 	.word	0x08006af5
 8006a40:	08006acd 	.word	0x08006acd
 8006a44:	08006af5 	.word	0x08006af5
 8006a48:	08006af5 	.word	0x08006af5
 8006a4c:	08006af5 	.word	0x08006af5
 8006a50:	08006af5 	.word	0x08006af5
 8006a54:	08006af5 	.word	0x08006af5
 8006a58:	08006af5 	.word	0x08006af5
 8006a5c:	08006af5 	.word	0x08006af5
 8006a60:	08006ad5 	.word	0x08006ad5
 8006a64:	08006af5 	.word	0x08006af5
 8006a68:	08006af5 	.word	0x08006af5
 8006a6c:	08006af5 	.word	0x08006af5
 8006a70:	08006af5 	.word	0x08006af5
 8006a74:	08006af5 	.word	0x08006af5
 8006a78:	08006af5 	.word	0x08006af5
 8006a7c:	08006af5 	.word	0x08006af5
 8006a80:	08006add 	.word	0x08006add
 8006a84:	08006af5 	.word	0x08006af5
 8006a88:	08006af5 	.word	0x08006af5
 8006a8c:	08006af5 	.word	0x08006af5
 8006a90:	08006af5 	.word	0x08006af5
 8006a94:	08006af5 	.word	0x08006af5
 8006a98:	08006af5 	.word	0x08006af5
 8006a9c:	08006af5 	.word	0x08006af5
 8006aa0:	08006ae5 	.word	0x08006ae5
 8006aa4:	08006af5 	.word	0x08006af5
 8006aa8:	08006af5 	.word	0x08006af5
 8006aac:	08006af5 	.word	0x08006af5
 8006ab0:	08006af5 	.word	0x08006af5
 8006ab4:	08006af5 	.word	0x08006af5
 8006ab8:	08006af5 	.word	0x08006af5
 8006abc:	08006af5 	.word	0x08006af5
 8006ac0:	08006aed 	.word	0x08006aed
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aca:	e222      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006acc:	2304      	movs	r3, #4
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ad2:	e21e      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ada:	e21a      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006adc:	2310      	movs	r3, #16
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ae2:	e216      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006ae4:	2320      	movs	r3, #32
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aea:	e212      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006aec:	2340      	movs	r3, #64	; 0x40
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af2:	e20e      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006af4:	2380      	movs	r3, #128	; 0x80
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afa:	e20a      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a69      	ldr	r2, [pc, #420]	; (8006ca8 <UART_SetConfig+0x33c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d130      	bne.n	8006b68 <UART_SetConfig+0x1fc>
 8006b06:	4b67      	ldr	r3, [pc, #412]	; (8006ca4 <UART_SetConfig+0x338>)
 8006b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	2b05      	cmp	r3, #5
 8006b10:	d826      	bhi.n	8006b60 <UART_SetConfig+0x1f4>
 8006b12:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <UART_SetConfig+0x1ac>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b31 	.word	0x08006b31
 8006b1c:	08006b39 	.word	0x08006b39
 8006b20:	08006b41 	.word	0x08006b41
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006b51 	.word	0x08006b51
 8006b2c:	08006b59 	.word	0x08006b59
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b36:	e1ec      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006b38:	2304      	movs	r3, #4
 8006b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b3e:	e1e8      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006b40:	2308      	movs	r3, #8
 8006b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b46:	e1e4      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b4e:	e1e0      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006b50:	2320      	movs	r3, #32
 8006b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b56:	e1dc      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006b58:	2340      	movs	r3, #64	; 0x40
 8006b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b5e:	e1d8      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006b60:	2380      	movs	r3, #128	; 0x80
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b66:	e1d4      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a4f      	ldr	r2, [pc, #316]	; (8006cac <UART_SetConfig+0x340>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d130      	bne.n	8006bd4 <UART_SetConfig+0x268>
 8006b72:	4b4c      	ldr	r3, [pc, #304]	; (8006ca4 <UART_SetConfig+0x338>)
 8006b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	2b05      	cmp	r3, #5
 8006b7c:	d826      	bhi.n	8006bcc <UART_SetConfig+0x260>
 8006b7e:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <UART_SetConfig+0x218>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006b9d 	.word	0x08006b9d
 8006b88:	08006ba5 	.word	0x08006ba5
 8006b8c:	08006bad 	.word	0x08006bad
 8006b90:	08006bb5 	.word	0x08006bb5
 8006b94:	08006bbd 	.word	0x08006bbd
 8006b98:	08006bc5 	.word	0x08006bc5
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ba2:	e1b6      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006baa:	e1b2      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006bac:	2308      	movs	r3, #8
 8006bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bb2:	e1ae      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006bb4:	2310      	movs	r3, #16
 8006bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bba:	e1aa      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006bbc:	2320      	movs	r3, #32
 8006bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bc2:	e1a6      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006bc4:	2340      	movs	r3, #64	; 0x40
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bca:	e1a2      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006bcc:	2380      	movs	r3, #128	; 0x80
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bd2:	e19e      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a35      	ldr	r2, [pc, #212]	; (8006cb0 <UART_SetConfig+0x344>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d130      	bne.n	8006c40 <UART_SetConfig+0x2d4>
 8006bde:	4b31      	ldr	r3, [pc, #196]	; (8006ca4 <UART_SetConfig+0x338>)
 8006be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	d826      	bhi.n	8006c38 <UART_SetConfig+0x2cc>
 8006bea:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <UART_SetConfig+0x284>)
 8006bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf0:	08006c09 	.word	0x08006c09
 8006bf4:	08006c11 	.word	0x08006c11
 8006bf8:	08006c19 	.word	0x08006c19
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c29 	.word	0x08006c29
 8006c04:	08006c31 	.word	0x08006c31
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0e:	e180      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006c10:	2304      	movs	r3, #4
 8006c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c16:	e17c      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006c18:	2308      	movs	r3, #8
 8006c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1e:	e178      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006c20:	2310      	movs	r3, #16
 8006c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c26:	e174      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006c28:	2320      	movs	r3, #32
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c2e:	e170      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006c30:	2340      	movs	r3, #64	; 0x40
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c36:	e16c      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006c38:	2380      	movs	r3, #128	; 0x80
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c3e:	e168      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <UART_SetConfig+0x348>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d142      	bne.n	8006cd0 <UART_SetConfig+0x364>
 8006c4a:	4b16      	ldr	r3, [pc, #88]	; (8006ca4 <UART_SetConfig+0x338>)
 8006c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	2b05      	cmp	r3, #5
 8006c54:	d838      	bhi.n	8006cc8 <UART_SetConfig+0x35c>
 8006c56:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <UART_SetConfig+0x2f0>)
 8006c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5c:	08006c75 	.word	0x08006c75
 8006c60:	08006c7d 	.word	0x08006c7d
 8006c64:	08006c85 	.word	0x08006c85
 8006c68:	08006c8d 	.word	0x08006c8d
 8006c6c:	08006cb9 	.word	0x08006cb9
 8006c70:	08006cc1 	.word	0x08006cc1
 8006c74:	2300      	movs	r3, #0
 8006c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7a:	e14a      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006c7c:	2304      	movs	r3, #4
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c82:	e146      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006c84:	2308      	movs	r3, #8
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8a:	e142      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006c8c:	2310      	movs	r3, #16
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c92:	e13e      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006c94:	cfff69f3 	.word	0xcfff69f3
 8006c98:	58000c00 	.word	0x58000c00
 8006c9c:	11fff4ff 	.word	0x11fff4ff
 8006ca0:	40011000 	.word	0x40011000
 8006ca4:	58024400 	.word	0x58024400
 8006ca8:	40004400 	.word	0x40004400
 8006cac:	40004800 	.word	0x40004800
 8006cb0:	40004c00 	.word	0x40004c00
 8006cb4:	40005000 	.word	0x40005000
 8006cb8:	2320      	movs	r3, #32
 8006cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cbe:	e128      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006cc0:	2340      	movs	r3, #64	; 0x40
 8006cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cc6:	e124      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006cc8:	2380      	movs	r3, #128	; 0x80
 8006cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cce:	e120      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4acb      	ldr	r2, [pc, #812]	; (8007004 <UART_SetConfig+0x698>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d176      	bne.n	8006dc8 <UART_SetConfig+0x45c>
 8006cda:	4bcb      	ldr	r3, [pc, #812]	; (8007008 <UART_SetConfig+0x69c>)
 8006cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ce2:	2b28      	cmp	r3, #40	; 0x28
 8006ce4:	d86c      	bhi.n	8006dc0 <UART_SetConfig+0x454>
 8006ce6:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <UART_SetConfig+0x380>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006d91 	.word	0x08006d91
 8006cf0:	08006dc1 	.word	0x08006dc1
 8006cf4:	08006dc1 	.word	0x08006dc1
 8006cf8:	08006dc1 	.word	0x08006dc1
 8006cfc:	08006dc1 	.word	0x08006dc1
 8006d00:	08006dc1 	.word	0x08006dc1
 8006d04:	08006dc1 	.word	0x08006dc1
 8006d08:	08006dc1 	.word	0x08006dc1
 8006d0c:	08006d99 	.word	0x08006d99
 8006d10:	08006dc1 	.word	0x08006dc1
 8006d14:	08006dc1 	.word	0x08006dc1
 8006d18:	08006dc1 	.word	0x08006dc1
 8006d1c:	08006dc1 	.word	0x08006dc1
 8006d20:	08006dc1 	.word	0x08006dc1
 8006d24:	08006dc1 	.word	0x08006dc1
 8006d28:	08006dc1 	.word	0x08006dc1
 8006d2c:	08006da1 	.word	0x08006da1
 8006d30:	08006dc1 	.word	0x08006dc1
 8006d34:	08006dc1 	.word	0x08006dc1
 8006d38:	08006dc1 	.word	0x08006dc1
 8006d3c:	08006dc1 	.word	0x08006dc1
 8006d40:	08006dc1 	.word	0x08006dc1
 8006d44:	08006dc1 	.word	0x08006dc1
 8006d48:	08006dc1 	.word	0x08006dc1
 8006d4c:	08006da9 	.word	0x08006da9
 8006d50:	08006dc1 	.word	0x08006dc1
 8006d54:	08006dc1 	.word	0x08006dc1
 8006d58:	08006dc1 	.word	0x08006dc1
 8006d5c:	08006dc1 	.word	0x08006dc1
 8006d60:	08006dc1 	.word	0x08006dc1
 8006d64:	08006dc1 	.word	0x08006dc1
 8006d68:	08006dc1 	.word	0x08006dc1
 8006d6c:	08006db1 	.word	0x08006db1
 8006d70:	08006dc1 	.word	0x08006dc1
 8006d74:	08006dc1 	.word	0x08006dc1
 8006d78:	08006dc1 	.word	0x08006dc1
 8006d7c:	08006dc1 	.word	0x08006dc1
 8006d80:	08006dc1 	.word	0x08006dc1
 8006d84:	08006dc1 	.word	0x08006dc1
 8006d88:	08006dc1 	.word	0x08006dc1
 8006d8c:	08006db9 	.word	0x08006db9
 8006d90:	2301      	movs	r3, #1
 8006d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d96:	e0bc      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d9e:	e0b8      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006da0:	2308      	movs	r3, #8
 8006da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006da6:	e0b4      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006da8:	2310      	movs	r3, #16
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dae:	e0b0      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006db0:	2320      	movs	r3, #32
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db6:	e0ac      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006db8:	2340      	movs	r3, #64	; 0x40
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dbe:	e0a8      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006dc0:	2380      	movs	r3, #128	; 0x80
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc6:	e0a4      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a8f      	ldr	r2, [pc, #572]	; (800700c <UART_SetConfig+0x6a0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d130      	bne.n	8006e34 <UART_SetConfig+0x4c8>
 8006dd2:	4b8d      	ldr	r3, [pc, #564]	; (8007008 <UART_SetConfig+0x69c>)
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	2b05      	cmp	r3, #5
 8006ddc:	d826      	bhi.n	8006e2c <UART_SetConfig+0x4c0>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <UART_SetConfig+0x478>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006dfd 	.word	0x08006dfd
 8006de8:	08006e05 	.word	0x08006e05
 8006dec:	08006e0d 	.word	0x08006e0d
 8006df0:	08006e15 	.word	0x08006e15
 8006df4:	08006e1d 	.word	0x08006e1d
 8006df8:	08006e25 	.word	0x08006e25
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e02:	e086      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006e04:	2304      	movs	r3, #4
 8006e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0a:	e082      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006e0c:	2308      	movs	r3, #8
 8006e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e12:	e07e      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006e14:	2310      	movs	r3, #16
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1a:	e07a      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006e1c:	2320      	movs	r3, #32
 8006e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e22:	e076      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006e24:	2340      	movs	r3, #64	; 0x40
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2a:	e072      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006e2c:	2380      	movs	r3, #128	; 0x80
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e32:	e06e      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a75      	ldr	r2, [pc, #468]	; (8007010 <UART_SetConfig+0x6a4>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d130      	bne.n	8006ea0 <UART_SetConfig+0x534>
 8006e3e:	4b72      	ldr	r3, [pc, #456]	; (8007008 <UART_SetConfig+0x69c>)
 8006e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	2b05      	cmp	r3, #5
 8006e48:	d826      	bhi.n	8006e98 <UART_SetConfig+0x52c>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <UART_SetConfig+0x4e4>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e69 	.word	0x08006e69
 8006e54:	08006e71 	.word	0x08006e71
 8006e58:	08006e79 	.word	0x08006e79
 8006e5c:	08006e81 	.word	0x08006e81
 8006e60:	08006e89 	.word	0x08006e89
 8006e64:	08006e91 	.word	0x08006e91
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6e:	e050      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006e70:	2304      	movs	r3, #4
 8006e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e76:	e04c      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7e:	e048      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e86:	e044      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006e88:	2320      	movs	r3, #32
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8e:	e040      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006e90:	2340      	movs	r3, #64	; 0x40
 8006e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e96:	e03c      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006e98:	2380      	movs	r3, #128	; 0x80
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e9e:	e038      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a5b      	ldr	r2, [pc, #364]	; (8007014 <UART_SetConfig+0x6a8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d130      	bne.n	8006f0c <UART_SetConfig+0x5a0>
 8006eaa:	4b57      	ldr	r3, [pc, #348]	; (8007008 <UART_SetConfig+0x69c>)
 8006eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	2b05      	cmp	r3, #5
 8006eb4:	d826      	bhi.n	8006f04 <UART_SetConfig+0x598>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <UART_SetConfig+0x550>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006ed5 	.word	0x08006ed5
 8006ec0:	08006edd 	.word	0x08006edd
 8006ec4:	08006ee5 	.word	0x08006ee5
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006ef5 	.word	0x08006ef5
 8006ed0:	08006efd 	.word	0x08006efd
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eda:	e01a      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006edc:	2304      	movs	r3, #4
 8006ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee2:	e016      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006ee4:	2308      	movs	r3, #8
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eea:	e012      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006eec:	2310      	movs	r3, #16
 8006eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef2:	e00e      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006ef4:	2320      	movs	r3, #32
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efa:	e00a      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006efc:	2340      	movs	r3, #64	; 0x40
 8006efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f02:	e006      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006f04:	2380      	movs	r3, #128	; 0x80
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f0a:	e002      	b.n	8006f12 <UART_SetConfig+0x5a6>
 8006f0c:	2380      	movs	r3, #128	; 0x80
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a3f      	ldr	r2, [pc, #252]	; (8007014 <UART_SetConfig+0x6a8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	f040 80f8 	bne.w	800710e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f1e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	dc46      	bgt.n	8006fb4 <UART_SetConfig+0x648>
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	f2c0 8082 	blt.w	8007030 <UART_SetConfig+0x6c4>
 8006f2c:	3b02      	subs	r3, #2
 8006f2e:	2b1e      	cmp	r3, #30
 8006f30:	d87e      	bhi.n	8007030 <UART_SetConfig+0x6c4>
 8006f32:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <UART_SetConfig+0x5cc>)
 8006f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f38:	08006fbb 	.word	0x08006fbb
 8006f3c:	08007031 	.word	0x08007031
 8006f40:	08006fc3 	.word	0x08006fc3
 8006f44:	08007031 	.word	0x08007031
 8006f48:	08007031 	.word	0x08007031
 8006f4c:	08007031 	.word	0x08007031
 8006f50:	08006fd3 	.word	0x08006fd3
 8006f54:	08007031 	.word	0x08007031
 8006f58:	08007031 	.word	0x08007031
 8006f5c:	08007031 	.word	0x08007031
 8006f60:	08007031 	.word	0x08007031
 8006f64:	08007031 	.word	0x08007031
 8006f68:	08007031 	.word	0x08007031
 8006f6c:	08007031 	.word	0x08007031
 8006f70:	08006fe3 	.word	0x08006fe3
 8006f74:	08007031 	.word	0x08007031
 8006f78:	08007031 	.word	0x08007031
 8006f7c:	08007031 	.word	0x08007031
 8006f80:	08007031 	.word	0x08007031
 8006f84:	08007031 	.word	0x08007031
 8006f88:	08007031 	.word	0x08007031
 8006f8c:	08007031 	.word	0x08007031
 8006f90:	08007031 	.word	0x08007031
 8006f94:	08007031 	.word	0x08007031
 8006f98:	08007031 	.word	0x08007031
 8006f9c:	08007031 	.word	0x08007031
 8006fa0:	08007031 	.word	0x08007031
 8006fa4:	08007031 	.word	0x08007031
 8006fa8:	08007031 	.word	0x08007031
 8006fac:	08007031 	.word	0x08007031
 8006fb0:	08007023 	.word	0x08007023
 8006fb4:	2b40      	cmp	r3, #64	; 0x40
 8006fb6:	d037      	beq.n	8007028 <UART_SetConfig+0x6bc>
 8006fb8:	e03a      	b.n	8007030 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006fba:	f7fd faaf 	bl	800451c <HAL_RCCEx_GetD3PCLK1Freq>
 8006fbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fc0:	e03c      	b.n	800703c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fd fabe 	bl	8004548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fd0:	e034      	b.n	800703c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fd2:	f107 0318 	add.w	r3, r7, #24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fd fc0a 	bl	80047f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fe0:	e02c      	b.n	800703c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fe2:	4b09      	ldr	r3, [pc, #36]	; (8007008 <UART_SetConfig+0x69c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d016      	beq.n	800701c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fee:	4b06      	ldr	r3, [pc, #24]	; (8007008 <UART_SetConfig+0x69c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	08db      	lsrs	r3, r3, #3
 8006ff4:	f003 0303 	and.w	r3, r3, #3
 8006ff8:	4a07      	ldr	r2, [pc, #28]	; (8007018 <UART_SetConfig+0x6ac>)
 8006ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007000:	e01c      	b.n	800703c <UART_SetConfig+0x6d0>
 8007002:	bf00      	nop
 8007004:	40011400 	.word	0x40011400
 8007008:	58024400 	.word	0x58024400
 800700c:	40007800 	.word	0x40007800
 8007010:	40007c00 	.word	0x40007c00
 8007014:	58000c00 	.word	0x58000c00
 8007018:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800701c:	4b9d      	ldr	r3, [pc, #628]	; (8007294 <UART_SetConfig+0x928>)
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007020:	e00c      	b.n	800703c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007022:	4b9d      	ldr	r3, [pc, #628]	; (8007298 <UART_SetConfig+0x92c>)
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007026:	e009      	b.n	800703c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007028:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800702c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800702e:	e005      	b.n	800703c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800703a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800703c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 81de 	beq.w	8007400 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	4a94      	ldr	r2, [pc, #592]	; (800729c <UART_SetConfig+0x930>)
 800704a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800704e:	461a      	mov	r2, r3
 8007050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007052:	fbb3 f3f2 	udiv	r3, r3, r2
 8007056:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	4613      	mov	r3, r2
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	4413      	add	r3, r2
 8007062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007064:	429a      	cmp	r2, r3
 8007066:	d305      	bcc.n	8007074 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800706e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007070:	429a      	cmp	r2, r3
 8007072:	d903      	bls.n	800707c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800707a:	e1c1      	b.n	8007400 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800707c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800707e:	2200      	movs	r2, #0
 8007080:	60bb      	str	r3, [r7, #8]
 8007082:	60fa      	str	r2, [r7, #12]
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	4a84      	ldr	r2, [pc, #528]	; (800729c <UART_SetConfig+0x930>)
 800708a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800708e:	b29b      	uxth	r3, r3
 8007090:	2200      	movs	r2, #0
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	607a      	str	r2, [r7, #4]
 8007096:	e9d7 2300 	ldrd	r2, r3, [r7]
 800709a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800709e:	f7f9 f91b 	bl	80002d8 <__aeabi_uldivmod>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4610      	mov	r0, r2
 80070a8:	4619      	mov	r1, r3
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	020b      	lsls	r3, r1, #8
 80070b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070b8:	0202      	lsls	r2, r0, #8
 80070ba:	6979      	ldr	r1, [r7, #20]
 80070bc:	6849      	ldr	r1, [r1, #4]
 80070be:	0849      	lsrs	r1, r1, #1
 80070c0:	2000      	movs	r0, #0
 80070c2:	460c      	mov	r4, r1
 80070c4:	4605      	mov	r5, r0
 80070c6:	eb12 0804 	adds.w	r8, r2, r4
 80070ca:	eb43 0905 	adc.w	r9, r3, r5
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	469a      	mov	sl, r3
 80070d6:	4693      	mov	fp, r2
 80070d8:	4652      	mov	r2, sl
 80070da:	465b      	mov	r3, fp
 80070dc:	4640      	mov	r0, r8
 80070de:	4649      	mov	r1, r9
 80070e0:	f7f9 f8fa 	bl	80002d8 <__aeabi_uldivmod>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4613      	mov	r3, r2
 80070ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070f2:	d308      	bcc.n	8007106 <UART_SetConfig+0x79a>
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070fa:	d204      	bcs.n	8007106 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007102:	60da      	str	r2, [r3, #12]
 8007104:	e17c      	b.n	8007400 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800710c:	e178      	b.n	8007400 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007116:	f040 80c5 	bne.w	80072a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800711a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800711e:	2b20      	cmp	r3, #32
 8007120:	dc48      	bgt.n	80071b4 <UART_SetConfig+0x848>
 8007122:	2b00      	cmp	r3, #0
 8007124:	db7b      	blt.n	800721e <UART_SetConfig+0x8b2>
 8007126:	2b20      	cmp	r3, #32
 8007128:	d879      	bhi.n	800721e <UART_SetConfig+0x8b2>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <UART_SetConfig+0x7c4>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	080071bb 	.word	0x080071bb
 8007134:	080071c3 	.word	0x080071c3
 8007138:	0800721f 	.word	0x0800721f
 800713c:	0800721f 	.word	0x0800721f
 8007140:	080071cb 	.word	0x080071cb
 8007144:	0800721f 	.word	0x0800721f
 8007148:	0800721f 	.word	0x0800721f
 800714c:	0800721f 	.word	0x0800721f
 8007150:	080071db 	.word	0x080071db
 8007154:	0800721f 	.word	0x0800721f
 8007158:	0800721f 	.word	0x0800721f
 800715c:	0800721f 	.word	0x0800721f
 8007160:	0800721f 	.word	0x0800721f
 8007164:	0800721f 	.word	0x0800721f
 8007168:	0800721f 	.word	0x0800721f
 800716c:	0800721f 	.word	0x0800721f
 8007170:	080071eb 	.word	0x080071eb
 8007174:	0800721f 	.word	0x0800721f
 8007178:	0800721f 	.word	0x0800721f
 800717c:	0800721f 	.word	0x0800721f
 8007180:	0800721f 	.word	0x0800721f
 8007184:	0800721f 	.word	0x0800721f
 8007188:	0800721f 	.word	0x0800721f
 800718c:	0800721f 	.word	0x0800721f
 8007190:	0800721f 	.word	0x0800721f
 8007194:	0800721f 	.word	0x0800721f
 8007198:	0800721f 	.word	0x0800721f
 800719c:	0800721f 	.word	0x0800721f
 80071a0:	0800721f 	.word	0x0800721f
 80071a4:	0800721f 	.word	0x0800721f
 80071a8:	0800721f 	.word	0x0800721f
 80071ac:	0800721f 	.word	0x0800721f
 80071b0:	08007211 	.word	0x08007211
 80071b4:	2b40      	cmp	r3, #64	; 0x40
 80071b6:	d02e      	beq.n	8007216 <UART_SetConfig+0x8aa>
 80071b8:	e031      	b.n	800721e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ba:	f7fb f9f9 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 80071be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071c0:	e033      	b.n	800722a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071c2:	f7fb fa0b 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 80071c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071c8:	e02f      	b.n	800722a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fd f9ba 	bl	8004548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071d8:	e027      	b.n	800722a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071da:	f107 0318 	add.w	r3, r7, #24
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fd fb06 	bl	80047f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e8:	e01f      	b.n	800722a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071ea:	4b2d      	ldr	r3, [pc, #180]	; (80072a0 <UART_SetConfig+0x934>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071f6:	4b2a      	ldr	r3, [pc, #168]	; (80072a0 <UART_SetConfig+0x934>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	08db      	lsrs	r3, r3, #3
 80071fc:	f003 0303 	and.w	r3, r3, #3
 8007200:	4a24      	ldr	r2, [pc, #144]	; (8007294 <UART_SetConfig+0x928>)
 8007202:	fa22 f303 	lsr.w	r3, r2, r3
 8007206:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007208:	e00f      	b.n	800722a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800720a:	4b22      	ldr	r3, [pc, #136]	; (8007294 <UART_SetConfig+0x928>)
 800720c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800720e:	e00c      	b.n	800722a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007210:	4b21      	ldr	r3, [pc, #132]	; (8007298 <UART_SetConfig+0x92c>)
 8007212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007214:	e009      	b.n	800722a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800721a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800721c:	e005      	b.n	800722a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007228:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800722a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 80e7 	beq.w	8007400 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	4a19      	ldr	r2, [pc, #100]	; (800729c <UART_SetConfig+0x930>)
 8007238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800723c:	461a      	mov	r2, r3
 800723e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007240:	fbb3 f3f2 	udiv	r3, r3, r2
 8007244:	005a      	lsls	r2, r3, #1
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	441a      	add	r2, r3
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	fbb2 f3f3 	udiv	r3, r2, r3
 8007256:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725a:	2b0f      	cmp	r3, #15
 800725c:	d916      	bls.n	800728c <UART_SetConfig+0x920>
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007264:	d212      	bcs.n	800728c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	b29b      	uxth	r3, r3
 800726a:	f023 030f 	bic.w	r3, r3, #15
 800726e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	b29b      	uxth	r3, r3
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	b29a      	uxth	r2, r3
 800727c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800727e:	4313      	orrs	r3, r2
 8007280:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	e0b9      	b.n	8007400 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007292:	e0b5      	b.n	8007400 <UART_SetConfig+0xa94>
 8007294:	03d09000 	.word	0x03d09000
 8007298:	003d0900 	.word	0x003d0900
 800729c:	0800ba84 	.word	0x0800ba84
 80072a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80072a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072a8:	2b20      	cmp	r3, #32
 80072aa:	dc49      	bgt.n	8007340 <UART_SetConfig+0x9d4>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	db7c      	blt.n	80073aa <UART_SetConfig+0xa3e>
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d87a      	bhi.n	80073aa <UART_SetConfig+0xa3e>
 80072b4:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <UART_SetConfig+0x950>)
 80072b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ba:	bf00      	nop
 80072bc:	08007347 	.word	0x08007347
 80072c0:	0800734f 	.word	0x0800734f
 80072c4:	080073ab 	.word	0x080073ab
 80072c8:	080073ab 	.word	0x080073ab
 80072cc:	08007357 	.word	0x08007357
 80072d0:	080073ab 	.word	0x080073ab
 80072d4:	080073ab 	.word	0x080073ab
 80072d8:	080073ab 	.word	0x080073ab
 80072dc:	08007367 	.word	0x08007367
 80072e0:	080073ab 	.word	0x080073ab
 80072e4:	080073ab 	.word	0x080073ab
 80072e8:	080073ab 	.word	0x080073ab
 80072ec:	080073ab 	.word	0x080073ab
 80072f0:	080073ab 	.word	0x080073ab
 80072f4:	080073ab 	.word	0x080073ab
 80072f8:	080073ab 	.word	0x080073ab
 80072fc:	08007377 	.word	0x08007377
 8007300:	080073ab 	.word	0x080073ab
 8007304:	080073ab 	.word	0x080073ab
 8007308:	080073ab 	.word	0x080073ab
 800730c:	080073ab 	.word	0x080073ab
 8007310:	080073ab 	.word	0x080073ab
 8007314:	080073ab 	.word	0x080073ab
 8007318:	080073ab 	.word	0x080073ab
 800731c:	080073ab 	.word	0x080073ab
 8007320:	080073ab 	.word	0x080073ab
 8007324:	080073ab 	.word	0x080073ab
 8007328:	080073ab 	.word	0x080073ab
 800732c:	080073ab 	.word	0x080073ab
 8007330:	080073ab 	.word	0x080073ab
 8007334:	080073ab 	.word	0x080073ab
 8007338:	080073ab 	.word	0x080073ab
 800733c:	0800739d 	.word	0x0800739d
 8007340:	2b40      	cmp	r3, #64	; 0x40
 8007342:	d02e      	beq.n	80073a2 <UART_SetConfig+0xa36>
 8007344:	e031      	b.n	80073aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007346:	f7fb f933 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 800734a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800734c:	e033      	b.n	80073b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800734e:	f7fb f945 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8007352:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007354:	e02f      	b.n	80073b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800735a:	4618      	mov	r0, r3
 800735c:	f7fd f8f4 	bl	8004548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007364:	e027      	b.n	80073b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007366:	f107 0318 	add.w	r3, r7, #24
 800736a:	4618      	mov	r0, r3
 800736c:	f7fd fa40 	bl	80047f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007374:	e01f      	b.n	80073b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007376:	4b2d      	ldr	r3, [pc, #180]	; (800742c <UART_SetConfig+0xac0>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007382:	4b2a      	ldr	r3, [pc, #168]	; (800742c <UART_SetConfig+0xac0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	08db      	lsrs	r3, r3, #3
 8007388:	f003 0303 	and.w	r3, r3, #3
 800738c:	4a28      	ldr	r2, [pc, #160]	; (8007430 <UART_SetConfig+0xac4>)
 800738e:	fa22 f303 	lsr.w	r3, r2, r3
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007394:	e00f      	b.n	80073b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007396:	4b26      	ldr	r3, [pc, #152]	; (8007430 <UART_SetConfig+0xac4>)
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800739a:	e00c      	b.n	80073b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800739c:	4b25      	ldr	r3, [pc, #148]	; (8007434 <UART_SetConfig+0xac8>)
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a0:	e009      	b.n	80073b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a8:	e005      	b.n	80073b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073b4:	bf00      	nop
    }

    if (pclk != 0U)
 80073b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d021      	beq.n	8007400 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	4a1d      	ldr	r2, [pc, #116]	; (8007438 <UART_SetConfig+0xacc>)
 80073c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073c6:	461a      	mov	r2, r3
 80073c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	085b      	lsrs	r3, r3, #1
 80073d4:	441a      	add	r2, r3
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	fbb2 f3f3 	udiv	r3, r2, r3
 80073de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e2:	2b0f      	cmp	r3, #15
 80073e4:	d909      	bls.n	80073fa <UART_SetConfig+0xa8e>
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ec:	d205      	bcs.n	80073fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60da      	str	r2, [r3, #12]
 80073f8:	e002      	b.n	8007400 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2201      	movs	r2, #1
 8007404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	2201      	movs	r2, #1
 800740c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2200      	movs	r2, #0
 8007414:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2200      	movs	r2, #0
 800741a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800741c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007420:	4618      	mov	r0, r3
 8007422:	3748      	adds	r7, #72	; 0x48
 8007424:	46bd      	mov	sp, r7
 8007426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800742a:	bf00      	nop
 800742c:	58024400 	.word	0x58024400
 8007430:	03d09000 	.word	0x03d09000
 8007434:	003d0900 	.word	0x003d0900
 8007438:	0800ba84 	.word	0x0800ba84

0800743c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ae:	f003 0308 	and.w	r3, r3, #8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01a      	beq.n	8007552 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800753a:	d10a      	bne.n	8007552 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	605a      	str	r2, [r3, #4]
  }
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b098      	sub	sp, #96	; 0x60
 8007584:	af02      	add	r7, sp, #8
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007590:	f7f9 fcd2 	bl	8000f38 <HAL_GetTick>
 8007594:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d12f      	bne.n	8007604 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ac:	2200      	movs	r2, #0
 80075ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f88e 	bl	80076d4 <UART_WaitOnFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d022      	beq.n	8007604 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075d2:	653b      	str	r3, [r7, #80]	; 0x50
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	461a      	mov	r2, r3
 80075da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075dc:	647b      	str	r3, [r7, #68]	; 0x44
 80075de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e6      	bne.n	80075be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e063      	b.n	80076cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0304 	and.w	r3, r3, #4
 800760e:	2b04      	cmp	r3, #4
 8007610:	d149      	bne.n	80076a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007612:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800761a:	2200      	movs	r2, #0
 800761c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f857 	bl	80076d4 <UART_WaitOnFlagUntilTimeout>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d03c      	beq.n	80076a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	623b      	str	r3, [r7, #32]
   return(result);
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007640:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764a:	633b      	str	r3, [r7, #48]	; 0x30
 800764c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e6      	bne.n	800762c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3308      	adds	r3, #8
 8007664:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	60fb      	str	r3, [r7, #12]
   return(result);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f023 0301 	bic.w	r3, r3, #1
 8007674:	64bb      	str	r3, [r7, #72]	; 0x48
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3308      	adds	r3, #8
 800767c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800767e:	61fa      	str	r2, [r7, #28]
 8007680:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	69b9      	ldr	r1, [r7, #24]
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	617b      	str	r3, [r7, #20]
   return(result);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e5      	bne.n	800765e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e012      	b.n	80076cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2220      	movs	r2, #32
 80076aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2220      	movs	r2, #32
 80076b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3758      	adds	r7, #88	; 0x58
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	603b      	str	r3, [r7, #0]
 80076e0:	4613      	mov	r3, r2
 80076e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e4:	e049      	b.n	800777a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ec:	d045      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ee:	f7f9 fc23 	bl	8000f38 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d302      	bcc.n	8007704 <UART_WaitOnFlagUntilTimeout+0x30>
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e048      	b.n	800779a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0304 	and.w	r3, r3, #4
 8007712:	2b00      	cmp	r3, #0
 8007714:	d031      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b08      	cmp	r3, #8
 8007722:	d110      	bne.n	8007746 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2208      	movs	r2, #8
 800772a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 f839 	bl	80077a4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2208      	movs	r2, #8
 8007736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e029      	b.n	800779a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007754:	d111      	bne.n	800777a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800775e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 f81f 	bl	80077a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2220      	movs	r2, #32
 800776a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e00f      	b.n	800779a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4013      	ands	r3, r2
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	429a      	cmp	r2, r3
 8007788:	bf0c      	ite	eq
 800778a:	2301      	moveq	r3, #1
 800778c:	2300      	movne	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	79fb      	ldrb	r3, [r7, #7]
 8007794:	429a      	cmp	r2, r3
 8007796:	d0a6      	beq.n	80076e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b095      	sub	sp, #84	; 0x54
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ca:	643b      	str	r3, [r7, #64]	; 0x40
 80077cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e6      	bne.n	80077ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3308      	adds	r3, #8
 80077e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	4b1e      	ldr	r3, [pc, #120]	; (800786c <UART_EndRxTransfer+0xc8>)
 80077f2:	4013      	ands	r3, r2
 80077f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3308      	adds	r3, #8
 80077fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e5      	bne.n	80077de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007816:	2b01      	cmp	r3, #1
 8007818:	d118      	bne.n	800784c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	60bb      	str	r3, [r7, #8]
   return(result);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f023 0310 	bic.w	r3, r3, #16
 800782e:	647b      	str	r3, [r7, #68]	; 0x44
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007838:	61bb      	str	r3, [r7, #24]
 800783a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	6979      	ldr	r1, [r7, #20]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	613b      	str	r3, [r7, #16]
   return(result);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e6      	bne.n	800781a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2220      	movs	r2, #32
 8007850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007860:	bf00      	nop
 8007862:	3754      	adds	r7, #84	; 0x54
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	effffffe 	.word	0xeffffffe

08007870 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <HAL_UARTEx_DisableFifoMode+0x16>
 8007882:	2302      	movs	r3, #2
 8007884:	e027      	b.n	80078d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2224      	movs	r2, #36	; 0x24
 8007892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0201 	bic.w	r2, r2, #1
 80078ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80078b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d101      	bne.n	80078fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078f6:	2302      	movs	r3, #2
 80078f8:	e02d      	b.n	8007956 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2224      	movs	r2, #36	; 0x24
 8007906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0201 	bic.w	r2, r2, #1
 8007920:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f850 	bl	80079dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2220      	movs	r2, #32
 8007948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800796e:	2b01      	cmp	r3, #1
 8007970:	d101      	bne.n	8007976 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007972:	2302      	movs	r3, #2
 8007974:	e02d      	b.n	80079d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2224      	movs	r2, #36	; 0x24
 8007982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0201 	bic.w	r2, r2, #1
 800799c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f812 	bl	80079dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d108      	bne.n	80079fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079fc:	e031      	b.n	8007a62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079fe:	2310      	movs	r3, #16
 8007a00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a02:	2310      	movs	r3, #16
 8007a04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	0e5b      	lsrs	r3, r3, #25
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	f003 0307 	and.w	r3, r3, #7
 8007a14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	0f5b      	lsrs	r3, r3, #29
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	7b3a      	ldrb	r2, [r7, #12]
 8007a2a:	4911      	ldr	r1, [pc, #68]	; (8007a70 <UARTEx_SetNbDataToProcess+0x94>)
 8007a2c:	5c8a      	ldrb	r2, [r1, r2]
 8007a2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a32:	7b3a      	ldrb	r2, [r7, #12]
 8007a34:	490f      	ldr	r1, [pc, #60]	; (8007a74 <UARTEx_SetNbDataToProcess+0x98>)
 8007a36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a38:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	7b7a      	ldrb	r2, [r7, #13]
 8007a48:	4909      	ldr	r1, [pc, #36]	; (8007a70 <UARTEx_SetNbDataToProcess+0x94>)
 8007a4a:	5c8a      	ldrb	r2, [r1, r2]
 8007a4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a50:	7b7a      	ldrb	r2, [r7, #13]
 8007a52:	4908      	ldr	r1, [pc, #32]	; (8007a74 <UARTEx_SetNbDataToProcess+0x98>)
 8007a54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a56:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a62:	bf00      	nop
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	0800ba9c 	.word	0x0800ba9c
 8007a74:	0800baa4 	.word	0x0800baa4

08007a78 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007a78:	b084      	sub	sp, #16
 8007a7a:	b480      	push	{r7}
 8007a7c:	b085      	sub	sp, #20
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	f107 001c 	add.w	r0, r7, #28
 8007a86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8007a8e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8007a90:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8007a92:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8007a96:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8007a9a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8007a9e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	4b07      	ldr	r3, [pc, #28]	; (8007ac8 <SDMMC_Init+0x50>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	b004      	add	sp, #16
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	ffc02c00 	.word	0xffc02c00

08007acc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f043 0203 	orr.w	r2, r3, #3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0303 	and.w	r3, r3, #3
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
	...

08007b48 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007b66:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8007b6c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8007b72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <SDMMC_SendCommand+0x50>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	431a      	orrs	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	fffee0c0 	.word	0xfffee0c0

08007b9c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	b2db      	uxtb	r3, r3
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3314      	adds	r3, #20
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	4413      	add	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007c02:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8007c08:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8007c0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0

}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007c42:	2310      	movs	r3, #16
 8007c44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c56:	f107 0308 	add.w	r3, r7, #8
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff ff73 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c66:	2110      	movs	r1, #16
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fa5f 	bl	800812c <SDMMC_GetCmdResp1>
 8007c6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c70:	69fb      	ldr	r3, [r7, #28]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3720      	adds	r7, #32
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b088      	sub	sp, #32
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007c88:	2311      	movs	r3, #17
 8007c8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c92:	2300      	movs	r3, #0
 8007c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c9c:	f107 0308 	add.w	r3, r7, #8
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff ff50 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cac:	2111      	movs	r1, #17
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa3c 	bl	800812c <SDMMC_GetCmdResp1>
 8007cb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3720      	adds	r7, #32
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b088      	sub	sp, #32
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007cce:	2312      	movs	r3, #18
 8007cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ce0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ce2:	f107 0308 	add.w	r3, r7, #8
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff ff2d 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cf2:	2112      	movs	r1, #18
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fa19 	bl	800812c <SDMMC_GetCmdResp1>
 8007cfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3720      	adds	r7, #32
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b088      	sub	sp, #32
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007d14:	2318      	movs	r3, #24
 8007d16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d28:	f107 0308 	add.w	r3, r7, #8
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7ff ff0a 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d38:	2118      	movs	r1, #24
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f9f6 	bl	800812c <SDMMC_GetCmdResp1>
 8007d40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d42:	69fb      	ldr	r3, [r7, #28]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3720      	adds	r7, #32
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007d5a:	2319      	movs	r3, #25
 8007d5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d64:	2300      	movs	r3, #0
 8007d66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d6e:	f107 0308 	add.w	r3, r7, #8
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7ff fee7 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d7e:	2119      	movs	r1, #25
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f9d3 	bl	800812c <SDMMC_GetCmdResp1>
 8007d86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d88:	69fb      	ldr	r3, [r7, #28]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3720      	adds	r7, #32
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007da0:	230c      	movs	r3, #12
 8007da2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007da8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007daa:	2300      	movs	r3, #0
 8007dac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007db2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007dcc:	f107 0308 	add.w	r3, r7, #8
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7ff feb8 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007dd8:	4a0b      	ldr	r2, [pc, #44]	; (8007e08 <SDMMC_CmdStopTransfer+0x74>)
 8007dda:	210c      	movs	r1, #12
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f9a5 	bl	800812c <SDMMC_GetCmdResp1>
 8007de2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007df6:	d101      	bne.n	8007dfc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3720      	adds	r7, #32
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	05f5e100 	.word	0x05f5e100

08007e0c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007e1a:	2307      	movs	r3, #7
 8007e1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e24:	2300      	movs	r3, #0
 8007e26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e2e:	f107 0308 	add.w	r3, r7, #8
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff fe87 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e3e:	2107      	movs	r1, #7
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f973 	bl	800812c <SDMMC_GetCmdResp1>
 8007e46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e48:	69fb      	ldr	r3, [r7, #28]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3720      	adds	r7, #32
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b088      	sub	sp, #32
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007e62:	2300      	movs	r3, #0
 8007e64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e66:	2300      	movs	r3, #0
 8007e68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e70:	f107 0308 	add.w	r3, r7, #8
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7ff fe66 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fb97 	bl	80085b0 <SDMMC_GetCmdError>
 8007e82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e84:	69fb      	ldr	r3, [r7, #28]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3720      	adds	r7, #32
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b088      	sub	sp, #32
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007e96:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007e9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007e9c:	2308      	movs	r3, #8
 8007e9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007eae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007eb0:	f107 0308 	add.w	r3, r7, #8
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7ff fe46 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fb29 	bl	8008514 <SDMMC_GetCmdResp7>
 8007ec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3720      	adds	r7, #32
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b088      	sub	sp, #32
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007edc:	2337      	movs	r3, #55	; 0x37
 8007ede:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007eee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ef0:	f107 0308 	add.w	r3, r7, #8
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7ff fe26 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f00:	2137      	movs	r1, #55	; 0x37
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f912 	bl	800812c <SDMMC_GetCmdResp1>
 8007f08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f0a:	69fb      	ldr	r3, [r7, #28]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3720      	adds	r7, #32
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007f22:	2329      	movs	r3, #41	; 0x29
 8007f24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f36:	f107 0308 	add.w	r3, r7, #8
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff fe03 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa2e 	bl	80083a4 <SDMMC_GetCmdResp3>
 8007f48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f4a:	69fb      	ldr	r3, [r7, #28]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3720      	adds	r7, #32
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007f62:	2306      	movs	r3, #6
 8007f64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f76:	f107 0308 	add.w	r3, r7, #8
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff fde3 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f86:	2106      	movs	r1, #6
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f8cf 	bl	800812c <SDMMC_GetCmdResp1>
 8007f8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f90:	69fb      	ldr	r3, [r7, #28]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3720      	adds	r7, #32
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b088      	sub	sp, #32
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007fa6:	2333      	movs	r3, #51	; 0x33
 8007fa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fba:	f107 0308 	add.w	r3, r7, #8
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff fdc1 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fca:	2133      	movs	r1, #51	; 0x33
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f8ad 	bl	800812c <SDMMC_GetCmdResp1>
 8007fd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3720      	adds	r7, #32
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b088      	sub	sp, #32
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007fea:	2302      	movs	r3, #2
 8007fec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007fee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007ff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ffc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ffe:	f107 0308 	add.w	r3, r7, #8
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff fd9f 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f980 	bl	8008310 <SDMMC_GetCmdResp2>
 8008010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008012:	69fb      	ldr	r3, [r7, #28]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3720      	adds	r7, #32
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800802a:	2309      	movs	r3, #9
 800802c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800802e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008034:	2300      	movs	r3, #0
 8008036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800803c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800803e:	f107 0308 	add.w	r3, r7, #8
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff fd7f 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f960 	bl	8008310 <SDMMC_GetCmdResp2>
 8008050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008052:	69fb      	ldr	r3, [r7, #28]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3720      	adds	r7, #32
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b088      	sub	sp, #32
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800806a:	2303      	movs	r3, #3
 800806c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800806e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800807c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800807e:	f107 0308 	add.w	r3, r7, #8
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7ff fd5f 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	2103      	movs	r1, #3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f9c8 	bl	8008424 <SDMMC_GetCmdResp6>
 8008094:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008096:	69fb      	ldr	r3, [r7, #28]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3720      	adds	r7, #32
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80080ae:	230d      	movs	r3, #13
 80080b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080b8:	2300      	movs	r3, #0
 80080ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080c2:	f107 0308 	add.w	r3, r7, #8
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff fd3d 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80080ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d2:	210d      	movs	r1, #13
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f829 	bl	800812c <SDMMC_GetCmdResp1>
 80080da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080dc:	69fb      	ldr	r3, [r7, #28]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3720      	adds	r7, #32
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b088      	sub	sp, #32
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80080f2:	230d      	movs	r3, #13
 80080f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080fc:	2300      	movs	r3, #0
 80080fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008104:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008106:	f107 0308 	add.w	r3, r7, #8
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff fd1b 	bl	8007b48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008112:	f241 3288 	movw	r2, #5000	; 0x1388
 8008116:	210d      	movs	r1, #13
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f807 	bl	800812c <SDMMC_GetCmdResp1>
 800811e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008120:	69fb      	ldr	r3, [r7, #28]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3720      	adds	r7, #32
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	460b      	mov	r3, r1
 8008136:	607a      	str	r2, [r7, #4]
 8008138:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800813a:	4b70      	ldr	r3, [pc, #448]	; (80082fc <SDMMC_GetCmdResp1+0x1d0>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a70      	ldr	r2, [pc, #448]	; (8008300 <SDMMC_GetCmdResp1+0x1d4>)
 8008140:	fba2 2303 	umull	r2, r3, r2, r3
 8008144:	0a5a      	lsrs	r2, r3, #9
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	fb02 f303 	mul.w	r3, r2, r3
 800814c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	1e5a      	subs	r2, r3, #1
 8008152:	61fa      	str	r2, [r7, #28]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d102      	bne.n	800815e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008158:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800815c:	e0c9      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008162:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	4b67      	ldr	r3, [pc, #412]	; (8008304 <SDMMC_GetCmdResp1+0x1d8>)
 8008168:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0ef      	beq.n	800814e <SDMMC_GetCmdResp1+0x22>
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1ea      	bne.n	800814e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	d004      	beq.n	800818e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2204      	movs	r2, #4
 8008188:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800818a:	2304      	movs	r3, #4
 800818c:	e0b1      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	d004      	beq.n	80081a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2201      	movs	r2, #1
 800819e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0a6      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4a58      	ldr	r2, [pc, #352]	; (8008308 <SDMMC_GetCmdResp1+0x1dc>)
 80081a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f7ff fcf6 	bl	8007b9c <SDMMC_GetCommandResponse>
 80081b0:	4603      	mov	r3, r0
 80081b2:	461a      	mov	r2, r3
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d001      	beq.n	80081be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e099      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80081be:	2100      	movs	r1, #0
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f7ff fcf8 	bl	8007bb6 <SDMMC_GetResponse>
 80081c6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	4b50      	ldr	r3, [pc, #320]	; (800830c <SDMMC_GetCmdResp1+0x1e0>)
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80081d2:	2300      	movs	r3, #0
 80081d4:	e08d      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	da02      	bge.n	80081e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80081dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081e0:	e087      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80081ec:	2340      	movs	r3, #64	; 0x40
 80081ee:	e080      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80081fa:	2380      	movs	r3, #128	; 0x80
 80081fc:	e079      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800820c:	e071      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800821c:	e069      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800822c:	e061      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800823c:	e059      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800824c:	e051      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800825c:	e049      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008268:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800826c:	e041      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800827c:	e039      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800828c:	e031      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008298:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800829c:	e029      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80082a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80082ac:	e021      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80082b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80082bc:	e019      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d002      	beq.n	80082ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80082c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80082cc:	e011      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80082d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80082dc:	e009      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80082e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80082ec:	e001      	b.n	80082f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80082ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3720      	adds	r7, #32
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	24000000 	.word	0x24000000
 8008300:	10624dd3 	.word	0x10624dd3
 8008304:	00200045 	.word	0x00200045
 8008308:	002000c5 	.word	0x002000c5
 800830c:	fdffe008 	.word	0xfdffe008

08008310 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008318:	4b1f      	ldr	r3, [pc, #124]	; (8008398 <SDMMC_GetCmdResp2+0x88>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a1f      	ldr	r2, [pc, #124]	; (800839c <SDMMC_GetCmdResp2+0x8c>)
 800831e:	fba2 2303 	umull	r2, r3, r2, r3
 8008322:	0a5b      	lsrs	r3, r3, #9
 8008324:	f241 3288 	movw	r2, #5000	; 0x1388
 8008328:	fb02 f303 	mul.w	r3, r2, r3
 800832c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	1e5a      	subs	r2, r3, #1
 8008332:	60fa      	str	r2, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d102      	bne.n	800833e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008338:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800833c:	e026      	b.n	800838c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008342:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0ef      	beq.n	800832e <SDMMC_GetCmdResp2+0x1e>
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1ea      	bne.n	800832e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835c:	f003 0304 	and.w	r3, r3, #4
 8008360:	2b00      	cmp	r3, #0
 8008362:	d004      	beq.n	800836e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2204      	movs	r2, #4
 8008368:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800836a:	2304      	movs	r3, #4
 800836c:	e00e      	b.n	800838c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	d004      	beq.n	8008384 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008380:	2301      	movs	r3, #1
 8008382:	e003      	b.n	800838c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a06      	ldr	r2, [pc, #24]	; (80083a0 <SDMMC_GetCmdResp2+0x90>)
 8008388:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	24000000 	.word	0x24000000
 800839c:	10624dd3 	.word	0x10624dd3
 80083a0:	002000c5 	.word	0x002000c5

080083a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80083ac:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <SDMMC_GetCmdResp3+0x74>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a1a      	ldr	r2, [pc, #104]	; (800841c <SDMMC_GetCmdResp3+0x78>)
 80083b2:	fba2 2303 	umull	r2, r3, r2, r3
 80083b6:	0a5b      	lsrs	r3, r3, #9
 80083b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083bc:	fb02 f303 	mul.w	r3, r2, r3
 80083c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	1e5a      	subs	r2, r3, #1
 80083c6:	60fa      	str	r2, [r7, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d102      	bne.n	80083d2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083d0:	e01b      	b.n	800840a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0ef      	beq.n	80083c2 <SDMMC_GetCmdResp3+0x1e>
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1ea      	bne.n	80083c2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d004      	beq.n	8008402 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2204      	movs	r2, #4
 80083fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083fe:	2304      	movs	r3, #4
 8008400:	e003      	b.n	800840a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a06      	ldr	r2, [pc, #24]	; (8008420 <SDMMC_GetCmdResp3+0x7c>)
 8008406:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	24000000 	.word	0x24000000
 800841c:	10624dd3 	.word	0x10624dd3
 8008420:	002000c5 	.word	0x002000c5

08008424 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	460b      	mov	r3, r1
 800842e:	607a      	str	r2, [r7, #4]
 8008430:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008432:	4b35      	ldr	r3, [pc, #212]	; (8008508 <SDMMC_GetCmdResp6+0xe4>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a35      	ldr	r2, [pc, #212]	; (800850c <SDMMC_GetCmdResp6+0xe8>)
 8008438:	fba2 2303 	umull	r2, r3, r2, r3
 800843c:	0a5b      	lsrs	r3, r3, #9
 800843e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008442:	fb02 f303 	mul.w	r3, r2, r3
 8008446:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	1e5a      	subs	r2, r3, #1
 800844c:	61fa      	str	r2, [r7, #28]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d102      	bne.n	8008458 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008452:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008456:	e052      	b.n	80084fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008464:	2b00      	cmp	r3, #0
 8008466:	d0ef      	beq.n	8008448 <SDMMC_GetCmdResp6+0x24>
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1ea      	bne.n	8008448 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008476:	f003 0304 	and.w	r3, r3, #4
 800847a:	2b00      	cmp	r3, #0
 800847c:	d004      	beq.n	8008488 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2204      	movs	r2, #4
 8008482:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008484:	2304      	movs	r3, #4
 8008486:	e03a      	b.n	80084fe <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b00      	cmp	r3, #0
 8008492:	d004      	beq.n	800849e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2201      	movs	r2, #1
 8008498:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800849a:	2301      	movs	r3, #1
 800849c:	e02f      	b.n	80084fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f7ff fb7c 	bl	8007b9c <SDMMC_GetCommandResponse>
 80084a4:	4603      	mov	r3, r0
 80084a6:	461a      	mov	r2, r3
 80084a8:	7afb      	ldrb	r3, [r7, #11]
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d001      	beq.n	80084b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e025      	b.n	80084fe <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4a16      	ldr	r2, [pc, #88]	; (8008510 <SDMMC_GetCmdResp6+0xec>)
 80084b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80084b8:	2100      	movs	r1, #0
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f7ff fb7b 	bl	8007bb6 <SDMMC_GetResponse>
 80084c0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d106      	bne.n	80084da <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	0c1b      	lsrs	r3, r3, #16
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80084d6:	2300      	movs	r3, #0
 80084d8:	e011      	b.n	80084fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80084e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084e8:	e009      	b.n	80084fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80084f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084f8:	e001      	b.n	80084fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80084fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3720      	adds	r7, #32
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	24000000 	.word	0x24000000
 800850c:	10624dd3 	.word	0x10624dd3
 8008510:	002000c5 	.word	0x002000c5

08008514 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800851c:	4b22      	ldr	r3, [pc, #136]	; (80085a8 <SDMMC_GetCmdResp7+0x94>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a22      	ldr	r2, [pc, #136]	; (80085ac <SDMMC_GetCmdResp7+0x98>)
 8008522:	fba2 2303 	umull	r2, r3, r2, r3
 8008526:	0a5b      	lsrs	r3, r3, #9
 8008528:	f241 3288 	movw	r2, #5000	; 0x1388
 800852c:	fb02 f303 	mul.w	r3, r2, r3
 8008530:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	1e5a      	subs	r2, r3, #1
 8008536:	60fa      	str	r2, [r7, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d102      	bne.n	8008542 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800853c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008540:	e02c      	b.n	800859c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008546:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0ef      	beq.n	8008532 <SDMMC_GetCmdResp7+0x1e>
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1ea      	bne.n	8008532 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d004      	beq.n	8008572 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2204      	movs	r2, #4
 800856c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800856e:	2304      	movs	r3, #4
 8008570:	e014      	b.n	800859c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d004      	beq.n	8008588 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008584:	2301      	movs	r3, #1
 8008586:	e009      	b.n	800859c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2240      	movs	r2, #64	; 0x40
 8008598:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800859a:	2300      	movs	r3, #0

}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	24000000 	.word	0x24000000
 80085ac:	10624dd3 	.word	0x10624dd3

080085b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80085b8:	4b11      	ldr	r3, [pc, #68]	; (8008600 <SDMMC_GetCmdError+0x50>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a11      	ldr	r2, [pc, #68]	; (8008604 <SDMMC_GetCmdError+0x54>)
 80085be:	fba2 2303 	umull	r2, r3, r2, r3
 80085c2:	0a5b      	lsrs	r3, r3, #9
 80085c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085c8:	fb02 f303 	mul.w	r3, r2, r3
 80085cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	1e5a      	subs	r2, r3, #1
 80085d2:	60fa      	str	r2, [r7, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d102      	bne.n	80085de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085dc:	e009      	b.n	80085f2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0f1      	beq.n	80085ce <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a06      	ldr	r2, [pc, #24]	; (8008608 <SDMMC_GetCmdError+0x58>)
 80085ee:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	24000000 	.word	0x24000000
 8008604:	10624dd3 	.word	0x10624dd3
 8008608:	002000c5 	.word	0x002000c5

0800860c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008610:	4904      	ldr	r1, [pc, #16]	; (8008624 <MX_FATFS_Init+0x18>)
 8008612:	4805      	ldr	r0, [pc, #20]	; (8008628 <MX_FATFS_Init+0x1c>)
 8008614:	f003 f8ec 	bl	800b7f0 <FATFS_LinkDriver>
 8008618:	4603      	mov	r3, r0
 800861a:	461a      	mov	r2, r3
 800861c:	4b03      	ldr	r3, [pc, #12]	; (800862c <MX_FATFS_Init+0x20>)
 800861e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008620:	bf00      	nop
 8008622:	bd80      	pop	{r7, pc}
 8008624:	240006c0 	.word	0x240006c0
 8008628:	0800baac 	.word	0x0800baac
 800862c:	240006bc 	.word	0x240006bc

08008630 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008634:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008636:	4618      	mov	r0, r3
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800864a:	f000 f885 	bl	8008758 <BSP_SD_IsDetected>
 800864e:	4603      	mov	r3, r0
 8008650:	2b01      	cmp	r3, #1
 8008652:	d001      	beq.n	8008658 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008654:	2302      	movs	r3, #2
 8008656:	e012      	b.n	800867e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008658:	480b      	ldr	r0, [pc, #44]	; (8008688 <BSP_SD_Init+0x48>)
 800865a:	f7fc fcd3 	bl	8005004 <HAL_SD_Init>
 800865e:	4603      	mov	r3, r0
 8008660:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008662:	79fb      	ldrb	r3, [r7, #7]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d109      	bne.n	800867c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008668:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800866c:	4806      	ldr	r0, [pc, #24]	; (8008688 <BSP_SD_Init+0x48>)
 800866e:	f7fd fb89 	bl	8005d84 <HAL_SD_ConfigWideBusOperation>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800867c:	79fb      	ldrb	r3, [r7, #7]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	240005a8 	.word	0x240005a8

0800868c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	68f9      	ldr	r1, [r7, #12]
 80086a2:	4806      	ldr	r0, [pc, #24]	; (80086bc <BSP_SD_ReadBlocks_DMA+0x30>)
 80086a4:	f7fc fdce 	bl	8005244 <HAL_SD_ReadBlocks_DMA>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	240005a8 	.word	0x240005a8

080086c0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	68f9      	ldr	r1, [r7, #12]
 80086d6:	4806      	ldr	r0, [pc, #24]	; (80086f0 <BSP_SD_WriteBlocks_DMA+0x30>)
 80086d8:	f7fc fe5c 	bl	8005394 <HAL_SD_WriteBlocks_DMA>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3718      	adds	r7, #24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	240005a8 	.word	0x240005a8

080086f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80086f8:	4805      	ldr	r0, [pc, #20]	; (8008710 <BSP_SD_GetCardState+0x1c>)
 80086fa:	f7fd fc55 	bl	8005fa8 <HAL_SD_GetCardState>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b04      	cmp	r3, #4
 8008702:	bf14      	ite	ne
 8008704:	2301      	movne	r3, #1
 8008706:	2300      	moveq	r3, #0
 8008708:	b2db      	uxtb	r3, r3
}
 800870a:	4618      	mov	r0, r3
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	240005a8 	.word	0x240005a8

08008714 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	4803      	ldr	r0, [pc, #12]	; (800872c <BSP_SD_GetCardInfo+0x18>)
 8008720:	f7fd fb04 	bl	8005d2c <HAL_SD_GetCardInfo>
}
 8008724:	bf00      	nop
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	240005a8 	.word	0x240005a8

08008730 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008738:	f000 f9a0 	bl	8008a7c <BSP_SD_WriteCpltCallback>
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800874c:	f000 f9a2 	bl	8008a94 <BSP_SD_ReadCpltCallback>
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800875e:	2301      	movs	r3, #1
 8008760:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008762:	f000 f80b 	bl	800877c <BSP_PlatformIsDetected>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800876c:	2300      	movs	r3, #0
 800876e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	b2db      	uxtb	r3, r3
}
 8008774:	4618      	mov	r0, r3
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008782:	2301      	movs	r3, #1
 8008784:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008786:	2101      	movs	r1, #1
 8008788:	4806      	ldr	r0, [pc, #24]	; (80087a4 <BSP_PlatformIsDetected+0x28>)
 800878a:	f7f8 fed1 	bl	8001530 <HAL_GPIO_ReadPin>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8008794:	2300      	movs	r3, #0
 8008796:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008798:	79fb      	ldrb	r3, [r7, #7]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	58020c00 	.word	0x58020c00

080087a8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80087b0:	f7f8 fbc2 	bl	8000f38 <HAL_GetTick>
 80087b4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80087b6:	e006      	b.n	80087c6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80087b8:	f7ff ff9c 	bl	80086f4 <BSP_SD_GetCardState>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	e009      	b.n	80087da <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80087c6:	f7f8 fbb7 	bl	8000f38 <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d8f0      	bhi.n	80087b8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80087d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	4603      	mov	r3, r0
 80087ec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80087ee:	4b0b      	ldr	r3, [pc, #44]	; (800881c <SD_CheckStatus+0x38>)
 80087f0:	2201      	movs	r2, #1
 80087f2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80087f4:	f7ff ff7e 	bl	80086f4 <BSP_SD_GetCardState>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d107      	bne.n	800880e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80087fe:	4b07      	ldr	r3, [pc, #28]	; (800881c <SD_CheckStatus+0x38>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	f023 0301 	bic.w	r3, r3, #1
 8008808:	b2da      	uxtb	r2, r3
 800880a:	4b04      	ldr	r3, [pc, #16]	; (800881c <SD_CheckStatus+0x38>)
 800880c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800880e:	4b03      	ldr	r3, [pc, #12]	; (800881c <SD_CheckStatus+0x38>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	b2db      	uxtb	r3, r3
}
 8008814:	4618      	mov	r0, r3
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	2400000d 	.word	0x2400000d

08008820 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	4603      	mov	r3, r0
 8008828:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800882a:	f7ff ff09 	bl	8008640 <BSP_SD_Init>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d107      	bne.n	8008844 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	4618      	mov	r0, r3
 8008838:	f7ff ffd4 	bl	80087e4 <SD_CheckStatus>
 800883c:	4603      	mov	r3, r0
 800883e:	461a      	mov	r2, r3
 8008840:	4b04      	ldr	r3, [pc, #16]	; (8008854 <SD_initialize+0x34>)
 8008842:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008844:	4b03      	ldr	r3, [pc, #12]	; (8008854 <SD_initialize+0x34>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	b2db      	uxtb	r3, r3
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	2400000d 	.word	0x2400000d

08008858 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff ffbd 	bl	80087e4 <SD_CheckStatus>
 800886a:	4603      	mov	r3, r0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008888:	f247 5030 	movw	r0, #30000	; 0x7530
 800888c:	f7ff ff8c 	bl	80087a8 <SD_CheckStatusWithTimeout>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	da01      	bge.n	800889a <SD_read+0x26>
  {
    return res;
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	e03b      	b.n	8008912 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	68b8      	ldr	r0, [r7, #8]
 80088a0:	f7ff fef4 	bl	800868c <BSP_SD_ReadBlocks_DMA>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d132      	bne.n	8008910 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80088aa:	4b1c      	ldr	r3, [pc, #112]	; (800891c <SD_read+0xa8>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80088b0:	f7f8 fb42 	bl	8000f38 <HAL_GetTick>
 80088b4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80088b6:	bf00      	nop
 80088b8:	4b18      	ldr	r3, [pc, #96]	; (800891c <SD_read+0xa8>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d108      	bne.n	80088d2 <SD_read+0x5e>
 80088c0:	f7f8 fb3a 	bl	8000f38 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	f247 522f 	movw	r2, #29999	; 0x752f
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d9f2      	bls.n	80088b8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80088d2:	4b12      	ldr	r3, [pc, #72]	; (800891c <SD_read+0xa8>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d102      	bne.n	80088e0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	75fb      	strb	r3, [r7, #23]
 80088de:	e017      	b.n	8008910 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80088e0:	4b0e      	ldr	r3, [pc, #56]	; (800891c <SD_read+0xa8>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80088e6:	f7f8 fb27 	bl	8000f38 <HAL_GetTick>
 80088ea:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80088ec:	e007      	b.n	80088fe <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80088ee:	f7ff ff01 	bl	80086f4 <BSP_SD_GetCardState>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <SD_read+0x8a>
          {
            res = RES_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80088fc:	e008      	b.n	8008910 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80088fe:	f7f8 fb1b 	bl	8000f38 <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	f247 522f 	movw	r2, #29999	; 0x752f
 800890c:	4293      	cmp	r3, r2
 800890e:	d9ee      	bls.n	80088ee <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	240006c8 	.word	0x240006c8

08008920 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60b9      	str	r1, [r7, #8]
 8008928:	607a      	str	r2, [r7, #4]
 800892a:	603b      	str	r3, [r7, #0]
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008934:	4b24      	ldr	r3, [pc, #144]	; (80089c8 <SD_write+0xa8>)
 8008936:	2200      	movs	r2, #0
 8008938:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800893a:	f247 5030 	movw	r0, #30000	; 0x7530
 800893e:	f7ff ff33 	bl	80087a8 <SD_CheckStatusWithTimeout>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	da01      	bge.n	800894c <SD_write+0x2c>
  {
    return res;
 8008948:	7dfb      	ldrb	r3, [r7, #23]
 800894a:	e038      	b.n	80089be <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	68b8      	ldr	r0, [r7, #8]
 8008952:	f7ff feb5 	bl	80086c0 <BSP_SD_WriteBlocks_DMA>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d12f      	bne.n	80089bc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800895c:	f7f8 faec 	bl	8000f38 <HAL_GetTick>
 8008960:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008962:	bf00      	nop
 8008964:	4b18      	ldr	r3, [pc, #96]	; (80089c8 <SD_write+0xa8>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d108      	bne.n	800897e <SD_write+0x5e>
 800896c:	f7f8 fae4 	bl	8000f38 <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	f247 522f 	movw	r2, #29999	; 0x752f
 800897a:	4293      	cmp	r3, r2
 800897c:	d9f2      	bls.n	8008964 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800897e:	4b12      	ldr	r3, [pc, #72]	; (80089c8 <SD_write+0xa8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d102      	bne.n	800898c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	75fb      	strb	r3, [r7, #23]
 800898a:	e017      	b.n	80089bc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800898c:	4b0e      	ldr	r3, [pc, #56]	; (80089c8 <SD_write+0xa8>)
 800898e:	2200      	movs	r2, #0
 8008990:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008992:	f7f8 fad1 	bl	8000f38 <HAL_GetTick>
 8008996:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008998:	e007      	b.n	80089aa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800899a:	f7ff feab 	bl	80086f4 <BSP_SD_GetCardState>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d102      	bne.n	80089aa <SD_write+0x8a>
          {
            res = RES_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	75fb      	strb	r3, [r7, #23]
            break;
 80089a8:	e008      	b.n	80089bc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80089aa:	f7f8 fac5 	bl	8000f38 <HAL_GetTick>
 80089ae:	4602      	mov	r2, r0
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	f247 522f 	movw	r2, #29999	; 0x752f
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d9ee      	bls.n	800899a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3718      	adds	r7, #24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	240006c4 	.word	0x240006c4

080089cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08c      	sub	sp, #48	; 0x30
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4603      	mov	r3, r0
 80089d4:	603a      	str	r2, [r7, #0]
 80089d6:	71fb      	strb	r3, [r7, #7]
 80089d8:	460b      	mov	r3, r1
 80089da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80089e2:	4b25      	ldr	r3, [pc, #148]	; (8008a78 <SD_ioctl+0xac>)
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <SD_ioctl+0x28>
 80089f0:	2303      	movs	r3, #3
 80089f2:	e03c      	b.n	8008a6e <SD_ioctl+0xa2>

  switch (cmd)
 80089f4:	79bb      	ldrb	r3, [r7, #6]
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	d834      	bhi.n	8008a64 <SD_ioctl+0x98>
 80089fa:	a201      	add	r2, pc, #4	; (adr r2, 8008a00 <SD_ioctl+0x34>)
 80089fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a00:	08008a11 	.word	0x08008a11
 8008a04:	08008a19 	.word	0x08008a19
 8008a08:	08008a31 	.word	0x08008a31
 8008a0c:	08008a4b 	.word	0x08008a4b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008a16:	e028      	b.n	8008a6a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008a18:	f107 0308 	add.w	r3, r7, #8
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff fe79 	bl	8008714 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008a22:	6a3a      	ldr	r2, [r7, #32]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008a2e:	e01c      	b.n	8008a6a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008a30:	f107 0308 	add.w	r3, r7, #8
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7ff fe6d 	bl	8008714 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008a48:	e00f      	b.n	8008a6a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008a4a:	f107 0308 	add.w	r3, r7, #8
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff fe60 	bl	8008714 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	0a5a      	lsrs	r2, r3, #9
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008a62:	e002      	b.n	8008a6a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008a64:	2304      	movs	r3, #4
 8008a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3730      	adds	r7, #48	; 0x30
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	2400000d 	.word	0x2400000d

08008a7c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008a80:	4b03      	ldr	r3, [pc, #12]	; (8008a90 <BSP_SD_WriteCpltCallback+0x14>)
 8008a82:	2201      	movs	r2, #1
 8008a84:	601a      	str	r2, [r3, #0]
}
 8008a86:	bf00      	nop
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	240006c4 	.word	0x240006c4

08008a94 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008a98:	4b03      	ldr	r3, [pc, #12]	; (8008aa8 <BSP_SD_ReadCpltCallback+0x14>)
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]
}
 8008a9e:	bf00      	nop
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	240006c8 	.word	0x240006c8

08008aac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	4a08      	ldr	r2, [pc, #32]	; (8008adc <disk_status+0x30>)
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	79fa      	ldrb	r2, [r7, #7]
 8008ac4:	4905      	ldr	r1, [pc, #20]	; (8008adc <disk_status+0x30>)
 8008ac6:	440a      	add	r2, r1
 8008ac8:	7a12      	ldrb	r2, [r2, #8]
 8008aca:	4610      	mov	r0, r2
 8008acc:	4798      	blx	r3
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	240008f4 	.word	0x240008f4

08008ae0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	4a0d      	ldr	r2, [pc, #52]	; (8008b28 <disk_initialize+0x48>)
 8008af2:	5cd3      	ldrb	r3, [r2, r3]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d111      	bne.n	8008b1c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008af8:	79fb      	ldrb	r3, [r7, #7]
 8008afa:	4a0b      	ldr	r2, [pc, #44]	; (8008b28 <disk_initialize+0x48>)
 8008afc:	2101      	movs	r1, #1
 8008afe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	4a09      	ldr	r2, [pc, #36]	; (8008b28 <disk_initialize+0x48>)
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	79fa      	ldrb	r2, [r7, #7]
 8008b0e:	4906      	ldr	r1, [pc, #24]	; (8008b28 <disk_initialize+0x48>)
 8008b10:	440a      	add	r2, r1
 8008b12:	7a12      	ldrb	r2, [r2, #8]
 8008b14:	4610      	mov	r0, r2
 8008b16:	4798      	blx	r3
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	240008f4 	.word	0x240008f4

08008b2c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008b2c:	b590      	push	{r4, r7, lr}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60b9      	str	r1, [r7, #8]
 8008b34:	607a      	str	r2, [r7, #4]
 8008b36:	603b      	str	r3, [r7, #0]
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	4a0a      	ldr	r2, [pc, #40]	; (8008b68 <disk_read+0x3c>)
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	689c      	ldr	r4, [r3, #8]
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	4a07      	ldr	r2, [pc, #28]	; (8008b68 <disk_read+0x3c>)
 8008b4c:	4413      	add	r3, r2
 8008b4e:	7a18      	ldrb	r0, [r3, #8]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	68b9      	ldr	r1, [r7, #8]
 8008b56:	47a0      	blx	r4
 8008b58:	4603      	mov	r3, r0
 8008b5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	371c      	adds	r7, #28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd90      	pop	{r4, r7, pc}
 8008b66:	bf00      	nop
 8008b68:	240008f4 	.word	0x240008f4

08008b6c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008b6c:	b590      	push	{r4, r7, lr}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	607a      	str	r2, [r7, #4]
 8008b76:	603b      	str	r3, [r7, #0]
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4a0a      	ldr	r2, [pc, #40]	; (8008ba8 <disk_write+0x3c>)
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	68dc      	ldr	r4, [r3, #12]
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	4a07      	ldr	r2, [pc, #28]	; (8008ba8 <disk_write+0x3c>)
 8008b8c:	4413      	add	r3, r2
 8008b8e:	7a18      	ldrb	r0, [r3, #8]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	68b9      	ldr	r1, [r7, #8]
 8008b96:	47a0      	blx	r4
 8008b98:	4603      	mov	r3, r0
 8008b9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	371c      	adds	r7, #28
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd90      	pop	{r4, r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	240008f4 	.word	0x240008f4

08008bac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	603a      	str	r2, [r7, #0]
 8008bb6:	71fb      	strb	r3, [r7, #7]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008bbc:	79fb      	ldrb	r3, [r7, #7]
 8008bbe:	4a09      	ldr	r2, [pc, #36]	; (8008be4 <disk_ioctl+0x38>)
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	79fa      	ldrb	r2, [r7, #7]
 8008bca:	4906      	ldr	r1, [pc, #24]	; (8008be4 <disk_ioctl+0x38>)
 8008bcc:	440a      	add	r2, r1
 8008bce:	7a10      	ldrb	r0, [r2, #8]
 8008bd0:	79b9      	ldrb	r1, [r7, #6]
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	4798      	blx	r3
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73fb      	strb	r3, [r7, #15]
  return res;
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	240008f4 	.word	0x240008f4

08008be8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008bf8:	89fb      	ldrh	r3, [r7, #14]
 8008bfa:	021b      	lsls	r3, r3, #8
 8008bfc:	b21a      	sxth	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	b21b      	sxth	r3, r3
 8008c04:	4313      	orrs	r3, r2
 8008c06:	b21b      	sxth	r3, r3
 8008c08:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008c0a:	89fb      	ldrh	r3, [r7, #14]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3303      	adds	r3, #3
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	021b      	lsls	r3, r3, #8
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	3202      	adds	r2, #2
 8008c30:	7812      	ldrb	r2, [r2, #0]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	3201      	adds	r2, #1
 8008c3e:	7812      	ldrb	r2, [r2, #0]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	021b      	lsls	r3, r3, #8
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	7812      	ldrb	r2, [r2, #0]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008c50:	68fb      	ldr	r3, [r7, #12]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	460b      	mov	r3, r1
 8008c68:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	887a      	ldrh	r2, [r7, #2]
 8008c72:	b2d2      	uxtb	r2, r2
 8008c74:	701a      	strb	r2, [r3, #0]
 8008c76:	887b      	ldrh	r3, [r7, #2]
 8008c78:	0a1b      	lsrs	r3, r3, #8
 8008c7a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	607a      	str	r2, [r7, #4]
 8008c82:	887a      	ldrh	r2, [r7, #2]
 8008c84:	b2d2      	uxtb	r2, r2
 8008c86:	701a      	strb	r2, [r3, #0]
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	b2d2      	uxtb	r2, r2
 8008ca8:	701a      	strb	r2, [r3, #0]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	0a1b      	lsrs	r3, r3, #8
 8008cae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	1c5a      	adds	r2, r3, #1
 8008cb4:	607a      	str	r2, [r7, #4]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	b2d2      	uxtb	r2, r2
 8008cba:	701a      	strb	r2, [r3, #0]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	0a1b      	lsrs	r3, r3, #8
 8008cc0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	607a      	str	r2, [r7, #4]
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	b2d2      	uxtb	r2, r2
 8008ccc:	701a      	strb	r2, [r3, #0]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	0a1b      	lsrs	r3, r3, #8
 8008cd2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	607a      	str	r2, [r7, #4]
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	b2d2      	uxtb	r2, r2
 8008cde:	701a      	strb	r2, [r3, #0]
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008cec:	b480      	push	{r7}
 8008cee:	b087      	sub	sp, #28
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00d      	beq.n	8008d22 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	1c53      	adds	r3, r2, #1
 8008d0a:	613b      	str	r3, [r7, #16]
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	1c59      	adds	r1, r3, #1
 8008d10:	6179      	str	r1, [r7, #20]
 8008d12:	7812      	ldrb	r2, [r2, #0]
 8008d14:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	607b      	str	r3, [r7, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1f1      	bne.n	8008d06 <mem_cpy+0x1a>
	}
}
 8008d22:	bf00      	nop
 8008d24:	371c      	adds	r7, #28
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008d2e:	b480      	push	{r7}
 8008d30:	b087      	sub	sp, #28
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	60b9      	str	r1, [r7, #8]
 8008d38:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	617a      	str	r2, [r7, #20]
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	b2d2      	uxtb	r2, r2
 8008d48:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	607b      	str	r3, [r7, #4]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1f3      	bne.n	8008d3e <mem_set+0x10>
}
 8008d56:	bf00      	nop
 8008d58:	bf00      	nop
 8008d5a:	371c      	adds	r7, #28
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008d64:	b480      	push	{r7}
 8008d66:	b089      	sub	sp, #36	; 0x24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	61fb      	str	r3, [r7, #28]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	61fa      	str	r2, [r7, #28]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	4619      	mov	r1, r3
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	61ba      	str	r2, [r7, #24]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	1acb      	subs	r3, r1, r3
 8008d90:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	607b      	str	r3, [r7, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <mem_cmp+0x40>
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0eb      	beq.n	8008d7c <mem_cmp+0x18>

	return r;
 8008da4:	697b      	ldr	r3, [r7, #20]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3724      	adds	r7, #36	; 0x24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008dbc:	e002      	b.n	8008dc4 <chk_chr+0x12>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	607b      	str	r3, [r7, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d005      	beq.n	8008dd8 <chk_chr+0x26>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d1f2      	bne.n	8008dbe <chk_chr+0xc>
	return *str;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	781b      	ldrb	r3, [r3, #0]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008df2:	2300      	movs	r3, #0
 8008df4:	60bb      	str	r3, [r7, #8]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	60fb      	str	r3, [r7, #12]
 8008dfa:	e029      	b.n	8008e50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008dfc:	4a27      	ldr	r2, [pc, #156]	; (8008e9c <chk_lock+0xb4>)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	4413      	add	r3, r2
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d01d      	beq.n	8008e46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e0a:	4a24      	ldr	r2, [pc, #144]	; (8008e9c <chk_lock+0xb4>)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	011b      	lsls	r3, r3, #4
 8008e10:	4413      	add	r3, r2
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d116      	bne.n	8008e4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008e1c:	4a1f      	ldr	r2, [pc, #124]	; (8008e9c <chk_lock+0xb4>)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	011b      	lsls	r3, r3, #4
 8008e22:	4413      	add	r3, r2
 8008e24:	3304      	adds	r3, #4
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d10c      	bne.n	8008e4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008e30:	4a1a      	ldr	r2, [pc, #104]	; (8008e9c <chk_lock+0xb4>)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	011b      	lsls	r3, r3, #4
 8008e36:	4413      	add	r3, r2
 8008e38:	3308      	adds	r3, #8
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d102      	bne.n	8008e4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008e44:	e007      	b.n	8008e56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008e46:	2301      	movs	r3, #1
 8008e48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	60fb      	str	r3, [r7, #12]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d9d2      	bls.n	8008dfc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d109      	bne.n	8008e70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d102      	bne.n	8008e68 <chk_lock+0x80>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d101      	bne.n	8008e6c <chk_lock+0x84>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	e010      	b.n	8008e8e <chk_lock+0xa6>
 8008e6c:	2312      	movs	r3, #18
 8008e6e:	e00e      	b.n	8008e8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d108      	bne.n	8008e88 <chk_lock+0xa0>
 8008e76:	4a09      	ldr	r2, [pc, #36]	; (8008e9c <chk_lock+0xb4>)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	011b      	lsls	r3, r3, #4
 8008e7c:	4413      	add	r3, r2
 8008e7e:	330c      	adds	r3, #12
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e86:	d101      	bne.n	8008e8c <chk_lock+0xa4>
 8008e88:	2310      	movs	r3, #16
 8008e8a:	e000      	b.n	8008e8e <chk_lock+0xa6>
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	240006d4 	.word	0x240006d4

08008ea0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	607b      	str	r3, [r7, #4]
 8008eaa:	e002      	b.n	8008eb2 <enq_lock+0x12>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	607b      	str	r3, [r7, #4]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d806      	bhi.n	8008ec6 <enq_lock+0x26>
 8008eb8:	4a09      	ldr	r2, [pc, #36]	; (8008ee0 <enq_lock+0x40>)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	011b      	lsls	r3, r3, #4
 8008ebe:	4413      	add	r3, r2
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1f2      	bne.n	8008eac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	bf14      	ite	ne
 8008ecc:	2301      	movne	r3, #1
 8008ece:	2300      	moveq	r3, #0
 8008ed0:	b2db      	uxtb	r3, r3
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	240006d4 	.word	0x240006d4

08008ee4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	e01f      	b.n	8008f34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008ef4:	4a41      	ldr	r2, [pc, #260]	; (8008ffc <inc_lock+0x118>)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	011b      	lsls	r3, r3, #4
 8008efa:	4413      	add	r3, r2
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d113      	bne.n	8008f2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008f06:	4a3d      	ldr	r2, [pc, #244]	; (8008ffc <inc_lock+0x118>)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	4413      	add	r3, r2
 8008f0e:	3304      	adds	r3, #4
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d109      	bne.n	8008f2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008f1a:	4a38      	ldr	r2, [pc, #224]	; (8008ffc <inc_lock+0x118>)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	4413      	add	r3, r2
 8008f22:	3308      	adds	r3, #8
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d006      	beq.n	8008f3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3301      	adds	r3, #1
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d9dc      	bls.n	8008ef4 <inc_lock+0x10>
 8008f3a:	e000      	b.n	8008f3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008f3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d132      	bne.n	8008faa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	e002      	b.n	8008f50 <inc_lock+0x6c>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	60fb      	str	r3, [r7, #12]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d806      	bhi.n	8008f64 <inc_lock+0x80>
 8008f56:	4a29      	ldr	r2, [pc, #164]	; (8008ffc <inc_lock+0x118>)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	011b      	lsls	r3, r3, #4
 8008f5c:	4413      	add	r3, r2
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1f2      	bne.n	8008f4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d101      	bne.n	8008f6e <inc_lock+0x8a>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	e040      	b.n	8008ff0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	4922      	ldr	r1, [pc, #136]	; (8008ffc <inc_lock+0x118>)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	011b      	lsls	r3, r3, #4
 8008f78:	440b      	add	r3, r1
 8008f7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	689a      	ldr	r2, [r3, #8]
 8008f80:	491e      	ldr	r1, [pc, #120]	; (8008ffc <inc_lock+0x118>)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	440b      	add	r3, r1
 8008f88:	3304      	adds	r3, #4
 8008f8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	695a      	ldr	r2, [r3, #20]
 8008f90:	491a      	ldr	r1, [pc, #104]	; (8008ffc <inc_lock+0x118>)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	011b      	lsls	r3, r3, #4
 8008f96:	440b      	add	r3, r1
 8008f98:	3308      	adds	r3, #8
 8008f9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008f9c:	4a17      	ldr	r2, [pc, #92]	; (8008ffc <inc_lock+0x118>)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	011b      	lsls	r3, r3, #4
 8008fa2:	4413      	add	r3, r2
 8008fa4:	330c      	adds	r3, #12
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d009      	beq.n	8008fc4 <inc_lock+0xe0>
 8008fb0:	4a12      	ldr	r2, [pc, #72]	; (8008ffc <inc_lock+0x118>)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	011b      	lsls	r3, r3, #4
 8008fb6:	4413      	add	r3, r2
 8008fb8:	330c      	adds	r3, #12
 8008fba:	881b      	ldrh	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <inc_lock+0xe0>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	e015      	b.n	8008ff0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d108      	bne.n	8008fdc <inc_lock+0xf8>
 8008fca:	4a0c      	ldr	r2, [pc, #48]	; (8008ffc <inc_lock+0x118>)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	011b      	lsls	r3, r3, #4
 8008fd0:	4413      	add	r3, r2
 8008fd2:	330c      	adds	r3, #12
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	e001      	b.n	8008fe0 <inc_lock+0xfc>
 8008fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008fe0:	4906      	ldr	r1, [pc, #24]	; (8008ffc <inc_lock+0x118>)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	011b      	lsls	r3, r3, #4
 8008fe6:	440b      	add	r3, r1
 8008fe8:	330c      	adds	r3, #12
 8008fea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	3301      	adds	r3, #1
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	240006d4 	.word	0x240006d4

08009000 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3b01      	subs	r3, #1
 800900c:	607b      	str	r3, [r7, #4]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d825      	bhi.n	8009060 <dec_lock+0x60>
		n = Files[i].ctr;
 8009014:	4a17      	ldr	r2, [pc, #92]	; (8009074 <dec_lock+0x74>)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	011b      	lsls	r3, r3, #4
 800901a:	4413      	add	r3, r2
 800901c:	330c      	adds	r3, #12
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009022:	89fb      	ldrh	r3, [r7, #14]
 8009024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009028:	d101      	bne.n	800902e <dec_lock+0x2e>
 800902a:	2300      	movs	r3, #0
 800902c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800902e:	89fb      	ldrh	r3, [r7, #14]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <dec_lock+0x3a>
 8009034:	89fb      	ldrh	r3, [r7, #14]
 8009036:	3b01      	subs	r3, #1
 8009038:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800903a:	4a0e      	ldr	r2, [pc, #56]	; (8009074 <dec_lock+0x74>)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	4413      	add	r3, r2
 8009042:	330c      	adds	r3, #12
 8009044:	89fa      	ldrh	r2, [r7, #14]
 8009046:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009048:	89fb      	ldrh	r3, [r7, #14]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d105      	bne.n	800905a <dec_lock+0x5a>
 800904e:	4a09      	ldr	r2, [pc, #36]	; (8009074 <dec_lock+0x74>)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	011b      	lsls	r3, r3, #4
 8009054:	4413      	add	r3, r2
 8009056:	2200      	movs	r2, #0
 8009058:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	737b      	strb	r3, [r7, #13]
 800905e:	e001      	b.n	8009064 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009060:	2302      	movs	r3, #2
 8009062:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009064:	7b7b      	ldrb	r3, [r7, #13]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	240006d4 	.word	0x240006d4

08009078 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	e010      	b.n	80090a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009086:	4a0d      	ldr	r2, [pc, #52]	; (80090bc <clear_lock+0x44>)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	4413      	add	r3, r2
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	429a      	cmp	r2, r3
 8009094:	d105      	bne.n	80090a2 <clear_lock+0x2a>
 8009096:	4a09      	ldr	r2, [pc, #36]	; (80090bc <clear_lock+0x44>)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	4413      	add	r3, r2
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3301      	adds	r3, #1
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d9eb      	bls.n	8009086 <clear_lock+0xe>
	}
}
 80090ae:	bf00      	nop
 80090b0:	bf00      	nop
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	240006d4 	.word	0x240006d4

080090c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	78db      	ldrb	r3, [r3, #3]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d034      	beq.n	800913e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	7858      	ldrb	r0, [r3, #1]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80090e4:	2301      	movs	r3, #1
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	f7ff fd40 	bl	8008b6c <disk_write>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	73fb      	strb	r3, [r7, #15]
 80090f6:	e022      	b.n	800913e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	1ad2      	subs	r2, r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	429a      	cmp	r2, r3
 800910c:	d217      	bcs.n	800913e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	789b      	ldrb	r3, [r3, #2]
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	e010      	b.n	8009138 <sync_window+0x78>
					wsect += fs->fsize;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	4413      	add	r3, r2
 800911e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	7858      	ldrb	r0, [r3, #1]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800912a:	2301      	movs	r3, #1
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	f7ff fd1d 	bl	8008b6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	3b01      	subs	r3, #1
 8009136:	613b      	str	r3, [r7, #16]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d8eb      	bhi.n	8009116 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	429a      	cmp	r2, r3
 800915e:	d01b      	beq.n	8009198 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff ffad 	bl	80090c0 <sync_window>
 8009166:	4603      	mov	r3, r0
 8009168:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d113      	bne.n	8009198 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	7858      	ldrb	r0, [r3, #1]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800917a:	2301      	movs	r3, #1
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	f7ff fcd5 	bl	8008b2c <disk_read>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009188:	f04f 33ff 	mov.w	r3, #4294967295
 800918c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800918e:	2301      	movs	r3, #1
 8009190:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	683a      	ldr	r2, [r7, #0]
 8009196:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009198:	7bfb      	ldrb	r3, [r7, #15]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7ff ff87 	bl	80090c0 <sync_window>
 80091b2:	4603      	mov	r3, r0
 80091b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d158      	bne.n	800926e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b03      	cmp	r3, #3
 80091c2:	d148      	bne.n	8009256 <sync_fs+0xb2>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	791b      	ldrb	r3, [r3, #4]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d144      	bne.n	8009256 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	3334      	adds	r3, #52	; 0x34
 80091d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091d4:	2100      	movs	r1, #0
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff fda9 	bl	8008d2e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3334      	adds	r3, #52	; 0x34
 80091e0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80091e4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7ff fd38 	bl	8008c5e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	3334      	adds	r3, #52	; 0x34
 80091f2:	4921      	ldr	r1, [pc, #132]	; (8009278 <sync_fs+0xd4>)
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7ff fd4d 	bl	8008c94 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	3334      	adds	r3, #52	; 0x34
 80091fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009202:	491e      	ldr	r1, [pc, #120]	; (800927c <sync_fs+0xd8>)
 8009204:	4618      	mov	r0, r3
 8009206:	f7ff fd45 	bl	8008c94 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	3334      	adds	r3, #52	; 0x34
 800920e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	4619      	mov	r1, r3
 8009218:	4610      	mov	r0, r2
 800921a:	f7ff fd3b 	bl	8008c94 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3334      	adds	r3, #52	; 0x34
 8009222:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	4619      	mov	r1, r3
 800922c:	4610      	mov	r0, r2
 800922e:	f7ff fd31 	bl	8008c94 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	7858      	ldrb	r0, [r3, #1]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800924a:	2301      	movs	r3, #1
 800924c:	f7ff fc8e 	bl	8008b6c <disk_write>
			fs->fsi_flag = 0;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	785b      	ldrb	r3, [r3, #1]
 800925a:	2200      	movs	r2, #0
 800925c:	2100      	movs	r1, #0
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff fca4 	bl	8008bac <disk_ioctl>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <sync_fs+0xca>
 800926a:	2301      	movs	r3, #1
 800926c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800926e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	41615252 	.word	0x41615252
 800927c:	61417272 	.word	0x61417272

08009280 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	3b02      	subs	r3, #2
 800928e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	3b02      	subs	r3, #2
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	429a      	cmp	r2, r3
 800929a:	d301      	bcc.n	80092a0 <clust2sect+0x20>
 800929c:	2300      	movs	r3, #0
 800929e:	e008      	b.n	80092b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	895b      	ldrh	r3, [r3, #10]
 80092a4:	461a      	mov	r2, r3
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	fb03 f202 	mul.w	r2, r3, r2
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	4413      	add	r3, r2
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b086      	sub	sp, #24
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d904      	bls.n	80092de <get_fat+0x20>
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d302      	bcc.n	80092e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80092de:	2301      	movs	r3, #1
 80092e0:	617b      	str	r3, [r7, #20]
 80092e2:	e08f      	b.n	8009404 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80092e4:	f04f 33ff 	mov.w	r3, #4294967295
 80092e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d062      	beq.n	80093b8 <get_fat+0xfa>
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	dc7c      	bgt.n	80093f0 <get_fat+0x132>
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d002      	beq.n	8009300 <get_fat+0x42>
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d042      	beq.n	8009384 <get_fat+0xc6>
 80092fe:	e077      	b.n	80093f0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	085b      	lsrs	r3, r3, #1
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	4413      	add	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	0a5b      	lsrs	r3, r3, #9
 8009316:	4413      	add	r3, r2
 8009318:	4619      	mov	r1, r3
 800931a:	6938      	ldr	r0, [r7, #16]
 800931c:	f7ff ff14 	bl	8009148 <move_window>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d167      	bne.n	80093f6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	60fa      	str	r2, [r7, #12]
 800932c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	4413      	add	r3, r2
 8009334:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009338:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	0a5b      	lsrs	r3, r3, #9
 8009342:	4413      	add	r3, r2
 8009344:	4619      	mov	r1, r3
 8009346:	6938      	ldr	r0, [r7, #16]
 8009348:	f7ff fefe 	bl	8009148 <move_window>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d153      	bne.n	80093fa <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	4413      	add	r3, r2
 800935c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009360:	021b      	lsls	r3, r3, #8
 8009362:	461a      	mov	r2, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	4313      	orrs	r3, r2
 8009368:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	f003 0301 	and.w	r3, r3, #1
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <get_fat+0xbc>
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	091b      	lsrs	r3, r3, #4
 8009378:	e002      	b.n	8009380 <get_fat+0xc2>
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009380:	617b      	str	r3, [r7, #20]
			break;
 8009382:	e03f      	b.n	8009404 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	0a1b      	lsrs	r3, r3, #8
 800938c:	4413      	add	r3, r2
 800938e:	4619      	mov	r1, r3
 8009390:	6938      	ldr	r0, [r7, #16]
 8009392:	f7ff fed9 	bl	8009148 <move_window>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d130      	bne.n	80093fe <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80093aa:	4413      	add	r3, r2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7ff fc1b 	bl	8008be8 <ld_word>
 80093b2:	4603      	mov	r3, r0
 80093b4:	617b      	str	r3, [r7, #20]
			break;
 80093b6:	e025      	b.n	8009404 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	09db      	lsrs	r3, r3, #7
 80093c0:	4413      	add	r3, r2
 80093c2:	4619      	mov	r1, r3
 80093c4:	6938      	ldr	r0, [r7, #16]
 80093c6:	f7ff febf 	bl	8009148 <move_window>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d118      	bne.n	8009402 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80093de:	4413      	add	r3, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff fc19 	bl	8008c18 <ld_dword>
 80093e6:	4603      	mov	r3, r0
 80093e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80093ec:	617b      	str	r3, [r7, #20]
			break;
 80093ee:	e009      	b.n	8009404 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80093f0:	2301      	movs	r3, #1
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	e006      	b.n	8009404 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093f6:	bf00      	nop
 80093f8:	e004      	b.n	8009404 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093fa:	bf00      	nop
 80093fc:	e002      	b.n	8009404 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80093fe:	bf00      	nop
 8009400:	e000      	b.n	8009404 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009402:	bf00      	nop
		}
	}

	return val;
 8009404:	697b      	ldr	r3, [r7, #20]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800940e:	b590      	push	{r4, r7, lr}
 8009410:	b089      	sub	sp, #36	; 0x24
 8009412:	af00      	add	r7, sp, #0
 8009414:	60f8      	str	r0, [r7, #12]
 8009416:	60b9      	str	r1, [r7, #8]
 8009418:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800941a:	2302      	movs	r3, #2
 800941c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2b01      	cmp	r3, #1
 8009422:	f240 80d2 	bls.w	80095ca <put_fat+0x1bc>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	429a      	cmp	r2, r3
 800942e:	f080 80cc 	bcs.w	80095ca <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	2b03      	cmp	r3, #3
 8009438:	f000 8096 	beq.w	8009568 <put_fat+0x15a>
 800943c:	2b03      	cmp	r3, #3
 800943e:	f300 80cd 	bgt.w	80095dc <put_fat+0x1ce>
 8009442:	2b01      	cmp	r3, #1
 8009444:	d002      	beq.n	800944c <put_fat+0x3e>
 8009446:	2b02      	cmp	r3, #2
 8009448:	d06e      	beq.n	8009528 <put_fat+0x11a>
 800944a:	e0c7      	b.n	80095dc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	61bb      	str	r3, [r7, #24]
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	085b      	lsrs	r3, r3, #1
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	4413      	add	r3, r2
 8009458:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	0a5b      	lsrs	r3, r3, #9
 8009462:	4413      	add	r3, r2
 8009464:	4619      	mov	r1, r3
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f7ff fe6e 	bl	8009148 <move_window>
 800946c:	4603      	mov	r3, r0
 800946e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009470:	7ffb      	ldrb	r3, [r7, #31]
 8009472:	2b00      	cmp	r3, #0
 8009474:	f040 80ab 	bne.w	80095ce <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	1c59      	adds	r1, r3, #1
 8009482:	61b9      	str	r1, [r7, #24]
 8009484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009488:	4413      	add	r3, r2
 800948a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f003 0301 	and.w	r3, r3, #1
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00d      	beq.n	80094b2 <put_fat+0xa4>
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	b25b      	sxtb	r3, r3
 800949c:	f003 030f 	and.w	r3, r3, #15
 80094a0:	b25a      	sxtb	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	011b      	lsls	r3, r3, #4
 80094a8:	b25b      	sxtb	r3, r3
 80094aa:	4313      	orrs	r3, r2
 80094ac:	b25b      	sxtb	r3, r3
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	e001      	b.n	80094b6 <put_fat+0xa8>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2201      	movs	r2, #1
 80094be:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	0a5b      	lsrs	r3, r3, #9
 80094c8:	4413      	add	r3, r2
 80094ca:	4619      	mov	r1, r3
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff fe3b 	bl	8009148 <move_window>
 80094d2:	4603      	mov	r3, r0
 80094d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094d6:	7ffb      	ldrb	r3, [r7, #31]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d17a      	bne.n	80095d2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e8:	4413      	add	r3, r2
 80094ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <put_fat+0xf0>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	091b      	lsrs	r3, r3, #4
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	e00e      	b.n	800951c <put_fat+0x10e>
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	b25b      	sxtb	r3, r3
 8009504:	f023 030f 	bic.w	r3, r3, #15
 8009508:	b25a      	sxtb	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	0a1b      	lsrs	r3, r3, #8
 800950e:	b25b      	sxtb	r3, r3
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	b25b      	sxtb	r3, r3
 8009516:	4313      	orrs	r3, r2
 8009518:	b25b      	sxtb	r3, r3
 800951a:	b2db      	uxtb	r3, r3
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2201      	movs	r2, #1
 8009524:	70da      	strb	r2, [r3, #3]
			break;
 8009526:	e059      	b.n	80095dc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	0a1b      	lsrs	r3, r3, #8
 8009530:	4413      	add	r3, r2
 8009532:	4619      	mov	r1, r3
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f7ff fe07 	bl	8009148 <move_window>
 800953a:	4603      	mov	r3, r0
 800953c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800953e:	7ffb      	ldrb	r3, [r7, #31]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d148      	bne.n	80095d6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	005b      	lsls	r3, r3, #1
 800954e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009552:	4413      	add	r3, r2
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	b292      	uxth	r2, r2
 8009558:	4611      	mov	r1, r2
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff fb7f 	bl	8008c5e <st_word>
			fs->wflag = 1;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2201      	movs	r2, #1
 8009564:	70da      	strb	r2, [r3, #3]
			break;
 8009566:	e039      	b.n	80095dc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	09db      	lsrs	r3, r3, #7
 8009570:	4413      	add	r3, r2
 8009572:	4619      	mov	r1, r3
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f7ff fde7 	bl	8009148 <move_window>
 800957a:	4603      	mov	r3, r0
 800957c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800957e:	7ffb      	ldrb	r3, [r7, #31]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d12a      	bne.n	80095da <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009598:	4413      	add	r3, r2
 800959a:	4618      	mov	r0, r3
 800959c:	f7ff fb3c 	bl	8008c18 <ld_dword>
 80095a0:	4603      	mov	r3, r0
 80095a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80095a6:	4323      	orrs	r3, r4
 80095a8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80095b8:	4413      	add	r3, r2
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff fb69 	bl	8008c94 <st_dword>
			fs->wflag = 1;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2201      	movs	r2, #1
 80095c6:	70da      	strb	r2, [r3, #3]
			break;
 80095c8:	e008      	b.n	80095dc <put_fat+0x1ce>
		}
	}
 80095ca:	bf00      	nop
 80095cc:	e006      	b.n	80095dc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80095ce:	bf00      	nop
 80095d0:	e004      	b.n	80095dc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80095d2:	bf00      	nop
 80095d4:	e002      	b.n	80095dc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80095d6:	bf00      	nop
 80095d8:	e000      	b.n	80095dc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80095da:	bf00      	nop
	return res;
 80095dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3724      	adds	r7, #36	; 0x24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd90      	pop	{r4, r7, pc}

080095e6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b088      	sub	sp, #32
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	60f8      	str	r0, [r7, #12]
 80095ee:	60b9      	str	r1, [r7, #8]
 80095f0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d904      	bls.n	800960c <remove_chain+0x26>
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	429a      	cmp	r2, r3
 800960a:	d301      	bcc.n	8009610 <remove_chain+0x2a>
 800960c:	2302      	movs	r3, #2
 800960e:	e04b      	b.n	80096a8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00c      	beq.n	8009630 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009616:	f04f 32ff 	mov.w	r2, #4294967295
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	69b8      	ldr	r0, [r7, #24]
 800961e:	f7ff fef6 	bl	800940e <put_fat>
 8009622:	4603      	mov	r3, r0
 8009624:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009626:	7ffb      	ldrb	r3, [r7, #31]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <remove_chain+0x4a>
 800962c:	7ffb      	ldrb	r3, [r7, #31]
 800962e:	e03b      	b.n	80096a8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009630:	68b9      	ldr	r1, [r7, #8]
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f7ff fe43 	bl	80092be <get_fat>
 8009638:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d031      	beq.n	80096a4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d101      	bne.n	800964a <remove_chain+0x64>
 8009646:	2302      	movs	r3, #2
 8009648:	e02e      	b.n	80096a8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d101      	bne.n	8009656 <remove_chain+0x70>
 8009652:	2301      	movs	r3, #1
 8009654:	e028      	b.n	80096a8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009656:	2200      	movs	r2, #0
 8009658:	68b9      	ldr	r1, [r7, #8]
 800965a:	69b8      	ldr	r0, [r7, #24]
 800965c:	f7ff fed7 	bl	800940e <put_fat>
 8009660:	4603      	mov	r3, r0
 8009662:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009664:	7ffb      	ldrb	r3, [r7, #31]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <remove_chain+0x88>
 800966a:	7ffb      	ldrb	r3, [r7, #31]
 800966c:	e01c      	b.n	80096a8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	695a      	ldr	r2, [r3, #20]
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	3b02      	subs	r3, #2
 8009678:	429a      	cmp	r2, r3
 800967a:	d20b      	bcs.n	8009694 <remove_chain+0xae>
			fs->free_clst++;
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	791b      	ldrb	r3, [r3, #4]
 800968a:	f043 0301 	orr.w	r3, r3, #1
 800968e:	b2da      	uxtb	r2, r3
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d3c6      	bcc.n	8009630 <remove_chain+0x4a>
 80096a2:	e000      	b.n	80096a6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80096a4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3720      	adds	r7, #32
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10d      	bne.n	80096e2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d004      	beq.n	80096dc <create_chain+0x2c>
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	69ba      	ldr	r2, [r7, #24]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d31b      	bcc.n	8009714 <create_chain+0x64>
 80096dc:	2301      	movs	r3, #1
 80096de:	61bb      	str	r3, [r7, #24]
 80096e0:	e018      	b.n	8009714 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff fdea 	bl	80092be <get_fat>
 80096ea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d801      	bhi.n	80096f6 <create_chain+0x46>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e070      	b.n	80097d8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fc:	d101      	bne.n	8009702 <create_chain+0x52>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	e06a      	b.n	80097d8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	429a      	cmp	r2, r3
 800970a:	d201      	bcs.n	8009710 <create_chain+0x60>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	e063      	b.n	80097d8 <create_chain+0x128>
		scl = clst;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	3301      	adds	r3, #1
 800971c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	699b      	ldr	r3, [r3, #24]
 8009722:	69fa      	ldr	r2, [r7, #28]
 8009724:	429a      	cmp	r2, r3
 8009726:	d307      	bcc.n	8009738 <create_chain+0x88>
				ncl = 2;
 8009728:	2302      	movs	r3, #2
 800972a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800972c:	69fa      	ldr	r2, [r7, #28]
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	429a      	cmp	r2, r3
 8009732:	d901      	bls.n	8009738 <create_chain+0x88>
 8009734:	2300      	movs	r3, #0
 8009736:	e04f      	b.n	80097d8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009738:	69f9      	ldr	r1, [r7, #28]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff fdbf 	bl	80092be <get_fat>
 8009740:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00e      	beq.n	8009766 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d003      	beq.n	8009756 <create_chain+0xa6>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009754:	d101      	bne.n	800975a <create_chain+0xaa>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	e03e      	b.n	80097d8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800975a:	69fa      	ldr	r2, [r7, #28]
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	429a      	cmp	r2, r3
 8009760:	d1da      	bne.n	8009718 <create_chain+0x68>
 8009762:	2300      	movs	r3, #0
 8009764:	e038      	b.n	80097d8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009766:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009768:	f04f 32ff 	mov.w	r2, #4294967295
 800976c:	69f9      	ldr	r1, [r7, #28]
 800976e:	6938      	ldr	r0, [r7, #16]
 8009770:	f7ff fe4d 	bl	800940e <put_fat>
 8009774:	4603      	mov	r3, r0
 8009776:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009778:	7dfb      	ldrb	r3, [r7, #23]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d109      	bne.n	8009792 <create_chain+0xe2>
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d006      	beq.n	8009792 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009784:	69fa      	ldr	r2, [r7, #28]
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6938      	ldr	r0, [r7, #16]
 800978a:	f7ff fe40 	bl	800940e <put_fat>
 800978e:	4603      	mov	r3, r0
 8009790:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d116      	bne.n	80097c6 <create_chain+0x116>
		fs->last_clst = ncl;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	69fa      	ldr	r2, [r7, #28]
 800979c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	695a      	ldr	r2, [r3, #20]
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	3b02      	subs	r3, #2
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d804      	bhi.n	80097b6 <create_chain+0x106>
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	1e5a      	subs	r2, r3, #1
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	791b      	ldrb	r3, [r3, #4]
 80097ba:	f043 0301 	orr.w	r3, r3, #1
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	711a      	strb	r2, [r3, #4]
 80097c4:	e007      	b.n	80097d6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d102      	bne.n	80097d2 <create_chain+0x122>
 80097cc:	f04f 33ff 	mov.w	r3, #4294967295
 80097d0:	e000      	b.n	80097d4 <create_chain+0x124>
 80097d2:	2301      	movs	r3, #1
 80097d4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80097d6:	69fb      	ldr	r3, [r7, #28]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3720      	adds	r7, #32
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b087      	sub	sp, #28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	3304      	adds	r3, #4
 80097f6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	0a5b      	lsrs	r3, r3, #9
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	8952      	ldrh	r2, [r2, #10]
 8009800:	fbb3 f3f2 	udiv	r3, r3, r2
 8009804:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	1d1a      	adds	r2, r3, #4
 800980a:	613a      	str	r2, [r7, #16]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <clmt_clust+0x3a>
 8009816:	2300      	movs	r3, #0
 8009818:	e010      	b.n	800983c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	429a      	cmp	r2, r3
 8009820:	d307      	bcc.n	8009832 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	617b      	str	r3, [r7, #20]
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	3304      	adds	r3, #4
 800982e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009830:	e7e9      	b.n	8009806 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009832:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	4413      	add	r3, r2
}
 800983c:	4618      	mov	r0, r3
 800983e:	371c      	adds	r7, #28
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800985e:	d204      	bcs.n	800986a <dir_sdi+0x22>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	f003 031f 	and.w	r3, r3, #31
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <dir_sdi+0x26>
		return FR_INT_ERR;
 800986a:	2302      	movs	r3, #2
 800986c:	e063      	b.n	8009936 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d106      	bne.n	800988e <dir_sdi+0x46>
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	2b02      	cmp	r3, #2
 8009886:	d902      	bls.n	800988e <dir_sdi+0x46>
		clst = fs->dirbase;
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10c      	bne.n	80098ae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	095b      	lsrs	r3, r3, #5
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	8912      	ldrh	r2, [r2, #8]
 800989c:	4293      	cmp	r3, r2
 800989e:	d301      	bcc.n	80098a4 <dir_sdi+0x5c>
 80098a0:	2302      	movs	r3, #2
 80098a2:	e048      	b.n	8009936 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	61da      	str	r2, [r3, #28]
 80098ac:	e029      	b.n	8009902 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	895b      	ldrh	r3, [r3, #10]
 80098b2:	025b      	lsls	r3, r3, #9
 80098b4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80098b6:	e019      	b.n	80098ec <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6979      	ldr	r1, [r7, #20]
 80098bc:	4618      	mov	r0, r3
 80098be:	f7ff fcfe 	bl	80092be <get_fat>
 80098c2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ca:	d101      	bne.n	80098d0 <dir_sdi+0x88>
 80098cc:	2301      	movs	r3, #1
 80098ce:	e032      	b.n	8009936 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d904      	bls.n	80098e0 <dir_sdi+0x98>
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d301      	bcc.n	80098e4 <dir_sdi+0x9c>
 80098e0:	2302      	movs	r3, #2
 80098e2:	e028      	b.n	8009936 <dir_sdi+0xee>
			ofs -= csz;
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d2e1      	bcs.n	80098b8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80098f4:	6979      	ldr	r1, [r7, #20]
 80098f6:	6938      	ldr	r0, [r7, #16]
 80098f8:	f7ff fcc2 	bl	8009280 <clust2sect>
 80098fc:	4602      	mov	r2, r0
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <dir_sdi+0xcc>
 8009910:	2302      	movs	r3, #2
 8009912:	e010      	b.n	8009936 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	69da      	ldr	r2, [r3, #28]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	0a5b      	lsrs	r3, r3, #9
 800991c:	441a      	add	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992e:	441a      	add	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b086      	sub	sp, #24
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	3320      	adds	r3, #32
 8009954:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <dir_next+0x28>
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009964:	d301      	bcc.n	800996a <dir_next+0x2c>
 8009966:	2304      	movs	r3, #4
 8009968:	e0aa      	b.n	8009ac0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009970:	2b00      	cmp	r3, #0
 8009972:	f040 8098 	bne.w	8009aa6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10b      	bne.n	80099a0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	095b      	lsrs	r3, r3, #5
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	8912      	ldrh	r2, [r2, #8]
 8009990:	4293      	cmp	r3, r2
 8009992:	f0c0 8088 	bcc.w	8009aa6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	61da      	str	r2, [r3, #28]
 800999c:	2304      	movs	r3, #4
 800999e:	e08f      	b.n	8009ac0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	0a5b      	lsrs	r3, r3, #9
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	8952      	ldrh	r2, [r2, #10]
 80099a8:	3a01      	subs	r2, #1
 80099aa:	4013      	ands	r3, r2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d17a      	bne.n	8009aa6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	4619      	mov	r1, r3
 80099b8:	4610      	mov	r0, r2
 80099ba:	f7ff fc80 	bl	80092be <get_fat>
 80099be:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d801      	bhi.n	80099ca <dir_next+0x8c>
 80099c6:	2302      	movs	r3, #2
 80099c8:	e07a      	b.n	8009ac0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d0:	d101      	bne.n	80099d6 <dir_next+0x98>
 80099d2:	2301      	movs	r3, #1
 80099d4:	e074      	b.n	8009ac0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d358      	bcc.n	8009a92 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d104      	bne.n	80099f0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	61da      	str	r2, [r3, #28]
 80099ec:	2304      	movs	r3, #4
 80099ee:	e067      	b.n	8009ac0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	4619      	mov	r1, r3
 80099f8:	4610      	mov	r0, r2
 80099fa:	f7ff fe59 	bl	80096b0 <create_chain>
 80099fe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <dir_next+0xcc>
 8009a06:	2307      	movs	r3, #7
 8009a08:	e05a      	b.n	8009ac0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d101      	bne.n	8009a14 <dir_next+0xd6>
 8009a10:	2302      	movs	r3, #2
 8009a12:	e055      	b.n	8009ac0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1a:	d101      	bne.n	8009a20 <dir_next+0xe2>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e04f      	b.n	8009ac0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f7ff fb4d 	bl	80090c0 <sync_window>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <dir_next+0xf2>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e047      	b.n	8009ac0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	3334      	adds	r3, #52	; 0x34
 8009a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a38:	2100      	movs	r1, #0
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff f977 	bl	8008d2e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009a40:	2300      	movs	r3, #0
 8009a42:	613b      	str	r3, [r7, #16]
 8009a44:	6979      	ldr	r1, [r7, #20]
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f7ff fc1a 	bl	8009280 <clust2sect>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	631a      	str	r2, [r3, #48]	; 0x30
 8009a52:	e012      	b.n	8009a7a <dir_next+0x13c>
						fs->wflag = 1;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2201      	movs	r2, #1
 8009a58:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f7ff fb30 	bl	80090c0 <sync_window>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <dir_next+0x12c>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e02a      	b.n	8009ac0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	613b      	str	r3, [r7, #16]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a74:	1c5a      	adds	r2, r3, #1
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	631a      	str	r2, [r3, #48]	; 0x30
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	895b      	ldrh	r3, [r3, #10]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d3e6      	bcc.n	8009a54 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	1ad2      	subs	r2, r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009a98:	6979      	ldr	r1, [r7, #20]
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f7ff fbf0 	bl	8009280 <clust2sect>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab8:	441a      	add	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3718      	adds	r7, #24
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009ad8:	2100      	movs	r1, #0
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7ff feb4 	bl	8009848 <dir_sdi>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009ae4:	7dfb      	ldrb	r3, [r7, #23]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d12b      	bne.n	8009b42 <dir_alloc+0x7a>
		n = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	4619      	mov	r1, r3
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f7ff fb27 	bl	8009148 <move_window>
 8009afa:	4603      	mov	r3, r0
 8009afc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d11d      	bne.n	8009b40 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a1b      	ldr	r3, [r3, #32]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2be5      	cmp	r3, #229	; 0xe5
 8009b0c:	d004      	beq.n	8009b18 <dir_alloc+0x50>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d107      	bne.n	8009b28 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	613b      	str	r3, [r7, #16]
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d102      	bne.n	8009b2c <dir_alloc+0x64>
 8009b26:	e00c      	b.n	8009b42 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009b28:	2300      	movs	r3, #0
 8009b2a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7ff ff05 	bl	800993e <dir_next>
 8009b34:	4603      	mov	r3, r0
 8009b36:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d0d7      	beq.n	8009aee <dir_alloc+0x26>
 8009b3e:	e000      	b.n	8009b42 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009b40:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009b42:	7dfb      	ldrb	r3, [r7, #23]
 8009b44:	2b04      	cmp	r3, #4
 8009b46:	d101      	bne.n	8009b4c <dir_alloc+0x84>
 8009b48:	2307      	movs	r3, #7
 8009b4a:	75fb      	strb	r3, [r7, #23]
	return res;
 8009b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	331a      	adds	r3, #26
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff f83f 	bl	8008be8 <ld_word>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	d109      	bne.n	8009b8a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	3314      	adds	r3, #20
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff f834 	bl	8008be8 <ld_word>
 8009b80:	4603      	mov	r3, r0
 8009b82:	041b      	lsls	r3, r3, #16
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	331a      	adds	r3, #26
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	b292      	uxth	r2, r2
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7ff f857 	bl	8008c5e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d109      	bne.n	8009bcc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	f103 0214 	add.w	r2, r3, #20
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	0c1b      	lsrs	r3, r3, #16
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	f7ff f849 	bl	8008c5e <st_word>
	}
}
 8009bcc:	bf00      	nop
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009bd4:	b590      	push	{r4, r7, lr}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	331a      	adds	r3, #26
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff f800 	bl	8008be8 <ld_word>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <cmp_lfn+0x1e>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e059      	b.n	8009ca6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bfa:	1e5a      	subs	r2, r3, #1
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	4413      	add	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009c08:	2301      	movs	r3, #1
 8009c0a:	81fb      	strh	r3, [r7, #14]
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	613b      	str	r3, [r7, #16]
 8009c10:	e033      	b.n	8009c7a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009c12:	4a27      	ldr	r2, [pc, #156]	; (8009cb0 <cmp_lfn+0xdc>)
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	4413      	add	r3, r2
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	4413      	add	r3, r2
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fe ffe1 	bl	8008be8 <ld_word>
 8009c26:	4603      	mov	r3, r0
 8009c28:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009c2a:	89fb      	ldrh	r3, [r7, #14]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d01a      	beq.n	8009c66 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	2bfe      	cmp	r3, #254	; 0xfe
 8009c34:	d812      	bhi.n	8009c5c <cmp_lfn+0x88>
 8009c36:	89bb      	ldrh	r3, [r7, #12]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f001 fe25 	bl	800b888 <ff_wtoupper>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	461c      	mov	r4, r3
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	617a      	str	r2, [r7, #20]
 8009c48:	005b      	lsls	r3, r3, #1
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	881b      	ldrh	r3, [r3, #0]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f001 fe19 	bl	800b888 <ff_wtoupper>
 8009c56:	4603      	mov	r3, r0
 8009c58:	429c      	cmp	r4, r3
 8009c5a:	d001      	beq.n	8009c60 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	e022      	b.n	8009ca6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8009c60:	89bb      	ldrh	r3, [r7, #12]
 8009c62:	81fb      	strh	r3, [r7, #14]
 8009c64:	e006      	b.n	8009c74 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009c66:	89bb      	ldrh	r3, [r7, #12]
 8009c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d001      	beq.n	8009c74 <cmp_lfn+0xa0>
 8009c70:	2300      	movs	r3, #0
 8009c72:	e018      	b.n	8009ca6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	3301      	adds	r3, #1
 8009c78:	613b      	str	r3, [r7, #16]
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b0c      	cmp	r3, #12
 8009c7e:	d9c8      	bls.n	8009c12 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00b      	beq.n	8009ca4 <cmp_lfn+0xd0>
 8009c8c:	89fb      	ldrh	r3, [r7, #14]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d008      	beq.n	8009ca4 <cmp_lfn+0xd0>
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	005b      	lsls	r3, r3, #1
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	4413      	add	r3, r2
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <cmp_lfn+0xd0>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e000      	b.n	8009ca6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009ca4:	2301      	movs	r3, #1
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	371c      	adds	r7, #28
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd90      	pop	{r4, r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	0800bb40 	.word	0x0800bb40

08009cb4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	71fb      	strb	r3, [r7, #7]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	330d      	adds	r3, #13
 8009cce:	79ba      	ldrb	r2, [r7, #6]
 8009cd0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	330b      	adds	r3, #11
 8009cd6:	220f      	movs	r2, #15
 8009cd8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	330c      	adds	r3, #12
 8009cde:	2200      	movs	r2, #0
 8009ce0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	331a      	adds	r3, #26
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fe ffb8 	bl	8008c5e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009cee:	79fb      	ldrb	r3, [r7, #7]
 8009cf0:	1e5a      	subs	r2, r3, #1
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	005b      	lsls	r3, r3, #1
 8009cf6:	4413      	add	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	82fb      	strh	r3, [r7, #22]
 8009d02:	2300      	movs	r3, #0
 8009d04:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009d06:	8afb      	ldrh	r3, [r7, #22]
 8009d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d007      	beq.n	8009d20 <put_lfn+0x6c>
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	1c5a      	adds	r2, r3, #1
 8009d14:	61fa      	str	r2, [r7, #28]
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	881b      	ldrh	r3, [r3, #0]
 8009d1e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009d20:	4a17      	ldr	r2, [pc, #92]	; (8009d80 <put_lfn+0xcc>)
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	4413      	add	r3, r2
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	8afa      	ldrh	r2, [r7, #22]
 8009d30:	4611      	mov	r1, r2
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fe ff93 	bl	8008c5e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009d38:	8afb      	ldrh	r3, [r7, #22]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d102      	bne.n	8009d44 <put_lfn+0x90>
 8009d3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d42:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	3301      	adds	r3, #1
 8009d48:	61bb      	str	r3, [r7, #24]
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	2b0c      	cmp	r3, #12
 8009d4e:	d9da      	bls.n	8009d06 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009d50:	8afb      	ldrh	r3, [r7, #22]
 8009d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d006      	beq.n	8009d68 <put_lfn+0xb4>
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	4413      	add	r3, r2
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d103      	bne.n	8009d70 <put_lfn+0xbc>
 8009d68:	79fb      	ldrb	r3, [r7, #7]
 8009d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d6e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	79fa      	ldrb	r2, [r7, #7]
 8009d74:	701a      	strb	r2, [r3, #0]
}
 8009d76:	bf00      	nop
 8009d78:	3720      	adds	r7, #32
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	0800bb40 	.word	0x0800bb40

08009d84 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b08c      	sub	sp, #48	; 0x30
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
 8009d90:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009d92:	220b      	movs	r2, #11
 8009d94:	68b9      	ldr	r1, [r7, #8]
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f7fe ffa8 	bl	8008cec <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	2b05      	cmp	r3, #5
 8009da0:	d929      	bls.n	8009df6 <gen_numname+0x72>
		sr = seq;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009da6:	e020      	b.n	8009dea <gen_numname+0x66>
			wc = *lfn++;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	1c9a      	adds	r2, r3, #2
 8009dac:	607a      	str	r2, [r7, #4]
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009db2:	2300      	movs	r3, #0
 8009db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009db6:	e015      	b.n	8009de4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	005a      	lsls	r2, r3, #1
 8009dbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	4413      	add	r3, r2
 8009dc4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009dc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009dc8:	085b      	lsrs	r3, r3, #1
 8009dca:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <gen_numname+0x5a>
 8009dd6:	69fa      	ldr	r2, [r7, #28]
 8009dd8:	4b30      	ldr	r3, [pc, #192]	; (8009e9c <gen_numname+0x118>)
 8009dda:	4053      	eors	r3, r2
 8009ddc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de0:	3301      	adds	r3, #1
 8009de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	2b0f      	cmp	r3, #15
 8009de8:	d9e6      	bls.n	8009db8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1da      	bne.n	8009da8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009df6:	2307      	movs	r3, #7
 8009df8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	f003 030f 	and.w	r3, r3, #15
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	3330      	adds	r3, #48	; 0x30
 8009e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e0e:	2b39      	cmp	r3, #57	; 0x39
 8009e10:	d904      	bls.n	8009e1c <gen_numname+0x98>
 8009e12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e16:	3307      	adds	r3, #7
 8009e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	1e5a      	subs	r2, r3, #1
 8009e20:	62ba      	str	r2, [r7, #40]	; 0x28
 8009e22:	3330      	adds	r3, #48	; 0x30
 8009e24:	443b      	add	r3, r7
 8009e26:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009e2a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	091b      	lsrs	r3, r3, #4
 8009e32:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1df      	bne.n	8009dfa <gen_numname+0x76>
	ns[i] = '~';
 8009e3a:	f107 0214 	add.w	r2, r7, #20
 8009e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e40:	4413      	add	r3, r2
 8009e42:	227e      	movs	r2, #126	; 0x7e
 8009e44:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009e46:	2300      	movs	r3, #0
 8009e48:	627b      	str	r3, [r7, #36]	; 0x24
 8009e4a:	e002      	b.n	8009e52 <gen_numname+0xce>
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	3301      	adds	r3, #1
 8009e50:	627b      	str	r3, [r7, #36]	; 0x24
 8009e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d205      	bcs.n	8009e66 <gen_numname+0xe2>
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	4413      	add	r3, r2
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	2b20      	cmp	r3, #32
 8009e64:	d1f2      	bne.n	8009e4c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e68:	2b07      	cmp	r3, #7
 8009e6a:	d807      	bhi.n	8009e7c <gen_numname+0xf8>
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	62ba      	str	r2, [r7, #40]	; 0x28
 8009e72:	3330      	adds	r3, #48	; 0x30
 8009e74:	443b      	add	r3, r7
 8009e76:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009e7a:	e000      	b.n	8009e7e <gen_numname+0xfa>
 8009e7c:	2120      	movs	r1, #32
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	1c5a      	adds	r2, r3, #1
 8009e82:	627a      	str	r2, [r7, #36]	; 0x24
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	4413      	add	r3, r2
 8009e88:	460a      	mov	r2, r1
 8009e8a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	2b07      	cmp	r3, #7
 8009e90:	d9e9      	bls.n	8009e66 <gen_numname+0xe2>
}
 8009e92:	bf00      	nop
 8009e94:	bf00      	nop
 8009e96:	3730      	adds	r7, #48	; 0x30
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	00011021 	.word	0x00011021

08009ea0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009eac:	230b      	movs	r3, #11
 8009eae:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
 8009eb2:	b2da      	uxtb	r2, r3
 8009eb4:	0852      	lsrs	r2, r2, #1
 8009eb6:	01db      	lsls	r3, r3, #7
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	1c59      	adds	r1, r3, #1
 8009ec0:	6079      	str	r1, [r7, #4]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	60bb      	str	r3, [r7, #8]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1ed      	bne.n	8009eb0 <sum_sfn+0x10>
	return sum;
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b086      	sub	sp, #24
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7ff fca8 	bl	8009848 <dir_sdi>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <dir_find+0x24>
 8009f02:	7dfb      	ldrb	r3, [r7, #23]
 8009f04:	e0a9      	b.n	800a05a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009f06:	23ff      	movs	r3, #255	; 0xff
 8009f08:	753b      	strb	r3, [r7, #20]
 8009f0a:	7d3b      	ldrb	r3, [r7, #20]
 8009f0c:	757b      	strb	r3, [r7, #21]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f04f 32ff 	mov.w	r2, #4294967295
 8009f14:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6938      	ldr	r0, [r7, #16]
 8009f1e:	f7ff f913 	bl	8009148 <move_window>
 8009f22:	4603      	mov	r3, r0
 8009f24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009f26:	7dfb      	ldrb	r3, [r7, #23]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f040 8090 	bne.w	800a04e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009f36:	7dbb      	ldrb	r3, [r7, #22]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d102      	bne.n	8009f42 <dir_find+0x60>
 8009f3c:	2304      	movs	r3, #4
 8009f3e:	75fb      	strb	r3, [r7, #23]
 8009f40:	e08a      	b.n	800a058 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	330b      	adds	r3, #11
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f4e:	73fb      	strb	r3, [r7, #15]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	7bfa      	ldrb	r2, [r7, #15]
 8009f54:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009f56:	7dbb      	ldrb	r3, [r7, #22]
 8009f58:	2be5      	cmp	r3, #229	; 0xe5
 8009f5a:	d007      	beq.n	8009f6c <dir_find+0x8a>
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
 8009f5e:	f003 0308 	and.w	r3, r3, #8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d009      	beq.n	8009f7a <dir_find+0x98>
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	2b0f      	cmp	r3, #15
 8009f6a:	d006      	beq.n	8009f7a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009f6c:	23ff      	movs	r3, #255	; 0xff
 8009f6e:	757b      	strb	r3, [r7, #21]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f04f 32ff 	mov.w	r2, #4294967295
 8009f76:	631a      	str	r2, [r3, #48]	; 0x30
 8009f78:	e05e      	b.n	800a038 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	2b0f      	cmp	r3, #15
 8009f7e:	d136      	bne.n	8009fee <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d154      	bne.n	800a038 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009f8e:	7dbb      	ldrb	r3, [r7, #22]
 8009f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00d      	beq.n	8009fb4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a1b      	ldr	r3, [r3, #32]
 8009f9c:	7b5b      	ldrb	r3, [r3, #13]
 8009f9e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009fa0:	7dbb      	ldrb	r3, [r7, #22]
 8009fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fa6:	75bb      	strb	r3, [r7, #22]
 8009fa8:	7dbb      	ldrb	r3, [r7, #22]
 8009faa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	695a      	ldr	r2, [r3, #20]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009fb4:	7dba      	ldrb	r2, [r7, #22]
 8009fb6:	7d7b      	ldrb	r3, [r7, #21]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d115      	bne.n	8009fe8 <dir_find+0x106>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a1b      	ldr	r3, [r3, #32]
 8009fc0:	330d      	adds	r3, #13
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	7d3a      	ldrb	r2, [r7, #20]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d10e      	bne.n	8009fe8 <dir_find+0x106>
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	68da      	ldr	r2, [r3, #12]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	f7ff fdfd 	bl	8009bd4 <cmp_lfn>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d003      	beq.n	8009fe8 <dir_find+0x106>
 8009fe0:	7d7b      	ldrb	r3, [r7, #21]
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	e000      	b.n	8009fea <dir_find+0x108>
 8009fe8:	23ff      	movs	r3, #255	; 0xff
 8009fea:	757b      	strb	r3, [r7, #21]
 8009fec:	e024      	b.n	800a038 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009fee:	7d7b      	ldrb	r3, [r7, #21]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d109      	bne.n	800a008 <dir_find+0x126>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a1b      	ldr	r3, [r3, #32]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7ff ff51 	bl	8009ea0 <sum_sfn>
 8009ffe:	4603      	mov	r3, r0
 800a000:	461a      	mov	r2, r3
 800a002:	7d3b      	ldrb	r3, [r7, #20]
 800a004:	4293      	cmp	r3, r2
 800a006:	d024      	beq.n	800a052 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <dir_find+0x14a>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a18      	ldr	r0, [r3, #32]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	3324      	adds	r3, #36	; 0x24
 800a01e:	220b      	movs	r2, #11
 800a020:	4619      	mov	r1, r3
 800a022:	f7fe fe9f 	bl	8008d64 <mem_cmp>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d014      	beq.n	800a056 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a02c:	23ff      	movs	r3, #255	; 0xff
 800a02e:	757b      	strb	r3, [r7, #21]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f04f 32ff 	mov.w	r2, #4294967295
 800a036:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a038:	2100      	movs	r1, #0
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7ff fc7f 	bl	800993e <dir_next>
 800a040:	4603      	mov	r3, r0
 800a042:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a044:	7dfb      	ldrb	r3, [r7, #23]
 800a046:	2b00      	cmp	r3, #0
 800a048:	f43f af65 	beq.w	8009f16 <dir_find+0x34>
 800a04c:	e004      	b.n	800a058 <dir_find+0x176>
		if (res != FR_OK) break;
 800a04e:	bf00      	nop
 800a050:	e002      	b.n	800a058 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a052:	bf00      	nop
 800a054:	e000      	b.n	800a058 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a056:	bf00      	nop

	return res;
 800a058:	7dfb      	ldrb	r3, [r7, #23]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
	...

0800a064 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b08c      	sub	sp, #48	; 0x30
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a078:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <dir_register+0x20>
 800a080:	2306      	movs	r3, #6
 800a082:	e0e0      	b.n	800a246 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a084:	2300      	movs	r3, #0
 800a086:	627b      	str	r3, [r7, #36]	; 0x24
 800a088:	e002      	b.n	800a090 <dir_register+0x2c>
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	3301      	adds	r3, #1
 800a08e:	627b      	str	r3, [r7, #36]	; 0x24
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	68da      	ldr	r2, [r3, #12]
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	4413      	add	r3, r2
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d1f4      	bne.n	800a08a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a0a6:	f107 030c 	add.w	r3, r7, #12
 800a0aa:	220c      	movs	r2, #12
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe fe1d 	bl	8008cec <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a0b2:	7dfb      	ldrb	r3, [r7, #23]
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d032      	beq.n	800a122 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2240      	movs	r2, #64	; 0x40
 800a0c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0c8:	e016      	b.n	800a0f8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	68da      	ldr	r2, [r3, #12]
 800a0d4:	f107 010c 	add.w	r1, r7, #12
 800a0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0da:	f7ff fe53 	bl	8009d84 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7ff feff 	bl	8009ee2 <dir_find>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a0ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d106      	bne.n	800a100 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	2b63      	cmp	r3, #99	; 0x63
 800a0fc:	d9e5      	bls.n	800a0ca <dir_register+0x66>
 800a0fe:	e000      	b.n	800a102 <dir_register+0x9e>
			if (res != FR_OK) break;
 800a100:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	2b64      	cmp	r3, #100	; 0x64
 800a106:	d101      	bne.n	800a10c <dir_register+0xa8>
 800a108:	2307      	movs	r3, #7
 800a10a:	e09c      	b.n	800a246 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a10c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a110:	2b04      	cmp	r3, #4
 800a112:	d002      	beq.n	800a11a <dir_register+0xb6>
 800a114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a118:	e095      	b.n	800a246 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a11a:	7dfa      	ldrb	r2, [r7, #23]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a122:	7dfb      	ldrb	r3, [r7, #23]
 800a124:	f003 0302 	and.w	r3, r3, #2
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d007      	beq.n	800a13c <dir_register+0xd8>
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	330c      	adds	r3, #12
 800a130:	4a47      	ldr	r2, [pc, #284]	; (800a250 <dir_register+0x1ec>)
 800a132:	fba2 2303 	umull	r2, r3, r2, r3
 800a136:	089b      	lsrs	r3, r3, #2
 800a138:	3301      	adds	r3, #1
 800a13a:	e000      	b.n	800a13e <dir_register+0xda>
 800a13c:	2301      	movs	r3, #1
 800a13e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a140:	6a39      	ldr	r1, [r7, #32]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7ff fcc0 	bl	8009ac8 <dir_alloc>
 800a148:	4603      	mov	r3, r0
 800a14a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a14e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a152:	2b00      	cmp	r3, #0
 800a154:	d148      	bne.n	800a1e8 <dir_register+0x184>
 800a156:	6a3b      	ldr	r3, [r7, #32]
 800a158:	3b01      	subs	r3, #1
 800a15a:	623b      	str	r3, [r7, #32]
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d042      	beq.n	800a1e8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	695a      	ldr	r2, [r3, #20]
 800a166:	6a3b      	ldr	r3, [r7, #32]
 800a168:	015b      	lsls	r3, r3, #5
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7ff fb6a 	bl	8009848 <dir_sdi>
 800a174:	4603      	mov	r3, r0
 800a176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a17a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d132      	bne.n	800a1e8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3324      	adds	r3, #36	; 0x24
 800a186:	4618      	mov	r0, r3
 800a188:	f7ff fe8a 	bl	8009ea0 <sum_sfn>
 800a18c:	4603      	mov	r3, r0
 800a18e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	69db      	ldr	r3, [r3, #28]
 800a194:	4619      	mov	r1, r3
 800a196:	69f8      	ldr	r0, [r7, #28]
 800a198:	f7fe ffd6 	bl	8009148 <move_window>
 800a19c:	4603      	mov	r3, r0
 800a19e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a1a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d11d      	bne.n	800a1e6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	68d8      	ldr	r0, [r3, #12]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a19      	ldr	r1, [r3, #32]
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	7efb      	ldrb	r3, [r7, #27]
 800a1b8:	f7ff fd7c 	bl	8009cb4 <put_lfn>
				fs->wflag = 1;
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff fbba 	bl	800993e <dir_next>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a1d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d107      	bne.n	800a1e8 <dir_register+0x184>
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	623b      	str	r3, [r7, #32]
 800a1de:	6a3b      	ldr	r3, [r7, #32]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1d5      	bne.n	800a190 <dir_register+0x12c>
 800a1e4:	e000      	b.n	800a1e8 <dir_register+0x184>
				if (res != FR_OK) break;
 800a1e6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a1e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d128      	bne.n	800a242 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	69db      	ldr	r3, [r3, #28]
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	69f8      	ldr	r0, [r7, #28]
 800a1f8:	f7fe ffa6 	bl	8009148 <move_window>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a206:	2b00      	cmp	r3, #0
 800a208:	d11b      	bne.n	800a242 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	2220      	movs	r2, #32
 800a210:	2100      	movs	r1, #0
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe fd8b 	bl	8008d2e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a18      	ldr	r0, [r3, #32]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	3324      	adds	r3, #36	; 0x24
 800a220:	220b      	movs	r2, #11
 800a222:	4619      	mov	r1, r3
 800a224:	f7fe fd62 	bl	8008cec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	330c      	adds	r3, #12
 800a234:	f002 0218 	and.w	r2, r2, #24
 800a238:	b2d2      	uxtb	r2, r2
 800a23a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	2201      	movs	r2, #1
 800a240:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a246:	4618      	mov	r0, r3
 800a248:	3730      	adds	r7, #48	; 0x30
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	4ec4ec4f 	.word	0x4ec4ec4f

0800a254 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b088      	sub	sp, #32
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	2200      	movs	r2, #0
 800a268:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 80c9 	beq.w	800a406 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27c:	d032      	beq.n	800a2e4 <get_fileinfo+0x90>
			i = j = 0;
 800a27e:	2300      	movs	r3, #0
 800a280:	61bb      	str	r3, [r7, #24]
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a286:	e01b      	b.n	800a2c0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800a288:	89fb      	ldrh	r3, [r7, #14]
 800a28a:	2100      	movs	r1, #0
 800a28c:	4618      	mov	r0, r3
 800a28e:	f001 fabf 	bl	800b810 <ff_convert>
 800a292:	4603      	mov	r3, r0
 800a294:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800a296:	89fb      	ldrh	r3, [r7, #14]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d102      	bne.n	800a2a2 <get_fileinfo+0x4e>
 800a29c:	2300      	movs	r3, #0
 800a29e:	61fb      	str	r3, [r7, #28]
 800a2a0:	e01a      	b.n	800a2d8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	2bfe      	cmp	r3, #254	; 0xfe
 800a2a6:	d902      	bls.n	800a2ae <get_fileinfo+0x5a>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	61fb      	str	r3, [r7, #28]
 800a2ac:	e014      	b.n	800a2d8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	1c5a      	adds	r2, r3, #1
 800a2b2:	61fa      	str	r2, [r7, #28]
 800a2b4:	89fa      	ldrh	r2, [r7, #14]
 800a2b6:	b2d1      	uxtb	r1, r2
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	460a      	mov	r2, r1
 800a2be:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	68da      	ldr	r2, [r3, #12]
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	1c59      	adds	r1, r3, #1
 800a2c8:	61b9      	str	r1, [r7, #24]
 800a2ca:	005b      	lsls	r3, r3, #1
 800a2cc:	4413      	add	r3, r2
 800a2ce:	881b      	ldrh	r3, [r3, #0]
 800a2d0:	81fb      	strh	r3, [r7, #14]
 800a2d2:	89fb      	ldrh	r3, [r7, #14]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1d7      	bne.n	800a288 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	4413      	add	r3, r2
 800a2de:	3316      	adds	r3, #22
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	61bb      	str	r3, [r7, #24]
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	3316      	adds	r3, #22
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800a2f8:	e04c      	b.n	800a394 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1a      	ldr	r2, [r3, #32]
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	1c59      	adds	r1, r3, #1
 800a302:	61f9      	str	r1, [r7, #28]
 800a304:	4413      	add	r3, r2
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
 800a30c:	2b20      	cmp	r3, #32
 800a30e:	d100      	bne.n	800a312 <get_fileinfo+0xbe>
 800a310:	e040      	b.n	800a394 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a312:	7dfb      	ldrb	r3, [r7, #23]
 800a314:	2b05      	cmp	r3, #5
 800a316:	d101      	bne.n	800a31c <get_fileinfo+0xc8>
 800a318:	23e5      	movs	r3, #229	; 0xe5
 800a31a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	2b09      	cmp	r3, #9
 800a320:	d10f      	bne.n	800a342 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800a322:	89bb      	ldrh	r3, [r7, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d105      	bne.n	800a334 <get_fileinfo+0xe0>
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	4413      	add	r3, r2
 800a32e:	3316      	adds	r3, #22
 800a330:	222e      	movs	r2, #46	; 0x2e
 800a332:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	61ba      	str	r2, [r7, #24]
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	4413      	add	r3, r2
 800a33e:	222e      	movs	r2, #46	; 0x2e
 800a340:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	4413      	add	r3, r2
 800a348:	3309      	adds	r3, #9
 800a34a:	7dfa      	ldrb	r2, [r7, #23]
 800a34c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800a34e:	89bb      	ldrh	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d11c      	bne.n	800a38e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800a354:	7dfb      	ldrb	r3, [r7, #23]
 800a356:	2b40      	cmp	r3, #64	; 0x40
 800a358:	d913      	bls.n	800a382 <get_fileinfo+0x12e>
 800a35a:	7dfb      	ldrb	r3, [r7, #23]
 800a35c:	2b5a      	cmp	r3, #90	; 0x5a
 800a35e:	d810      	bhi.n	800a382 <get_fileinfo+0x12e>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a1b      	ldr	r3, [r3, #32]
 800a364:	330c      	adds	r3, #12
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	461a      	mov	r2, r3
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	d901      	bls.n	800a374 <get_fileinfo+0x120>
 800a370:	2310      	movs	r3, #16
 800a372:	e000      	b.n	800a376 <get_fileinfo+0x122>
 800a374:	2308      	movs	r3, #8
 800a376:	4013      	ands	r3, r2
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800a37c:	7dfb      	ldrb	r3, [r7, #23]
 800a37e:	3320      	adds	r3, #32
 800a380:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	4413      	add	r3, r2
 800a388:	3316      	adds	r3, #22
 800a38a:	7dfa      	ldrb	r2, [r7, #23]
 800a38c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	3301      	adds	r3, #1
 800a392:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	2b0a      	cmp	r3, #10
 800a398:	d9af      	bls.n	800a2fa <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800a39a:	89bb      	ldrh	r3, [r7, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10d      	bne.n	800a3bc <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800a3a0:	683a      	ldr	r2, [r7, #0]
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	3316      	adds	r3, #22
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a1b      	ldr	r3, [r3, #32]
 800a3b0:	330c      	adds	r3, #12
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <get_fileinfo+0x168>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	3309      	adds	r3, #9
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	7ada      	ldrb	r2, [r3, #11]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	331c      	adds	r3, #28
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe fc1d 	bl	8008c18 <ld_dword>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a1b      	ldr	r3, [r3, #32]
 800a3e8:	3316      	adds	r3, #22
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe fc14 	bl	8008c18 <ld_dword>
 800a3f0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	80da      	strh	r2, [r3, #6]
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	0c1b      	lsrs	r3, r3, #16
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	809a      	strh	r2, [r3, #4]
 800a404:	e000      	b.n	800a408 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a406:	bf00      	nop
}
 800a408:	3720      	adds	r7, #32
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b08a      	sub	sp, #40	; 0x28
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	613b      	str	r3, [r7, #16]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	2300      	movs	r3, #0
 800a42a:	617b      	str	r3, [r7, #20]
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	61ba      	str	r2, [r7, #24]
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	4413      	add	r3, r2
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a43e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a440:	2b1f      	cmp	r3, #31
 800a442:	d940      	bls.n	800a4c6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a446:	2b2f      	cmp	r3, #47	; 0x2f
 800a448:	d006      	beq.n	800a458 <create_name+0x48>
 800a44a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a44c:	2b5c      	cmp	r3, #92	; 0x5c
 800a44e:	d110      	bne.n	800a472 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a450:	e002      	b.n	800a458 <create_name+0x48>
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	3301      	adds	r3, #1
 800a456:	61bb      	str	r3, [r7, #24]
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	4413      	add	r3, r2
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	2b2f      	cmp	r3, #47	; 0x2f
 800a462:	d0f6      	beq.n	800a452 <create_name+0x42>
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	4413      	add	r3, r2
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	2b5c      	cmp	r3, #92	; 0x5c
 800a46e:	d0f0      	beq.n	800a452 <create_name+0x42>
			break;
 800a470:	e02a      	b.n	800a4c8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2bfe      	cmp	r3, #254	; 0xfe
 800a476:	d901      	bls.n	800a47c <create_name+0x6c>
 800a478:	2306      	movs	r3, #6
 800a47a:	e17d      	b.n	800a778 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a47c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a484:	2101      	movs	r1, #1
 800a486:	4618      	mov	r0, r3
 800a488:	f001 f9c2 	bl	800b810 <ff_convert>
 800a48c:	4603      	mov	r3, r0
 800a48e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a490:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <create_name+0x8a>
 800a496:	2306      	movs	r3, #6
 800a498:	e16e      	b.n	800a778 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a49a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a49c:	2b7f      	cmp	r3, #127	; 0x7f
 800a49e:	d809      	bhi.n	800a4b4 <create_name+0xa4>
 800a4a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	488d      	ldr	r0, [pc, #564]	; (800a6dc <create_name+0x2cc>)
 800a4a6:	f7fe fc84 	bl	8008db2 <chk_chr>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d001      	beq.n	800a4b4 <create_name+0xa4>
 800a4b0:	2306      	movs	r3, #6
 800a4b2:	e161      	b.n	800a778 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	617a      	str	r2, [r7, #20]
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	4413      	add	r3, r2
 800a4c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a4c2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a4c4:	e7b4      	b.n	800a430 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a4c6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	441a      	add	r2, r3
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a4d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4d4:	2b1f      	cmp	r3, #31
 800a4d6:	d801      	bhi.n	800a4dc <create_name+0xcc>
 800a4d8:	2304      	movs	r3, #4
 800a4da:	e000      	b.n	800a4de <create_name+0xce>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a4e2:	e011      	b.n	800a508 <create_name+0xf8>
		w = lfn[di - 1];
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a4ea:	4413      	add	r3, r2
 800a4ec:	005b      	lsls	r3, r3, #1
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	881b      	ldrh	r3, [r3, #0]
 800a4f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a4f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4f8:	2b20      	cmp	r3, #32
 800a4fa:	d002      	beq.n	800a502 <create_name+0xf2>
 800a4fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4fe:	2b2e      	cmp	r3, #46	; 0x2e
 800a500:	d106      	bne.n	800a510 <create_name+0x100>
		di--;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	3b01      	subs	r3, #1
 800a506:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1ea      	bne.n	800a4e4 <create_name+0xd4>
 800a50e:	e000      	b.n	800a512 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a510:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	4413      	add	r3, r2
 800a51a:	2200      	movs	r2, #0
 800a51c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d101      	bne.n	800a528 <create_name+0x118>
 800a524:	2306      	movs	r3, #6
 800a526:	e127      	b.n	800a778 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	3324      	adds	r3, #36	; 0x24
 800a52c:	220b      	movs	r2, #11
 800a52e:	2120      	movs	r1, #32
 800a530:	4618      	mov	r0, r3
 800a532:	f7fe fbfc 	bl	8008d2e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a536:	2300      	movs	r3, #0
 800a538:	61bb      	str	r3, [r7, #24]
 800a53a:	e002      	b.n	800a542 <create_name+0x132>
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	3301      	adds	r3, #1
 800a540:	61bb      	str	r3, [r7, #24]
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	005b      	lsls	r3, r3, #1
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	4413      	add	r3, r2
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	2b20      	cmp	r3, #32
 800a54e:	d0f5      	beq.n	800a53c <create_name+0x12c>
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	005b      	lsls	r3, r3, #1
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	4413      	add	r3, r2
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	2b2e      	cmp	r3, #46	; 0x2e
 800a55c:	d0ee      	beq.n	800a53c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d009      	beq.n	800a578 <create_name+0x168>
 800a564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a568:	f043 0303 	orr.w	r3, r3, #3
 800a56c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a570:	e002      	b.n	800a578 <create_name+0x168>
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	3b01      	subs	r3, #1
 800a576:	617b      	str	r3, [r7, #20]
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d009      	beq.n	800a592 <create_name+0x182>
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a584:	4413      	add	r3, r2
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	4413      	add	r3, r2
 800a58c:	881b      	ldrh	r3, [r3, #0]
 800a58e:	2b2e      	cmp	r3, #46	; 0x2e
 800a590:	d1ef      	bne.n	800a572 <create_name+0x162>

	i = b = 0; ni = 8;
 800a592:	2300      	movs	r3, #0
 800a594:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a598:	2300      	movs	r3, #0
 800a59a:	623b      	str	r3, [r7, #32]
 800a59c:	2308      	movs	r3, #8
 800a59e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	1c5a      	adds	r2, r3, #1
 800a5a4:	61ba      	str	r2, [r7, #24]
 800a5a6:	005b      	lsls	r3, r3, #1
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a5b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 8090 	beq.w	800a6d8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a5b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5ba:	2b20      	cmp	r3, #32
 800a5bc:	d006      	beq.n	800a5cc <create_name+0x1bc>
 800a5be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5c0:	2b2e      	cmp	r3, #46	; 0x2e
 800a5c2:	d10a      	bne.n	800a5da <create_name+0x1ca>
 800a5c4:	69ba      	ldr	r2, [r7, #24]
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d006      	beq.n	800a5da <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5d0:	f043 0303 	orr.w	r3, r3, #3
 800a5d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a5d8:	e07d      	b.n	800a6d6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a5da:	6a3a      	ldr	r2, [r7, #32]
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d203      	bcs.n	800a5ea <create_name+0x1da>
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d123      	bne.n	800a632 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	2b0b      	cmp	r3, #11
 800a5ee:	d106      	bne.n	800a5fe <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5f4:	f043 0303 	orr.w	r3, r3, #3
 800a5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a5fc:	e075      	b.n	800a6ea <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	429a      	cmp	r2, r3
 800a604:	d005      	beq.n	800a612 <create_name+0x202>
 800a606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a60a:	f043 0303 	orr.w	r3, r3, #3
 800a60e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	429a      	cmp	r2, r3
 800a618:	d866      	bhi.n	800a6e8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	61bb      	str	r3, [r7, #24]
 800a61e:	2308      	movs	r3, #8
 800a620:	623b      	str	r3, [r7, #32]
 800a622:	230b      	movs	r3, #11
 800a624:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a626:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a630:	e051      	b.n	800a6d6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a632:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a634:	2b7f      	cmp	r3, #127	; 0x7f
 800a636:	d914      	bls.n	800a662 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a638:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a63a:	2100      	movs	r1, #0
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 f8e7 	bl	800b810 <ff_convert>
 800a642:	4603      	mov	r3, r0
 800a644:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d004      	beq.n	800a656 <create_name+0x246>
 800a64c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a64e:	3b80      	subs	r3, #128	; 0x80
 800a650:	4a23      	ldr	r2, [pc, #140]	; (800a6e0 <create_name+0x2d0>)
 800a652:	5cd3      	ldrb	r3, [r2, r3]
 800a654:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a65a:	f043 0302 	orr.w	r3, r3, #2
 800a65e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a664:	2b00      	cmp	r3, #0
 800a666:	d007      	beq.n	800a678 <create_name+0x268>
 800a668:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a66a:	4619      	mov	r1, r3
 800a66c:	481d      	ldr	r0, [pc, #116]	; (800a6e4 <create_name+0x2d4>)
 800a66e:	f7fe fba0 	bl	8008db2 <chk_chr>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d008      	beq.n	800a68a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a678:	235f      	movs	r3, #95	; 0x5f
 800a67a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a680:	f043 0303 	orr.w	r3, r3, #3
 800a684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a688:	e01b      	b.n	800a6c2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a68a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a68c:	2b40      	cmp	r3, #64	; 0x40
 800a68e:	d909      	bls.n	800a6a4 <create_name+0x294>
 800a690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a692:	2b5a      	cmp	r3, #90	; 0x5a
 800a694:	d806      	bhi.n	800a6a4 <create_name+0x294>
					b |= 2;
 800a696:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a69a:	f043 0302 	orr.w	r3, r3, #2
 800a69e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a6a2:	e00e      	b.n	800a6c2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a6a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6a6:	2b60      	cmp	r3, #96	; 0x60
 800a6a8:	d90b      	bls.n	800a6c2 <create_name+0x2b2>
 800a6aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6ac:	2b7a      	cmp	r3, #122	; 0x7a
 800a6ae:	d808      	bhi.n	800a6c2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a6b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a6b4:	f043 0301 	orr.w	r3, r3, #1
 800a6b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a6bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6be:	3b20      	subs	r3, #32
 800a6c0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	623a      	str	r2, [r7, #32]
 800a6c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a6ca:	b2d1      	uxtb	r1, r2
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	460a      	mov	r2, r1
 800a6d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a6d6:	e763      	b.n	800a5a0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a6d8:	bf00      	nop
 800a6da:	e006      	b.n	800a6ea <create_name+0x2da>
 800a6dc:	0800ba2c 	.word	0x0800ba2c
 800a6e0:	0800bac0 	.word	0x0800bac0
 800a6e4:	0800ba38 	.word	0x0800ba38
			if (si > di) break;			/* No extension */
 800a6e8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a6f0:	2be5      	cmp	r3, #229	; 0xe5
 800a6f2:	d103      	bne.n	800a6fc <create_name+0x2ec>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2205      	movs	r2, #5
 800a6f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	2b08      	cmp	r3, #8
 800a700:	d104      	bne.n	800a70c <create_name+0x2fc>
 800a702:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a70c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a710:	f003 030c 	and.w	r3, r3, #12
 800a714:	2b0c      	cmp	r3, #12
 800a716:	d005      	beq.n	800a724 <create_name+0x314>
 800a718:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a71c:	f003 0303 	and.w	r3, r3, #3
 800a720:	2b03      	cmp	r3, #3
 800a722:	d105      	bne.n	800a730 <create_name+0x320>
 800a724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a728:	f043 0302 	orr.w	r3, r3, #2
 800a72c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a734:	f003 0302 	and.w	r3, r3, #2
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d117      	bne.n	800a76c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a73c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a740:	f003 0303 	and.w	r3, r3, #3
 800a744:	2b01      	cmp	r3, #1
 800a746:	d105      	bne.n	800a754 <create_name+0x344>
 800a748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a74c:	f043 0310 	orr.w	r3, r3, #16
 800a750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a754:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a758:	f003 030c 	and.w	r3, r3, #12
 800a75c:	2b04      	cmp	r3, #4
 800a75e:	d105      	bne.n	800a76c <create_name+0x35c>
 800a760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a764:	f043 0308 	orr.w	r3, r3, #8
 800a768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a772:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a776:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3728      	adds	r7, #40	; 0x28
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a794:	e002      	b.n	800a79c <follow_path+0x1c>
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	3301      	adds	r3, #1
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	2b2f      	cmp	r3, #47	; 0x2f
 800a7a2:	d0f8      	beq.n	800a796 <follow_path+0x16>
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	2b5c      	cmp	r3, #92	; 0x5c
 800a7aa:	d0f4      	beq.n	800a796 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	2b1f      	cmp	r3, #31
 800a7b8:	d80a      	bhi.n	800a7d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2280      	movs	r2, #128	; 0x80
 800a7be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f7ff f83f 	bl	8009848 <dir_sdi>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	75fb      	strb	r3, [r7, #23]
 800a7ce:	e043      	b.n	800a858 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a7d0:	463b      	mov	r3, r7
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7ff fe1b 	bl	800a410 <create_name>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d134      	bne.n	800a84e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7ff fb7c 	bl	8009ee2 <dir_find>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a7f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00a      	beq.n	800a812 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	d127      	bne.n	800a852 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a802:	7afb      	ldrb	r3, [r7, #11]
 800a804:	f003 0304 	and.w	r3, r3, #4
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d122      	bne.n	800a852 <follow_path+0xd2>
 800a80c:	2305      	movs	r3, #5
 800a80e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a810:	e01f      	b.n	800a852 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a812:	7afb      	ldrb	r3, [r7, #11]
 800a814:	f003 0304 	and.w	r3, r3, #4
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d11c      	bne.n	800a856 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	799b      	ldrb	r3, [r3, #6]
 800a820:	f003 0310 	and.w	r3, r3, #16
 800a824:	2b00      	cmp	r3, #0
 800a826:	d102      	bne.n	800a82e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a828:	2305      	movs	r3, #5
 800a82a:	75fb      	strb	r3, [r7, #23]
 800a82c:	e014      	b.n	800a858 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	695b      	ldr	r3, [r3, #20]
 800a838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a83c:	4413      	add	r3, r2
 800a83e:	4619      	mov	r1, r3
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f7ff f988 	bl	8009b56 <ld_clust>
 800a846:	4602      	mov	r2, r0
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a84c:	e7c0      	b.n	800a7d0 <follow_path+0x50>
			if (res != FR_OK) break;
 800a84e:	bf00      	nop
 800a850:	e002      	b.n	800a858 <follow_path+0xd8>
				break;
 800a852:	bf00      	nop
 800a854:	e000      	b.n	800a858 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a856:	bf00      	nop
			}
		}
	}

	return res;
 800a858:	7dfb      	ldrb	r3, [r7, #23]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3718      	adds	r7, #24
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a862:	b480      	push	{r7}
 800a864:	b087      	sub	sp, #28
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a86a:	f04f 33ff 	mov.w	r3, #4294967295
 800a86e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d031      	beq.n	800a8dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	617b      	str	r3, [r7, #20]
 800a87e:	e002      	b.n	800a886 <get_ldnumber+0x24>
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	3301      	adds	r3, #1
 800a884:	617b      	str	r3, [r7, #20]
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	2b1f      	cmp	r3, #31
 800a88c:	d903      	bls.n	800a896 <get_ldnumber+0x34>
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	2b3a      	cmp	r3, #58	; 0x3a
 800a894:	d1f4      	bne.n	800a880 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	2b3a      	cmp	r3, #58	; 0x3a
 800a89c:	d11c      	bne.n	800a8d8 <get_ldnumber+0x76>
			tp = *path;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	60fa      	str	r2, [r7, #12]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	3b30      	subs	r3, #48	; 0x30
 800a8ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	2b09      	cmp	r3, #9
 800a8b4:	d80e      	bhi.n	800a8d4 <get_ldnumber+0x72>
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d10a      	bne.n	800a8d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d107      	bne.n	800a8d4 <get_ldnumber+0x72>
					vol = (int)i;
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	e002      	b.n	800a8de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a8d8:	2300      	movs	r3, #0
 800a8da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a8dc:	693b      	ldr	r3, [r7, #16]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	371c      	adds	r7, #28
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
	...

0800a8ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	70da      	strb	r2, [r3, #3]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a902:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7fe fc1e 	bl	8009148 <move_window>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d001      	beq.n	800a916 <check_fs+0x2a>
 800a912:	2304      	movs	r3, #4
 800a914:	e038      	b.n	800a988 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3334      	adds	r3, #52	; 0x34
 800a91a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe f962 	bl	8008be8 <ld_word>
 800a924:	4603      	mov	r3, r0
 800a926:	461a      	mov	r2, r3
 800a928:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d001      	beq.n	800a934 <check_fs+0x48>
 800a930:	2303      	movs	r3, #3
 800a932:	e029      	b.n	800a988 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a93a:	2be9      	cmp	r3, #233	; 0xe9
 800a93c:	d009      	beq.n	800a952 <check_fs+0x66>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a944:	2beb      	cmp	r3, #235	; 0xeb
 800a946:	d11e      	bne.n	800a986 <check_fs+0x9a>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a94e:	2b90      	cmp	r3, #144	; 0x90
 800a950:	d119      	bne.n	800a986 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	3334      	adds	r3, #52	; 0x34
 800a956:	3336      	adds	r3, #54	; 0x36
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fe f95d 	bl	8008c18 <ld_dword>
 800a95e:	4603      	mov	r3, r0
 800a960:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a964:	4a0a      	ldr	r2, [pc, #40]	; (800a990 <check_fs+0xa4>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d101      	bne.n	800a96e <check_fs+0x82>
 800a96a:	2300      	movs	r3, #0
 800a96c:	e00c      	b.n	800a988 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	3334      	adds	r3, #52	; 0x34
 800a972:	3352      	adds	r3, #82	; 0x52
 800a974:	4618      	mov	r0, r3
 800a976:	f7fe f94f 	bl	8008c18 <ld_dword>
 800a97a:	4603      	mov	r3, r0
 800a97c:	4a05      	ldr	r2, [pc, #20]	; (800a994 <check_fs+0xa8>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d101      	bne.n	800a986 <check_fs+0x9a>
 800a982:	2300      	movs	r3, #0
 800a984:	e000      	b.n	800a988 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a986:	2302      	movs	r3, #2
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	00544146 	.word	0x00544146
 800a994:	33544146 	.word	0x33544146

0800a998 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b096      	sub	sp, #88	; 0x58
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f7ff ff58 	bl	800a862 <get_ldnumber>
 800a9b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	da01      	bge.n	800a9be <find_volume+0x26>
 800a9ba:	230b      	movs	r3, #11
 800a9bc:	e230      	b.n	800ae20 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a9be:	4aa1      	ldr	r2, [pc, #644]	; (800ac44 <find_volume+0x2ac>)
 800a9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <find_volume+0x3a>
 800a9ce:	230c      	movs	r3, #12
 800a9d0:	e226      	b.n	800ae20 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a9d8:	79fb      	ldrb	r3, [r7, #7]
 800a9da:	f023 0301 	bic.w	r3, r3, #1
 800a9de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d01a      	beq.n	800aa1e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ea:	785b      	ldrb	r3, [r3, #1]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe f85d 	bl	8008aac <disk_status>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a9f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10c      	bne.n	800aa1e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800aa04:	79fb      	ldrb	r3, [r7, #7]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d007      	beq.n	800aa1a <find_volume+0x82>
 800aa0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa0e:	f003 0304 	and.w	r3, r3, #4
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800aa16:	230a      	movs	r3, #10
 800aa18:	e202      	b.n	800ae20 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	e200      	b.n	800ae20 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa20:	2200      	movs	r2, #0
 800aa22:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aa24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2e:	785b      	ldrb	r3, [r3, #1]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe f855 	bl	8008ae0 <disk_initialize>
 800aa36:	4603      	mov	r3, r0
 800aa38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800aa3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e1e9      	b.n	800ae20 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aa4c:	79fb      	ldrb	r3, [r7, #7]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d007      	beq.n	800aa62 <find_volume+0xca>
 800aa52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa56:	f003 0304 	and.w	r3, r3, #4
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800aa5e:	230a      	movs	r3, #10
 800aa60:	e1de      	b.n	800ae20 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800aa62:	2300      	movs	r3, #0
 800aa64:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800aa66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa6a:	f7ff ff3f 	bl	800a8ec <check_fs>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800aa74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d149      	bne.n	800ab10 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	643b      	str	r3, [r7, #64]	; 0x40
 800aa80:	e01e      	b.n	800aac0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800aa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aa88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa8a:	011b      	lsls	r3, r3, #4
 800aa8c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800aa90:	4413      	add	r3, r2
 800aa92:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa96:	3304      	adds	r3, #4
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d006      	beq.n	800aaac <find_volume+0x114>
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fe f8b8 	bl	8008c18 <ld_dword>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	e000      	b.n	800aaae <find_volume+0x116>
 800aaac:	2200      	movs	r2, #0
 800aaae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	3358      	adds	r3, #88	; 0x58
 800aab4:	443b      	add	r3, r7
 800aab6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aaba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aabc:	3301      	adds	r3, #1
 800aabe:	643b      	str	r3, [r7, #64]	; 0x40
 800aac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d9dd      	bls.n	800aa82 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800aac6:	2300      	movs	r3, #0
 800aac8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800aaca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d002      	beq.n	800aad6 <find_volume+0x13e>
 800aad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aad2:	3b01      	subs	r3, #1
 800aad4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800aad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	3358      	adds	r3, #88	; 0x58
 800aadc:	443b      	add	r3, r7
 800aade:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800aae2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800aae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d005      	beq.n	800aaf6 <find_volume+0x15e>
 800aaea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aaec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aaee:	f7ff fefd 	bl	800a8ec <check_fs>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	e000      	b.n	800aaf8 <find_volume+0x160>
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800aafc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d905      	bls.n	800ab10 <find_volume+0x178>
 800ab04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab06:	3301      	adds	r3, #1
 800ab08:	643b      	str	r3, [r7, #64]	; 0x40
 800ab0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab0c:	2b03      	cmp	r3, #3
 800ab0e:	d9e2      	bls.n	800aad6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ab10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab14:	2b04      	cmp	r3, #4
 800ab16:	d101      	bne.n	800ab1c <find_volume+0x184>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e181      	b.n	800ae20 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ab1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d901      	bls.n	800ab28 <find_volume+0x190>
 800ab24:	230d      	movs	r3, #13
 800ab26:	e17b      	b.n	800ae20 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ab28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2a:	3334      	adds	r3, #52	; 0x34
 800ab2c:	330b      	adds	r3, #11
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7fe f85a 	bl	8008be8 <ld_word>
 800ab34:	4603      	mov	r3, r0
 800ab36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab3a:	d001      	beq.n	800ab40 <find_volume+0x1a8>
 800ab3c:	230d      	movs	r3, #13
 800ab3e:	e16f      	b.n	800ae20 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ab40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab42:	3334      	adds	r3, #52	; 0x34
 800ab44:	3316      	adds	r3, #22
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe f84e 	bl	8008be8 <ld_word>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ab50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d106      	bne.n	800ab64 <find_volume+0x1cc>
 800ab56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab58:	3334      	adds	r3, #52	; 0x34
 800ab5a:	3324      	adds	r3, #36	; 0x24
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fe f85b 	bl	8008c18 <ld_dword>
 800ab62:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ab64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab68:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ab70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab72:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ab74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab76:	789b      	ldrb	r3, [r3, #2]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d005      	beq.n	800ab88 <find_volume+0x1f0>
 800ab7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7e:	789b      	ldrb	r3, [r3, #2]
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d001      	beq.n	800ab88 <find_volume+0x1f0>
 800ab84:	230d      	movs	r3, #13
 800ab86:	e14b      	b.n	800ae20 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ab88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8a:	789b      	ldrb	r3, [r3, #2]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab90:	fb02 f303 	mul.w	r3, r2, r3
 800ab94:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ab96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800aba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba4:	895b      	ldrh	r3, [r3, #10]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d008      	beq.n	800abbc <find_volume+0x224>
 800abaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abac:	895b      	ldrh	r3, [r3, #10]
 800abae:	461a      	mov	r2, r3
 800abb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb2:	895b      	ldrh	r3, [r3, #10]
 800abb4:	3b01      	subs	r3, #1
 800abb6:	4013      	ands	r3, r2
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d001      	beq.n	800abc0 <find_volume+0x228>
 800abbc:	230d      	movs	r3, #13
 800abbe:	e12f      	b.n	800ae20 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800abc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc2:	3334      	adds	r3, #52	; 0x34
 800abc4:	3311      	adds	r3, #17
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fe f80e 	bl	8008be8 <ld_word>
 800abcc:	4603      	mov	r3, r0
 800abce:	461a      	mov	r2, r3
 800abd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800abd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd6:	891b      	ldrh	r3, [r3, #8]
 800abd8:	f003 030f 	and.w	r3, r3, #15
 800abdc:	b29b      	uxth	r3, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <find_volume+0x24e>
 800abe2:	230d      	movs	r3, #13
 800abe4:	e11c      	b.n	800ae20 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800abe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe8:	3334      	adds	r3, #52	; 0x34
 800abea:	3313      	adds	r3, #19
 800abec:	4618      	mov	r0, r3
 800abee:	f7fd fffb 	bl	8008be8 <ld_word>
 800abf2:	4603      	mov	r3, r0
 800abf4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800abf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d106      	bne.n	800ac0a <find_volume+0x272>
 800abfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfe:	3334      	adds	r3, #52	; 0x34
 800ac00:	3320      	adds	r3, #32
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fe f808 	bl	8008c18 <ld_dword>
 800ac08:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ac0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0c:	3334      	adds	r3, #52	; 0x34
 800ac0e:	330e      	adds	r3, #14
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7fd ffe9 	bl	8008be8 <ld_word>
 800ac16:	4603      	mov	r3, r0
 800ac18:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ac1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <find_volume+0x28c>
 800ac20:	230d      	movs	r3, #13
 800ac22:	e0fd      	b.n	800ae20 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ac24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ac26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac28:	4413      	add	r3, r2
 800ac2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac2c:	8912      	ldrh	r2, [r2, #8]
 800ac2e:	0912      	lsrs	r2, r2, #4
 800ac30:	b292      	uxth	r2, r2
 800ac32:	4413      	add	r3, r2
 800ac34:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ac36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d204      	bcs.n	800ac48 <find_volume+0x2b0>
 800ac3e:	230d      	movs	r3, #13
 800ac40:	e0ee      	b.n	800ae20 <find_volume+0x488>
 800ac42:	bf00      	nop
 800ac44:	240006cc 	.word	0x240006cc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ac48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac50:	8952      	ldrh	r2, [r2, #10]
 800ac52:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac56:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d101      	bne.n	800ac62 <find_volume+0x2ca>
 800ac5e:	230d      	movs	r3, #13
 800ac60:	e0de      	b.n	800ae20 <find_volume+0x488>
		fmt = FS_FAT32;
 800ac62:	2303      	movs	r3, #3
 800ac64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d802      	bhi.n	800ac78 <find_volume+0x2e0>
 800ac72:	2302      	movs	r3, #2
 800ac74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d802      	bhi.n	800ac88 <find_volume+0x2f0>
 800ac82:	2301      	movs	r3, #1
 800ac84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	1c9a      	adds	r2, r3, #2
 800ac8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ac90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac94:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ac96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ac98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac9a:	441a      	add	r2, r3
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800aca0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	441a      	add	r2, r3
 800aca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800acaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acae:	2b03      	cmp	r3, #3
 800acb0:	d11e      	bne.n	800acf0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800acb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb4:	3334      	adds	r3, #52	; 0x34
 800acb6:	332a      	adds	r3, #42	; 0x2a
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fd ff95 	bl	8008be8 <ld_word>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <find_volume+0x330>
 800acc4:	230d      	movs	r3, #13
 800acc6:	e0ab      	b.n	800ae20 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800acc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acca:	891b      	ldrh	r3, [r3, #8]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d001      	beq.n	800acd4 <find_volume+0x33c>
 800acd0:	230d      	movs	r3, #13
 800acd2:	e0a5      	b.n	800ae20 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800acd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd6:	3334      	adds	r3, #52	; 0x34
 800acd8:	332c      	adds	r3, #44	; 0x2c
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fd ff9c 	bl	8008c18 <ld_dword>
 800ace0:	4602      	mov	r2, r0
 800ace2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ace6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	647b      	str	r3, [r7, #68]	; 0x44
 800acee:	e01f      	b.n	800ad30 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800acf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf2:	891b      	ldrh	r3, [r3, #8]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <find_volume+0x364>
 800acf8:	230d      	movs	r3, #13
 800acfa:	e091      	b.n	800ae20 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad02:	441a      	add	r2, r3
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ad08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d103      	bne.n	800ad18 <find_volume+0x380>
 800ad10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	e00a      	b.n	800ad2e <find_volume+0x396>
 800ad18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1a:	699a      	ldr	r2, [r3, #24]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	4413      	add	r3, r2
 800ad22:	085a      	lsrs	r2, r3, #1
 800ad24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ad2e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ad30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad32:	69da      	ldr	r2, [r3, #28]
 800ad34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad36:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ad3a:	0a5b      	lsrs	r3, r3, #9
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d201      	bcs.n	800ad44 <find_volume+0x3ac>
 800ad40:	230d      	movs	r3, #13
 800ad42:	e06d      	b.n	800ae20 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ad44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad46:	f04f 32ff 	mov.w	r2, #4294967295
 800ad4a:	615a      	str	r2, [r3, #20]
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4e:	695a      	ldr	r2, [r3, #20]
 800ad50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad52:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ad54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad56:	2280      	movs	r2, #128	; 0x80
 800ad58:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ad5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad5e:	2b03      	cmp	r3, #3
 800ad60:	d149      	bne.n	800adf6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad64:	3334      	adds	r3, #52	; 0x34
 800ad66:	3330      	adds	r3, #48	; 0x30
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fd ff3d 	bl	8008be8 <ld_word>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d140      	bne.n	800adf6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ad74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad76:	3301      	adds	r3, #1
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad7c:	f7fe f9e4 	bl	8009148 <move_window>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d137      	bne.n	800adf6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ad86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad88:	2200      	movs	r2, #0
 800ad8a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8e:	3334      	adds	r3, #52	; 0x34
 800ad90:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fd ff27 	bl	8008be8 <ld_word>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d127      	bne.n	800adf6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ada6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada8:	3334      	adds	r3, #52	; 0x34
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fd ff34 	bl	8008c18 <ld_dword>
 800adb0:	4603      	mov	r3, r0
 800adb2:	4a1d      	ldr	r2, [pc, #116]	; (800ae28 <find_volume+0x490>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d11e      	bne.n	800adf6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800adb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adba:	3334      	adds	r3, #52	; 0x34
 800adbc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fd ff29 	bl	8008c18 <ld_dword>
 800adc6:	4603      	mov	r3, r0
 800adc8:	4a18      	ldr	r2, [pc, #96]	; (800ae2c <find_volume+0x494>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d113      	bne.n	800adf6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800adce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add0:	3334      	adds	r3, #52	; 0x34
 800add2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800add6:	4618      	mov	r0, r3
 800add8:	f7fd ff1e 	bl	8008c18 <ld_dword>
 800addc:	4602      	mov	r2, r0
 800adde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ade2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade4:	3334      	adds	r3, #52	; 0x34
 800ade6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800adea:	4618      	mov	r0, r3
 800adec:	f7fd ff14 	bl	8008c18 <ld_dword>
 800adf0:	4602      	mov	r2, r0
 800adf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800adf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800adfc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800adfe:	4b0c      	ldr	r3, [pc, #48]	; (800ae30 <find_volume+0x498>)
 800ae00:	881b      	ldrh	r3, [r3, #0]
 800ae02:	3301      	adds	r3, #1
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	4b0a      	ldr	r3, [pc, #40]	; (800ae30 <find_volume+0x498>)
 800ae08:	801a      	strh	r2, [r3, #0]
 800ae0a:	4b09      	ldr	r3, [pc, #36]	; (800ae30 <find_volume+0x498>)
 800ae0c:	881a      	ldrh	r2, [r3, #0]
 800ae0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae10:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ae12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae14:	4a07      	ldr	r2, [pc, #28]	; (800ae34 <find_volume+0x49c>)
 800ae16:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ae18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae1a:	f7fe f92d 	bl	8009078 <clear_lock>
#endif
	return FR_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3758      	adds	r7, #88	; 0x58
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	41615252 	.word	0x41615252
 800ae2c:	61417272 	.word	0x61417272
 800ae30:	240006d0 	.word	0x240006d0
 800ae34:	240006f4 	.word	0x240006f4

0800ae38 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ae42:	2309      	movs	r3, #9
 800ae44:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d01c      	beq.n	800ae86 <validate+0x4e>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d018      	beq.n	800ae86 <validate+0x4e>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d013      	beq.n	800ae86 <validate+0x4e>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	889a      	ldrh	r2, [r3, #4]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	88db      	ldrh	r3, [r3, #6]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d10c      	bne.n	800ae86 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	785b      	ldrb	r3, [r3, #1]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fd fe1a 	bl	8008aac <disk_status>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <validate+0x4e>
			res = FR_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d102      	bne.n	800ae92 <validate+0x5a>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	e000      	b.n	800ae94 <validate+0x5c>
 800ae92:	2300      	movs	r3, #0
 800ae94:	683a      	ldr	r2, [r7, #0]
 800ae96:	6013      	str	r3, [r2, #0]
	return res;
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
	...

0800aea4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b088      	sub	sp, #32
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800aeb6:	f107 0310 	add.w	r3, r7, #16
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7ff fcd1 	bl	800a862 <get_ldnumber>
 800aec0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	da01      	bge.n	800aecc <f_mount+0x28>
 800aec8:	230b      	movs	r3, #11
 800aeca:	e02b      	b.n	800af24 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800aecc:	4a17      	ldr	r2, [pc, #92]	; (800af2c <f_mount+0x88>)
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aed4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d005      	beq.n	800aee8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800aedc:	69b8      	ldr	r0, [r7, #24]
 800aede:	f7fe f8cb 	bl	8009078 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	2200      	movs	r2, #0
 800aee6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d002      	beq.n	800aef4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	490d      	ldr	r1, [pc, #52]	; (800af2c <f_mount+0x88>)
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d002      	beq.n	800af0a <f_mount+0x66>
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	2b01      	cmp	r3, #1
 800af08:	d001      	beq.n	800af0e <f_mount+0x6a>
 800af0a:	2300      	movs	r3, #0
 800af0c:	e00a      	b.n	800af24 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800af0e:	f107 010c 	add.w	r1, r7, #12
 800af12:	f107 0308 	add.w	r3, r7, #8
 800af16:	2200      	movs	r2, #0
 800af18:	4618      	mov	r0, r3
 800af1a:	f7ff fd3d 	bl	800a998 <find_volume>
 800af1e:	4603      	mov	r3, r0
 800af20:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800af22:	7dfb      	ldrb	r3, [r7, #23]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3720      	adds	r7, #32
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	240006cc 	.word	0x240006cc

0800af30 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b09a      	sub	sp, #104	; 0x68
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	4613      	mov	r3, r2
 800af3c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d101      	bne.n	800af48 <f_open+0x18>
 800af44:	2309      	movs	r3, #9
 800af46:	e1ad      	b.n	800b2a4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af4e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800af50:	79fa      	ldrb	r2, [r7, #7]
 800af52:	f107 0114 	add.w	r1, r7, #20
 800af56:	f107 0308 	add.w	r3, r7, #8
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff fd1c 	bl	800a998 <find_volume>
 800af60:	4603      	mov	r3, r0
 800af62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800af66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f040 8191 	bne.w	800b292 <f_open+0x362>
		dj.obj.fs = fs;
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	f107 0318 	add.w	r3, r7, #24
 800af7a:	4611      	mov	r1, r2
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7ff fbff 	bl	800a780 <follow_path>
 800af82:	4603      	mov	r3, r0
 800af84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800af88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d11a      	bne.n	800afc6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800af90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800af94:	b25b      	sxtb	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	da03      	bge.n	800afa2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800af9a:	2306      	movs	r3, #6
 800af9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800afa0:	e011      	b.n	800afc6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800afa2:	79fb      	ldrb	r3, [r7, #7]
 800afa4:	f023 0301 	bic.w	r3, r3, #1
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	bf14      	ite	ne
 800afac:	2301      	movne	r3, #1
 800afae:	2300      	moveq	r3, #0
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	461a      	mov	r2, r3
 800afb4:	f107 0318 	add.w	r3, r7, #24
 800afb8:	4611      	mov	r1, r2
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fd ff14 	bl	8008de8 <chk_lock>
 800afc0:	4603      	mov	r3, r0
 800afc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800afc6:	79fb      	ldrb	r3, [r7, #7]
 800afc8:	f003 031c 	and.w	r3, r3, #28
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d07f      	beq.n	800b0d0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800afd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d017      	beq.n	800b008 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800afd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800afdc:	2b04      	cmp	r3, #4
 800afde:	d10e      	bne.n	800affe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800afe0:	f7fd ff5e 	bl	8008ea0 <enq_lock>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d006      	beq.n	800aff8 <f_open+0xc8>
 800afea:	f107 0318 	add.w	r3, r7, #24
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff f838 	bl	800a064 <dir_register>
 800aff4:	4603      	mov	r3, r0
 800aff6:	e000      	b.n	800affa <f_open+0xca>
 800aff8:	2312      	movs	r3, #18
 800affa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800affe:	79fb      	ldrb	r3, [r7, #7]
 800b000:	f043 0308 	orr.w	r3, r3, #8
 800b004:	71fb      	strb	r3, [r7, #7]
 800b006:	e010      	b.n	800b02a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b008:	7fbb      	ldrb	r3, [r7, #30]
 800b00a:	f003 0311 	and.w	r3, r3, #17
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <f_open+0xea>
					res = FR_DENIED;
 800b012:	2307      	movs	r3, #7
 800b014:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b018:	e007      	b.n	800b02a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b01a:	79fb      	ldrb	r3, [r7, #7]
 800b01c:	f003 0304 	and.w	r3, r3, #4
 800b020:	2b00      	cmp	r3, #0
 800b022:	d002      	beq.n	800b02a <f_open+0xfa>
 800b024:	2308      	movs	r3, #8
 800b026:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b02a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d168      	bne.n	800b104 <f_open+0x1d4>
 800b032:	79fb      	ldrb	r3, [r7, #7]
 800b034:	f003 0308 	and.w	r3, r3, #8
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d063      	beq.n	800b104 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b03c:	f7fd faf8 	bl	8008630 <get_fattime>
 800b040:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b044:	330e      	adds	r3, #14
 800b046:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fd fe23 	bl	8008c94 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b050:	3316      	adds	r3, #22
 800b052:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b054:	4618      	mov	r0, r3
 800b056:	f7fd fe1d 	bl	8008c94 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05c:	330b      	adds	r3, #11
 800b05e:	2220      	movs	r2, #32
 800b060:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b066:	4611      	mov	r1, r2
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fe fd74 	bl	8009b56 <ld_clust>
 800b06e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b074:	2200      	movs	r2, #0
 800b076:	4618      	mov	r0, r3
 800b078:	f7fe fd8c 	bl	8009b94 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07e:	331c      	adds	r3, #28
 800b080:	2100      	movs	r1, #0
 800b082:	4618      	mov	r0, r3
 800b084:	f7fd fe06 	bl	8008c94 <st_dword>
					fs->wflag = 1;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	2201      	movs	r2, #1
 800b08c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b08e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b090:	2b00      	cmp	r3, #0
 800b092:	d037      	beq.n	800b104 <f_open+0x1d4>
						dw = fs->winsect;
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b098:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b09a:	f107 0318 	add.w	r3, r7, #24
 800b09e:	2200      	movs	r2, #0
 800b0a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fe fa9f 	bl	80095e6 <remove_chain>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b0ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d126      	bne.n	800b104 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fe f844 	bl	8009148 <move_window>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b0ca:	3a01      	subs	r2, #1
 800b0cc:	611a      	str	r2, [r3, #16]
 800b0ce:	e019      	b.n	800b104 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b0d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d115      	bne.n	800b104 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b0d8:	7fbb      	ldrb	r3, [r7, #30]
 800b0da:	f003 0310 	and.w	r3, r3, #16
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <f_open+0x1ba>
					res = FR_NO_FILE;
 800b0e2:	2304      	movs	r3, #4
 800b0e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b0e8:	e00c      	b.n	800b104 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b0ea:	79fb      	ldrb	r3, [r7, #7]
 800b0ec:	f003 0302 	and.w	r3, r3, #2
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d007      	beq.n	800b104 <f_open+0x1d4>
 800b0f4:	7fbb      	ldrb	r3, [r7, #30]
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <f_open+0x1d4>
						res = FR_DENIED;
 800b0fe:	2307      	movs	r3, #7
 800b100:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b104:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d128      	bne.n	800b15e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b10c:	79fb      	ldrb	r3, [r7, #7]
 800b10e:	f003 0308 	and.w	r3, r3, #8
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b116:	79fb      	ldrb	r3, [r7, #7]
 800b118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b11c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b12c:	79fb      	ldrb	r3, [r7, #7]
 800b12e:	f023 0301 	bic.w	r3, r3, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	bf14      	ite	ne
 800b136:	2301      	movne	r3, #1
 800b138:	2300      	moveq	r3, #0
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	461a      	mov	r2, r3
 800b13e:	f107 0318 	add.w	r3, r7, #24
 800b142:	4611      	mov	r1, r2
 800b144:	4618      	mov	r0, r3
 800b146:	f7fd fecd 	bl	8008ee4 <inc_lock>
 800b14a:	4602      	mov	r2, r0
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d102      	bne.n	800b15e <f_open+0x22e>
 800b158:	2302      	movs	r3, #2
 800b15a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b15e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b162:	2b00      	cmp	r3, #0
 800b164:	f040 8095 	bne.w	800b292 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b16c:	4611      	mov	r1, r2
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fe fcf1 	bl	8009b56 <ld_clust>
 800b174:	4602      	mov	r2, r0
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17c:	331c      	adds	r3, #28
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fd fd4a 	bl	8008c18 <ld_dword>
 800b184:	4602      	mov	r2, r0
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b190:	697a      	ldr	r2, [r7, #20]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	88da      	ldrh	r2, [r3, #6]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	79fa      	ldrb	r2, [r7, #7]
 800b1a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3330      	adds	r3, #48	; 0x30
 800b1ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1be:	2100      	movs	r1, #0
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fd fdb4 	bl	8008d2e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b1c6:	79fb      	ldrb	r3, [r7, #7]
 800b1c8:	f003 0320 	and.w	r3, r3, #32
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d060      	beq.n	800b292 <f_open+0x362>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d05c      	beq.n	800b292 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68da      	ldr	r2, [r3, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	895b      	ldrh	r3, [r3, #10]
 800b1e4:	025b      	lsls	r3, r3, #9
 800b1e6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1f4:	e016      	b.n	800b224 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe f85f 	bl	80092be <get_fat>
 800b200:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b204:	2b01      	cmp	r3, #1
 800b206:	d802      	bhi.n	800b20e <f_open+0x2de>
 800b208:	2302      	movs	r3, #2
 800b20a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b20e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b214:	d102      	bne.n	800b21c <f_open+0x2ec>
 800b216:	2301      	movs	r3, #1
 800b218:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b21c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b21e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b220:	1ad3      	subs	r3, r2, r3
 800b222:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b224:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d103      	bne.n	800b234 <f_open+0x304>
 800b22c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b22e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b230:	429a      	cmp	r2, r3
 800b232:	d8e0      	bhi.n	800b1f6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b238:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b23a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d127      	bne.n	800b292 <f_open+0x362>
 800b242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d022      	beq.n	800b292 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b250:	4618      	mov	r0, r3
 800b252:	f7fe f815 	bl	8009280 <clust2sect>
 800b256:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d103      	bne.n	800b266 <f_open+0x336>
						res = FR_INT_ERR;
 800b25e:	2302      	movs	r3, #2
 800b260:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b264:	e015      	b.n	800b292 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b268:	0a5a      	lsrs	r2, r3, #9
 800b26a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b26c:	441a      	add	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	7858      	ldrb	r0, [r3, #1]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6a1a      	ldr	r2, [r3, #32]
 800b280:	2301      	movs	r3, #1
 800b282:	f7fd fc53 	bl	8008b2c <disk_read>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <f_open+0x362>
 800b28c:	2301      	movs	r3, #1
 800b28e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b292:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b296:	2b00      	cmp	r3, #0
 800b298:	d002      	beq.n	800b2a0 <f_open+0x370>
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2200      	movs	r2, #0
 800b29e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b2a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3768      	adds	r7, #104	; 0x68
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b08c      	sub	sp, #48	; 0x30
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f107 0210 	add.w	r2, r7, #16
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7ff fdb3 	bl	800ae38 <validate>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b2d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d107      	bne.n	800b2f0 <f_write+0x44>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	7d5b      	ldrb	r3, [r3, #21]
 800b2e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b2e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <f_write+0x4a>
 800b2f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2f4:	e14b      	b.n	800b58e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	7d1b      	ldrb	r3, [r3, #20]
 800b2fa:	f003 0302 	and.w	r3, r3, #2
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d101      	bne.n	800b306 <f_write+0x5a>
 800b302:	2307      	movs	r3, #7
 800b304:	e143      	b.n	800b58e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	699a      	ldr	r2, [r3, #24]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	441a      	add	r2, r3
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	429a      	cmp	r2, r3
 800b314:	f080 812d 	bcs.w	800b572 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	699b      	ldr	r3, [r3, #24]
 800b31c:	43db      	mvns	r3, r3
 800b31e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b320:	e127      	b.n	800b572 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f040 80e3 	bne.w	800b4f6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	0a5b      	lsrs	r3, r3, #9
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	8952      	ldrh	r2, [r2, #10]
 800b33a:	3a01      	subs	r2, #1
 800b33c:	4013      	ands	r3, r2
 800b33e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d143      	bne.n	800b3ce <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10c      	bne.n	800b368 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	2b00      	cmp	r3, #0
 800b358:	d11a      	bne.n	800b390 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2100      	movs	r1, #0
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe f9a6 	bl	80096b0 <create_chain>
 800b364:	62b8      	str	r0, [r7, #40]	; 0x28
 800b366:	e013      	b.n	800b390 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d007      	beq.n	800b380 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	4619      	mov	r1, r3
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f7fe fa32 	bl	80097e0 <clmt_clust>
 800b37c:	62b8      	str	r0, [r7, #40]	; 0x28
 800b37e:	e007      	b.n	800b390 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	69db      	ldr	r3, [r3, #28]
 800b386:	4619      	mov	r1, r3
 800b388:	4610      	mov	r0, r2
 800b38a:	f7fe f991 	bl	80096b0 <create_chain>
 800b38e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b392:	2b00      	cmp	r3, #0
 800b394:	f000 80f2 	beq.w	800b57c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d104      	bne.n	800b3a8 <f_write+0xfc>
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	755a      	strb	r2, [r3, #21]
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	e0f2      	b.n	800b58e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ae:	d104      	bne.n	800b3ba <f_write+0x10e>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	755a      	strb	r2, [r3, #21]
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e0e9      	b.n	800b58e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3be:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d102      	bne.n	800b3ce <f_write+0x122>
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3cc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	7d1b      	ldrb	r3, [r3, #20]
 800b3d2:	b25b      	sxtb	r3, r3
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	da18      	bge.n	800b40a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	7858      	ldrb	r0, [r3, #1]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6a1a      	ldr	r2, [r3, #32]
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	f7fd fbc0 	bl	8008b6c <disk_write>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d004      	beq.n	800b3fc <f_write+0x150>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	755a      	strb	r2, [r3, #21]
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e0c8      	b.n	800b58e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	7d1b      	ldrb	r3, [r3, #20]
 800b400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b404:	b2da      	uxtb	r2, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b40a:	693a      	ldr	r2, [r7, #16]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	69db      	ldr	r3, [r3, #28]
 800b410:	4619      	mov	r1, r3
 800b412:	4610      	mov	r0, r2
 800b414:	f7fd ff34 	bl	8009280 <clust2sect>
 800b418:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d104      	bne.n	800b42a <f_write+0x17e>
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2202      	movs	r2, #2
 800b424:	755a      	strb	r2, [r3, #21]
 800b426:	2302      	movs	r3, #2
 800b428:	e0b1      	b.n	800b58e <f_write+0x2e2>
			sect += csect;
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	4413      	add	r3, r2
 800b430:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	0a5b      	lsrs	r3, r3, #9
 800b436:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b438:	6a3b      	ldr	r3, [r7, #32]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d03c      	beq.n	800b4b8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b43e:	69ba      	ldr	r2, [r7, #24]
 800b440:	6a3b      	ldr	r3, [r7, #32]
 800b442:	4413      	add	r3, r2
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	8952      	ldrh	r2, [r2, #10]
 800b448:	4293      	cmp	r3, r2
 800b44a:	d905      	bls.n	800b458 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	895b      	ldrh	r3, [r3, #10]
 800b450:	461a      	mov	r2, r3
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	7858      	ldrb	r0, [r3, #1]
 800b45c:	6a3b      	ldr	r3, [r7, #32]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	69f9      	ldr	r1, [r7, #28]
 800b462:	f7fd fb83 	bl	8008b6c <disk_write>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d004      	beq.n	800b476 <f_write+0x1ca>
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2201      	movs	r2, #1
 800b470:	755a      	strb	r2, [r3, #21]
 800b472:	2301      	movs	r3, #1
 800b474:	e08b      	b.n	800b58e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6a1a      	ldr	r2, [r3, #32]
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	6a3a      	ldr	r2, [r7, #32]
 800b480:	429a      	cmp	r2, r3
 800b482:	d915      	bls.n	800b4b0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6a1a      	ldr	r2, [r3, #32]
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	1ad3      	subs	r3, r2, r3
 800b492:	025b      	lsls	r3, r3, #9
 800b494:	69fa      	ldr	r2, [r7, #28]
 800b496:	4413      	add	r3, r2
 800b498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b49c:	4619      	mov	r1, r3
 800b49e:	f7fd fc25 	bl	8008cec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	7d1b      	ldrb	r3, [r3, #20]
 800b4a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b4b0:	6a3b      	ldr	r3, [r7, #32]
 800b4b2:	025b      	lsls	r3, r3, #9
 800b4b4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b4b6:	e03f      	b.n	800b538 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6a1b      	ldr	r3, [r3, #32]
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d016      	beq.n	800b4f0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	699a      	ldr	r2, [r3, #24]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d210      	bcs.n	800b4f0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	7858      	ldrb	r0, [r3, #1]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b4d8:	2301      	movs	r3, #1
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	f7fd fb26 	bl	8008b2c <disk_read>
 800b4e0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d004      	beq.n	800b4f0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	755a      	strb	r2, [r3, #21]
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e04e      	b.n	800b58e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	697a      	ldr	r2, [r7, #20]
 800b4f4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	699b      	ldr	r3, [r3, #24]
 800b4fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b502:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d901      	bls.n	800b510 <f_write+0x264>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b51e:	4413      	add	r3, r2
 800b520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b522:	69f9      	ldr	r1, [r7, #28]
 800b524:	4618      	mov	r0, r3
 800b526:	f7fd fbe1 	bl	8008cec <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	7d1b      	ldrb	r3, [r3, #20]
 800b52e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b532:	b2da      	uxtb	r2, r3
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b538:	69fa      	ldr	r2, [r7, #28]
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	4413      	add	r3, r2
 800b53e:	61fb      	str	r3, [r7, #28]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	699a      	ldr	r2, [r3, #24]
 800b544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b546:	441a      	add	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	619a      	str	r2, [r3, #24]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	68da      	ldr	r2, [r3, #12]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	429a      	cmp	r2, r3
 800b556:	bf38      	it	cc
 800b558:	461a      	movcc	r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	60da      	str	r2, [r3, #12]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b564:	441a      	add	r2, r3
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	601a      	str	r2, [r3, #0]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	f47f aed4 	bne.w	800b322 <f_write+0x76>
 800b57a:	e000      	b.n	800b57e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b57c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	7d1b      	ldrb	r3, [r3, #20]
 800b582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b586:	b2da      	uxtb	r2, r3
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3730      	adds	r7, #48	; 0x30
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b086      	sub	sp, #24
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f107 0208 	add.w	r2, r7, #8
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7ff fc46 	bl	800ae38 <validate>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b5b0:	7dfb      	ldrb	r3, [r7, #23]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d168      	bne.n	800b688 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	7d1b      	ldrb	r3, [r3, #20]
 800b5ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d062      	beq.n	800b688 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	7d1b      	ldrb	r3, [r3, #20]
 800b5c6:	b25b      	sxtb	r3, r3
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	da15      	bge.n	800b5f8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	7858      	ldrb	r0, [r3, #1]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a1a      	ldr	r2, [r3, #32]
 800b5da:	2301      	movs	r3, #1
 800b5dc:	f7fd fac6 	bl	8008b6c <disk_write>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <f_sync+0x54>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e04f      	b.n	800b68a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	7d1b      	ldrb	r3, [r3, #20]
 800b5ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5f2:	b2da      	uxtb	r2, r3
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b5f8:	f7fd f81a 	bl	8008630 <get_fattime>
 800b5fc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b604:	4619      	mov	r1, r3
 800b606:	4610      	mov	r0, r2
 800b608:	f7fd fd9e 	bl	8009148 <move_window>
 800b60c:	4603      	mov	r3, r0
 800b60e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b610:	7dfb      	ldrb	r3, [r7, #23]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d138      	bne.n	800b688 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	330b      	adds	r3, #11
 800b620:	781a      	ldrb	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	330b      	adds	r3, #11
 800b626:	f042 0220 	orr.w	r2, r2, #32
 800b62a:	b2d2      	uxtb	r2, r2
 800b62c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6818      	ldr	r0, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	461a      	mov	r2, r3
 800b638:	68f9      	ldr	r1, [r7, #12]
 800b63a:	f7fe faab 	bl	8009b94 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f103 021c 	add.w	r2, r3, #28
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	4619      	mov	r1, r3
 800b64a:	4610      	mov	r0, r2
 800b64c:	f7fd fb22 	bl	8008c94 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3316      	adds	r3, #22
 800b654:	6939      	ldr	r1, [r7, #16]
 800b656:	4618      	mov	r0, r3
 800b658:	f7fd fb1c 	bl	8008c94 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	3312      	adds	r3, #18
 800b660:	2100      	movs	r1, #0
 800b662:	4618      	mov	r0, r3
 800b664:	f7fd fafb 	bl	8008c5e <st_word>
					fs->wflag = 1;
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	2201      	movs	r2, #1
 800b66c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	4618      	mov	r0, r3
 800b672:	f7fd fd97 	bl	80091a4 <sync_fs>
 800b676:	4603      	mov	r3, r0
 800b678:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	7d1b      	ldrb	r3, [r3, #20]
 800b67e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b682:	b2da      	uxtb	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b688:	7dfb      	ldrb	r3, [r7, #23]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3718      	adds	r7, #24
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f7ff ff7b 	bl	800b596 <f_sync>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b6a4:	7bfb      	ldrb	r3, [r7, #15]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d118      	bne.n	800b6dc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f107 0208 	add.w	r2, r7, #8
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7ff fbc0 	bl	800ae38 <validate>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10c      	bne.n	800b6dc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fd fc9a 	bl	8009000 <dec_lock>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d102      	bne.n	800b6dc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b090      	sub	sp, #64	; 0x40
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b6f0:	f107 0108 	add.w	r1, r7, #8
 800b6f4:	1d3b      	adds	r3, r7, #4
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7ff f94d 	bl	800a998 <find_volume>
 800b6fe:	4603      	mov	r3, r0
 800b700:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b704:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d11f      	bne.n	800b74c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	f107 0308 	add.w	r3, r7, #8
 800b712:	4611      	mov	r1, r2
 800b714:	4618      	mov	r0, r3
 800b716:	f7ff f833 	bl	800a780 <follow_path>
 800b71a:	4603      	mov	r3, r0
 800b71c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b720:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b724:	2b00      	cmp	r3, #0
 800b726:	d111      	bne.n	800b74c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b72c:	b25b      	sxtb	r3, r3
 800b72e:	2b00      	cmp	r3, #0
 800b730:	da03      	bge.n	800b73a <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b732:	2306      	movs	r3, #6
 800b734:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b738:	e008      	b.n	800b74c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d005      	beq.n	800b74c <f_stat+0x66>
 800b740:	f107 0308 	add.w	r3, r7, #8
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	4618      	mov	r0, r3
 800b748:	f7fe fd84 	bl	800a254 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b74c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b750:	4618      	mov	r0, r3
 800b752:	3740      	adds	r7, #64	; 0x40
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b758:	b480      	push	{r7}
 800b75a:	b087      	sub	sp, #28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	4613      	mov	r3, r2
 800b764:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b766:	2301      	movs	r3, #1
 800b768:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b76e:	4b1f      	ldr	r3, [pc, #124]	; (800b7ec <FATFS_LinkDriverEx+0x94>)
 800b770:	7a5b      	ldrb	r3, [r3, #9]
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b00      	cmp	r3, #0
 800b776:	d131      	bne.n	800b7dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b778:	4b1c      	ldr	r3, [pc, #112]	; (800b7ec <FATFS_LinkDriverEx+0x94>)
 800b77a:	7a5b      	ldrb	r3, [r3, #9]
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	461a      	mov	r2, r3
 800b780:	4b1a      	ldr	r3, [pc, #104]	; (800b7ec <FATFS_LinkDriverEx+0x94>)
 800b782:	2100      	movs	r1, #0
 800b784:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b786:	4b19      	ldr	r3, [pc, #100]	; (800b7ec <FATFS_LinkDriverEx+0x94>)
 800b788:	7a5b      	ldrb	r3, [r3, #9]
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	4a17      	ldr	r2, [pc, #92]	; (800b7ec <FATFS_LinkDriverEx+0x94>)
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	4413      	add	r3, r2
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b796:	4b15      	ldr	r3, [pc, #84]	; (800b7ec <FATFS_LinkDriverEx+0x94>)
 800b798:	7a5b      	ldrb	r3, [r3, #9]
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	461a      	mov	r2, r3
 800b79e:	4b13      	ldr	r3, [pc, #76]	; (800b7ec <FATFS_LinkDriverEx+0x94>)
 800b7a0:	4413      	add	r3, r2
 800b7a2:	79fa      	ldrb	r2, [r7, #7]
 800b7a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b7a6:	4b11      	ldr	r3, [pc, #68]	; (800b7ec <FATFS_LinkDriverEx+0x94>)
 800b7a8:	7a5b      	ldrb	r3, [r3, #9]
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	b2d1      	uxtb	r1, r2
 800b7b0:	4a0e      	ldr	r2, [pc, #56]	; (800b7ec <FATFS_LinkDriverEx+0x94>)
 800b7b2:	7251      	strb	r1, [r2, #9]
 800b7b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b7b6:	7dbb      	ldrb	r3, [r7, #22]
 800b7b8:	3330      	adds	r3, #48	; 0x30
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	223a      	movs	r2, #58	; 0x3a
 800b7c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	3302      	adds	r3, #2
 800b7cc:	222f      	movs	r2, #47	; 0x2f
 800b7ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	3303      	adds	r3, #3
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	371c      	adds	r7, #28
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	240008f4 	.word	0x240008f4

0800b7f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7ff ffaa 	bl	800b758 <FATFS_LinkDriverEx>
 800b804:	4603      	mov	r3, r0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
	...

0800b810 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	4603      	mov	r3, r0
 800b818:	6039      	str	r1, [r7, #0]
 800b81a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b81c:	88fb      	ldrh	r3, [r7, #6]
 800b81e:	2b7f      	cmp	r3, #127	; 0x7f
 800b820:	d802      	bhi.n	800b828 <ff_convert+0x18>
		c = chr;
 800b822:	88fb      	ldrh	r3, [r7, #6]
 800b824:	81fb      	strh	r3, [r7, #14]
 800b826:	e025      	b.n	800b874 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00b      	beq.n	800b846 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b82e:	88fb      	ldrh	r3, [r7, #6]
 800b830:	2bff      	cmp	r3, #255	; 0xff
 800b832:	d805      	bhi.n	800b840 <ff_convert+0x30>
 800b834:	88fb      	ldrh	r3, [r7, #6]
 800b836:	3b80      	subs	r3, #128	; 0x80
 800b838:	4a12      	ldr	r2, [pc, #72]	; (800b884 <ff_convert+0x74>)
 800b83a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b83e:	e000      	b.n	800b842 <ff_convert+0x32>
 800b840:	2300      	movs	r3, #0
 800b842:	81fb      	strh	r3, [r7, #14]
 800b844:	e016      	b.n	800b874 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b846:	2300      	movs	r3, #0
 800b848:	81fb      	strh	r3, [r7, #14]
 800b84a:	e009      	b.n	800b860 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b84c:	89fb      	ldrh	r3, [r7, #14]
 800b84e:	4a0d      	ldr	r2, [pc, #52]	; (800b884 <ff_convert+0x74>)
 800b850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b854:	88fa      	ldrh	r2, [r7, #6]
 800b856:	429a      	cmp	r2, r3
 800b858:	d006      	beq.n	800b868 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b85a:	89fb      	ldrh	r3, [r7, #14]
 800b85c:	3301      	adds	r3, #1
 800b85e:	81fb      	strh	r3, [r7, #14]
 800b860:	89fb      	ldrh	r3, [r7, #14]
 800b862:	2b7f      	cmp	r3, #127	; 0x7f
 800b864:	d9f2      	bls.n	800b84c <ff_convert+0x3c>
 800b866:	e000      	b.n	800b86a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b868:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b86a:	89fb      	ldrh	r3, [r7, #14]
 800b86c:	3380      	adds	r3, #128	; 0x80
 800b86e:	b29b      	uxth	r3, r3
 800b870:	b2db      	uxtb	r3, r3
 800b872:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b874:	89fb      	ldrh	r3, [r7, #14]
}
 800b876:	4618      	mov	r0, r3
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	0800bb50 	.word	0x0800bb50

0800b888 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b888:	b480      	push	{r7}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	4603      	mov	r3, r0
 800b890:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b892:	88fb      	ldrh	r3, [r7, #6]
 800b894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b898:	d201      	bcs.n	800b89e <ff_wtoupper+0x16>
 800b89a:	4b3e      	ldr	r3, [pc, #248]	; (800b994 <ff_wtoupper+0x10c>)
 800b89c:	e000      	b.n	800b8a0 <ff_wtoupper+0x18>
 800b89e:	4b3e      	ldr	r3, [pc, #248]	; (800b998 <ff_wtoupper+0x110>)
 800b8a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	1c9a      	adds	r2, r3, #2
 800b8a6:	617a      	str	r2, [r7, #20]
 800b8a8:	881b      	ldrh	r3, [r3, #0]
 800b8aa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b8ac:	8a7b      	ldrh	r3, [r7, #18]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d068      	beq.n	800b984 <ff_wtoupper+0xfc>
 800b8b2:	88fa      	ldrh	r2, [r7, #6]
 800b8b4:	8a7b      	ldrh	r3, [r7, #18]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d364      	bcc.n	800b984 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	1c9a      	adds	r2, r3, #2
 800b8be:	617a      	str	r2, [r7, #20]
 800b8c0:	881b      	ldrh	r3, [r3, #0]
 800b8c2:	823b      	strh	r3, [r7, #16]
 800b8c4:	8a3b      	ldrh	r3, [r7, #16]
 800b8c6:	0a1b      	lsrs	r3, r3, #8
 800b8c8:	81fb      	strh	r3, [r7, #14]
 800b8ca:	8a3b      	ldrh	r3, [r7, #16]
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b8d0:	88fa      	ldrh	r2, [r7, #6]
 800b8d2:	8a79      	ldrh	r1, [r7, #18]
 800b8d4:	8a3b      	ldrh	r3, [r7, #16]
 800b8d6:	440b      	add	r3, r1
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	da49      	bge.n	800b970 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b8dc:	89fb      	ldrh	r3, [r7, #14]
 800b8de:	2b08      	cmp	r3, #8
 800b8e0:	d84f      	bhi.n	800b982 <ff_wtoupper+0xfa>
 800b8e2:	a201      	add	r2, pc, #4	; (adr r2, 800b8e8 <ff_wtoupper+0x60>)
 800b8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e8:	0800b90d 	.word	0x0800b90d
 800b8ec:	0800b91f 	.word	0x0800b91f
 800b8f0:	0800b935 	.word	0x0800b935
 800b8f4:	0800b93d 	.word	0x0800b93d
 800b8f8:	0800b945 	.word	0x0800b945
 800b8fc:	0800b94d 	.word	0x0800b94d
 800b900:	0800b955 	.word	0x0800b955
 800b904:	0800b95d 	.word	0x0800b95d
 800b908:	0800b965 	.word	0x0800b965
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b90c:	88fa      	ldrh	r2, [r7, #6]
 800b90e:	8a7b      	ldrh	r3, [r7, #18]
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	005b      	lsls	r3, r3, #1
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	4413      	add	r3, r2
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	80fb      	strh	r3, [r7, #6]
 800b91c:	e027      	b.n	800b96e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b91e:	88fa      	ldrh	r2, [r7, #6]
 800b920:	8a7b      	ldrh	r3, [r7, #18]
 800b922:	1ad3      	subs	r3, r2, r3
 800b924:	b29b      	uxth	r3, r3
 800b926:	f003 0301 	and.w	r3, r3, #1
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	88fa      	ldrh	r2, [r7, #6]
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	80fb      	strh	r3, [r7, #6]
 800b932:	e01c      	b.n	800b96e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b934:	88fb      	ldrh	r3, [r7, #6]
 800b936:	3b10      	subs	r3, #16
 800b938:	80fb      	strh	r3, [r7, #6]
 800b93a:	e018      	b.n	800b96e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b93c:	88fb      	ldrh	r3, [r7, #6]
 800b93e:	3b20      	subs	r3, #32
 800b940:	80fb      	strh	r3, [r7, #6]
 800b942:	e014      	b.n	800b96e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b944:	88fb      	ldrh	r3, [r7, #6]
 800b946:	3b30      	subs	r3, #48	; 0x30
 800b948:	80fb      	strh	r3, [r7, #6]
 800b94a:	e010      	b.n	800b96e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b94c:	88fb      	ldrh	r3, [r7, #6]
 800b94e:	3b1a      	subs	r3, #26
 800b950:	80fb      	strh	r3, [r7, #6]
 800b952:	e00c      	b.n	800b96e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b954:	88fb      	ldrh	r3, [r7, #6]
 800b956:	3308      	adds	r3, #8
 800b958:	80fb      	strh	r3, [r7, #6]
 800b95a:	e008      	b.n	800b96e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b95c:	88fb      	ldrh	r3, [r7, #6]
 800b95e:	3b50      	subs	r3, #80	; 0x50
 800b960:	80fb      	strh	r3, [r7, #6]
 800b962:	e004      	b.n	800b96e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b964:	88fb      	ldrh	r3, [r7, #6]
 800b966:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b96a:	80fb      	strh	r3, [r7, #6]
 800b96c:	bf00      	nop
			}
			break;
 800b96e:	e008      	b.n	800b982 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b970:	89fb      	ldrh	r3, [r7, #14]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d195      	bne.n	800b8a2 <ff_wtoupper+0x1a>
 800b976:	8a3b      	ldrh	r3, [r7, #16]
 800b978:	005b      	lsls	r3, r3, #1
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	4413      	add	r3, r2
 800b97e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b980:	e78f      	b.n	800b8a2 <ff_wtoupper+0x1a>
			break;
 800b982:	bf00      	nop
	}

	return chr;
 800b984:	88fb      	ldrh	r3, [r7, #6]
}
 800b986:	4618      	mov	r0, r3
 800b988:	371c      	adds	r7, #28
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	0800bc50 	.word	0x0800bc50
 800b998:	0800be44 	.word	0x0800be44

0800b99c <__libc_init_array>:
 800b99c:	b570      	push	{r4, r5, r6, lr}
 800b99e:	4d0d      	ldr	r5, [pc, #52]	; (800b9d4 <__libc_init_array+0x38>)
 800b9a0:	4c0d      	ldr	r4, [pc, #52]	; (800b9d8 <__libc_init_array+0x3c>)
 800b9a2:	1b64      	subs	r4, r4, r5
 800b9a4:	10a4      	asrs	r4, r4, #2
 800b9a6:	2600      	movs	r6, #0
 800b9a8:	42a6      	cmp	r6, r4
 800b9aa:	d109      	bne.n	800b9c0 <__libc_init_array+0x24>
 800b9ac:	4d0b      	ldr	r5, [pc, #44]	; (800b9dc <__libc_init_array+0x40>)
 800b9ae:	4c0c      	ldr	r4, [pc, #48]	; (800b9e0 <__libc_init_array+0x44>)
 800b9b0:	f000 f820 	bl	800b9f4 <_init>
 800b9b4:	1b64      	subs	r4, r4, r5
 800b9b6:	10a4      	asrs	r4, r4, #2
 800b9b8:	2600      	movs	r6, #0
 800b9ba:	42a6      	cmp	r6, r4
 800b9bc:	d105      	bne.n	800b9ca <__libc_init_array+0x2e>
 800b9be:	bd70      	pop	{r4, r5, r6, pc}
 800b9c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9c4:	4798      	blx	r3
 800b9c6:	3601      	adds	r6, #1
 800b9c8:	e7ee      	b.n	800b9a8 <__libc_init_array+0xc>
 800b9ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ce:	4798      	blx	r3
 800b9d0:	3601      	adds	r6, #1
 800b9d2:	e7f2      	b.n	800b9ba <__libc_init_array+0x1e>
 800b9d4:	0800bf08 	.word	0x0800bf08
 800b9d8:	0800bf08 	.word	0x0800bf08
 800b9dc:	0800bf08 	.word	0x0800bf08
 800b9e0:	0800bf0c 	.word	0x0800bf0c

0800b9e4 <memset>:
 800b9e4:	4402      	add	r2, r0
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d100      	bne.n	800b9ee <memset+0xa>
 800b9ec:	4770      	bx	lr
 800b9ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b9f2:	e7f9      	b.n	800b9e8 <memset+0x4>

0800b9f4 <_init>:
 800b9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f6:	bf00      	nop
 800b9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fa:	bc08      	pop	{r3}
 800b9fc:	469e      	mov	lr, r3
 800b9fe:	4770      	bx	lr

0800ba00 <_fini>:
 800ba00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba02:	bf00      	nop
 800ba04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba06:	bc08      	pop	{r3}
 800ba08:	469e      	mov	lr, r3
 800ba0a:	4770      	bx	lr

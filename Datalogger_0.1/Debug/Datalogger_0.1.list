
Datalogger_0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073a0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007638  08007638  00017638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800767c  0800767c  0001767c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08007680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b0  24000010  08007690  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000c00  240000c0  08007690  000200c0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e745  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000024ec  00000000  00000000  0002e783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bb8  00000000  00000000  00030c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a80  00000000  00000000  00031828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00003ac0  00000000  00000000  000322a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00010498  00000000  00000000  00035d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00154984  00000000  00000000  00046200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0019ab84  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002d54  00000000  00000000  0019abd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007620 	.word	0x08007620

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007620 	.word	0x08007620

080002d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b20      	ldr	r3, [pc, #128]	; (8000370 <MX_GPIO_Init+0x98>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a1e      	ldr	r2, [pc, #120]	; (8000370 <MX_GPIO_Init+0x98>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <MX_GPIO_Init+0x98>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800030c:	4b18      	ldr	r3, [pc, #96]	; (8000370 <MX_GPIO_Init+0x98>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a17      	ldr	r2, [pc, #92]	; (8000370 <MX_GPIO_Init+0x98>)
 8000314:	f043 0308 	orr.w	r3, r3, #8
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b14      	ldr	r3, [pc, #80]	; (8000370 <MX_GPIO_Init+0x98>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0308 	and.w	r3, r3, #8
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Can1_Pin|Gps1_Pin|Datalog1_Pin|Accel1_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	2178      	movs	r1, #120	; 0x78
 800032e:	4811      	ldr	r0, [pc, #68]	; (8000374 <MX_GPIO_Init+0x9c>)
 8000330:	f000 fe16 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = cd_Pin;
 8000334:	2301      	movs	r3, #1
 8000336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(cd_GPIO_Port, &GPIO_InitStruct);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	4619      	mov	r1, r3
 8000346:	480b      	ldr	r0, [pc, #44]	; (8000374 <MX_GPIO_Init+0x9c>)
 8000348:	f000 fc42 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Can1_Pin|Gps1_Pin|Datalog1_Pin|Accel1_Pin;
 800034c:	2378      	movs	r3, #120	; 0x78
 800034e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000350:	2311      	movs	r3, #17
 8000352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000358:	2300      	movs	r3, #0
 800035a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800035c:	f107 030c 	add.w	r3, r7, #12
 8000360:	4619      	mov	r1, r3
 8000362:	4804      	ldr	r0, [pc, #16]	; (8000374 <MX_GPIO_Init+0x9c>)
 8000364:	f000 fc34 	bl	8000bd0 <HAL_GPIO_Init>

}
 8000368:	bf00      	nop
 800036a:	3720      	adds	r7, #32
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	58024400 	.word	0x58024400
 8000374:	58020c00 	.word	0x58020c00

08000378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000378:	b5b0      	push	{r4, r5, r7, lr}
 800037a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <main+0x3c>)
 8000382:	f507 7401 	add.w	r4, r7, #516	; 0x204
 8000386:	461d      	mov	r5, r3
 8000388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800038a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800038c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000390:	c403      	stmia	r4!, {r0, r1}
 8000392:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000394:	f000 fa4a 	bl	800082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000398:	f000 f810 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039c:	f7ff ff9c 	bl	80002d8 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80003a0:	f000 f890 	bl	80004c4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80003a4:	f006 fef4 	bl	8007190 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOD, Gps1_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2110      	movs	r1, #16
 80003ac:	4802      	ldr	r0, [pc, #8]	; (80003b8 <main+0x40>)
 80003ae:	f000 fdd7 	bl	8000f60 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <main+0x3a>
 80003b4:	08007638 	.word	0x08007638
 80003b8:	58020c00 	.word	0x58020c00

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b09c      	sub	sp, #112	; 0x70
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c6:	224c      	movs	r2, #76	; 0x4c
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f007 f920 	bl	8007610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2220      	movs	r2, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f007 f91a 	bl	8007610 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003dc:	2002      	movs	r0, #2
 80003de:	f000 fdd9 	bl	8000f94 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003e2:	2300      	movs	r3, #0
 80003e4:	603b      	str	r3, [r7, #0]
 80003e6:	4b32      	ldr	r3, [pc, #200]	; (80004b0 <SystemClock_Config+0xf4>)
 80003e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ea:	4a31      	ldr	r2, [pc, #196]	; (80004b0 <SystemClock_Config+0xf4>)
 80003ec:	f023 0301 	bic.w	r3, r3, #1
 80003f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003f2:	4b2f      	ldr	r3, [pc, #188]	; (80004b0 <SystemClock_Config+0xf4>)
 80003f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	603b      	str	r3, [r7, #0]
 80003fc:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <SystemClock_Config+0xf8>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000404:	4a2b      	ldr	r2, [pc, #172]	; (80004b4 <SystemClock_Config+0xf8>)
 8000406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <SystemClock_Config+0xf8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000418:	bf00      	nop
 800041a:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <SystemClock_Config+0xf8>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000426:	d1f8      	bne.n	800041a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000428:	2302      	movs	r3, #2
 800042a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800042c:	2301      	movs	r3, #1
 800042e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000430:	2340      	movs	r3, #64	; 0x40
 8000432:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	2302      	movs	r3, #2
 8000436:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000438:	2300      	movs	r3, #0
 800043a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800043c:	2304      	movs	r3, #4
 800043e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000440:	2309      	movs	r3, #9
 8000442:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000444:	2302      	movs	r3, #2
 8000446:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000448:	2302      	movs	r3, #2
 800044a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800044c:	2302      	movs	r3, #2
 800044e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000450:	230c      	movs	r3, #12
 8000452:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000454:	2302      	movs	r3, #2
 8000456:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000458:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800045c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fdd0 	bl	8001008 <HAL_RCC_OscConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800046e:	f000 f823 	bl	80004b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000472:	233f      	movs	r3, #63	; 0x3f
 8000474:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2101      	movs	r1, #1
 8000496:	4618      	mov	r0, r3
 8000498:	f001 fa10 	bl	80018bc <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80004a2:	f000 f809 	bl	80004b8 <Error_Handler>
  }
}
 80004a6:	bf00      	nop
 80004a8:	3770      	adds	r7, #112	; 0x70
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	58000400 	.word	0x58000400
 80004b4:	58024800 	.word	0x58024800

080004b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
}
 80004be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <Error_Handler+0x8>
	...

080004c4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_Init 0 */
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */
  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <MX_SDMMC1_SD_Init+0x34>)
 80004ca:	4a0c      	ldr	r2, [pc, #48]	; (80004fc <MX_SDMMC1_SD_Init+0x38>)
 80004cc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <MX_SDMMC1_SD_Init+0x34>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_SDMMC1_SD_Init+0x34>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <MX_SDMMC1_SD_Init+0x34>)
 80004dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004e0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <MX_SDMMC1_SD_Init+0x34>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <MX_SDMMC1_SD_Init+0x34>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  /* USER CODE END SDMMC1_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	2400002c 	.word	0x2400002c
 80004fc:	52007000 	.word	0x52007000

08000500 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b0bc      	sub	sp, #240	; 0xf0
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000518:	f107 0318 	add.w	r3, r7, #24
 800051c:	22c0      	movs	r2, #192	; 0xc0
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f007 f875 	bl	8007610 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a3c      	ldr	r2, [pc, #240]	; (800061c <HAL_SD_MspInit+0x11c>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d171      	bne.n	8000614 <HAL_SD_MspInit+0x114>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */
  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000530:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000534:	f04f 0300 	mov.w	r3, #0
 8000538:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800053c:	2300      	movs	r3, #0
 800053e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000540:	f107 0318 	add.w	r3, r7, #24
 8000544:	4618      	mov	r0, r3
 8000546:	f001 fd2f 	bl	8001fa8 <HAL_RCCEx_PeriphCLKConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000550:	f7ff ffb2 	bl	80004b8 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000554:	4b32      	ldr	r3, [pc, #200]	; (8000620 <HAL_SD_MspInit+0x120>)
 8000556:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800055a:	4a31      	ldr	r2, [pc, #196]	; (8000620 <HAL_SD_MspInit+0x120>)
 800055c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000560:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000564:	4b2e      	ldr	r3, [pc, #184]	; (8000620 <HAL_SD_MspInit+0x120>)
 8000566:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800056a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <HAL_SD_MspInit+0x120>)
 8000574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000578:	4a29      	ldr	r2, [pc, #164]	; (8000620 <HAL_SD_MspInit+0x120>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000582:	4b27      	ldr	r3, [pc, #156]	; (8000620 <HAL_SD_MspInit+0x120>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <HAL_SD_MspInit+0x120>)
 8000592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000596:	4a22      	ldr	r2, [pc, #136]	; (8000620 <HAL_SD_MspInit+0x120>)
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <HAL_SD_MspInit+0x120>)
 80005a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80005ae:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80005b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80005c8:	230c      	movs	r3, #12
 80005ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80005d2:	4619      	mov	r1, r3
 80005d4:	4813      	ldr	r0, [pc, #76]	; (8000624 <HAL_SD_MspInit+0x124>)
 80005d6:	f000 fafb 	bl	8000bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005da:	2304      	movs	r3, #4
 80005dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ec:	2303      	movs	r3, #3
 80005ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80005f2:	230c      	movs	r3, #12
 80005f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80005fc:	4619      	mov	r1, r3
 80005fe:	480a      	ldr	r0, [pc, #40]	; (8000628 <HAL_SD_MspInit+0x128>)
 8000600:	f000 fae6 	bl	8000bd0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	2031      	movs	r0, #49	; 0x31
 800060a:	f000 faac 	bl	8000b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800060e:	2031      	movs	r0, #49	; 0x31
 8000610:	f000 fac3 	bl	8000b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */
  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000614:	bf00      	nop
 8000616:	37f0      	adds	r7, #240	; 0xf0
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	52007000 	.word	0x52007000
 8000620:	58024400 	.word	0x58024400
 8000624:	58020800 	.word	0x58020800
 8000628:	58020c00 	.word	0x58020c00

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_MspInit+0x30>)
 8000634:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000638:	4a08      	ldr	r2, [pc, #32]	; (800065c <HAL_MspInit+0x30>)
 800063a:	f043 0302 	orr.w	r3, r3, #2
 800063e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_MspInit+0x30>)
 8000644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000648:	f003 0302 	and.w	r3, r3, #2
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	58024400 	.word	0x58024400

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <NMI_Handler+0x4>

08000666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <HardFault_Handler+0x4>

0800066c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <MemManage_Handler+0x4>

08000672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <UsageFault_Handler+0x4>

0800067e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ac:	f000 f930 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80006b8:	4802      	ldr	r0, [pc, #8]	; (80006c4 <SDMMC1_IRQHandler+0x10>)
 80006ba:	f004 fdab 	bl	8005214 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2400002c 	.word	0x2400002c

080006c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006cc:	4b37      	ldr	r3, [pc, #220]	; (80007ac <SystemInit+0xe4>)
 80006ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006d2:	4a36      	ldr	r2, [pc, #216]	; (80007ac <SystemInit+0xe4>)
 80006d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <SystemInit+0xe8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <SystemInit+0xe8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <SystemInit+0xe8>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <SystemInit+0xec>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a2d      	ldr	r2, [pc, #180]	; (80007b4 <SystemInit+0xec>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <SystemInit+0xec>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <SystemInit+0xec>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4929      	ldr	r1, [pc, #164]	; (80007b4 <SystemInit+0xec>)
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <SystemInit+0xf0>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <SystemInit+0xe8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemInit+0xe8>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemInit+0xe8>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <SystemInit+0xec>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <SystemInit+0xec>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <SystemInit+0xec>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <SystemInit+0xec>)
 8000746:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <SystemInit+0xf4>)
 8000748:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <SystemInit+0xec>)
 800074c:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <SystemInit+0xf8>)
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <SystemInit+0xec>)
 8000752:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <SystemInit+0xfc>)
 8000754:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <SystemInit+0xec>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <SystemInit+0xec>)
 800075e:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <SystemInit+0xfc>)
 8000760:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <SystemInit+0xec>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <SystemInit+0xec>)
 800076a:	4a16      	ldr	r2, [pc, #88]	; (80007c4 <SystemInit+0xfc>)
 800076c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0xec>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0xec>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <SystemInit+0xec>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <SystemInit+0xec>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <SystemInit+0x100>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <SystemInit+0x104>)
 800078c:	4013      	ands	r3, r2
 800078e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000792:	d202      	bcs.n	800079a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <SystemInit+0x108>)
 8000796:	2201      	movs	r2, #1
 8000798:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <SystemInit+0x10c>)
 800079c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00
 80007b0:	52002000 	.word	0x52002000
 80007b4:	58024400 	.word	0x58024400
 80007b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007bc:	02020200 	.word	0x02020200
 80007c0:	01ff0000 	.word	0x01ff0000
 80007c4:	01010280 	.word	0x01010280
 80007c8:	5c001000 	.word	0x5c001000
 80007cc:	ffff0000 	.word	0xffff0000
 80007d0:	51008108 	.word	0x51008108
 80007d4:	52004000 	.word	0x52004000

080007d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000810 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007dc:	f7ff ff74 	bl	80006c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007e2:	490d      	ldr	r1, [pc, #52]	; (8000818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e8:	e002      	b.n	80007f0 <LoopCopyDataInit>

080007ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ee:	3304      	adds	r3, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f4:	d3f9      	bcc.n	80007ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007f8:	4c0a      	ldr	r4, [pc, #40]	; (8000824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007fc:	e001      	b.n	8000802 <LoopFillZerobss>

080007fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000800:	3204      	adds	r2, #4

08000802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000804:	d3fb      	bcc.n	80007fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000806:	f006 fedf 	bl	80075c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800080a:	f7ff fdb5 	bl	8000378 <main>
  bx  lr
 800080e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000810:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000814:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000818:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800081c:	08007680 	.word	0x08007680
  ldr r2, =_sbss
 8000820:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000824:	240000c0 	.word	0x240000c0

08000828 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC3_IRQHandler>
	...

0800082c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000832:	2003      	movs	r0, #3
 8000834:	f000 f98c 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000838:	f001 f9f6 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 800083c:	4602      	mov	r2, r0
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_Init+0x68>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	f003 030f 	and.w	r3, r3, #15
 8000848:	4913      	ldr	r1, [pc, #76]	; (8000898 <HAL_Init+0x6c>)
 800084a:	5ccb      	ldrb	r3, [r1, r3]
 800084c:	f003 031f 	and.w	r3, r3, #31
 8000850:	fa22 f303 	lsr.w	r3, r2, r3
 8000854:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_Init+0x68>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_Init+0x6c>)
 8000860:	5cd3      	ldrb	r3, [r2, r3]
 8000862:	f003 031f 	and.w	r3, r3, #31
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	fa22 f303 	lsr.w	r3, r2, r3
 800086c:	4a0b      	ldr	r2, [pc, #44]	; (800089c <HAL_Init+0x70>)
 800086e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000870:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <HAL_Init+0x74>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000876:	200f      	movs	r0, #15
 8000878:	f000 f814 	bl	80008a4 <HAL_InitTick>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e002      	b.n	800088c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000886:	f7ff fed1 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	58024400 	.word	0x58024400
 8000898:	08007654 	.word	0x08007654
 800089c:	24000004 	.word	0x24000004
 80008a0:	24000000 	.word	0x24000000

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_InitTick+0x60>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	e021      	b.n	80008fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <HAL_InitTick+0x64>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_InitTick+0x60>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f971 	bl	8000bb6 <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f000 f93b 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <HAL_InitTick+0x68>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2400000c 	.word	0x2400000c
 8000908:	24000000 	.word	0x24000000
 800090c:	24000008 	.word	0x24000008

08000910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x20>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_IncTick+0x24>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_IncTick+0x24>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	2400000c 	.word	0x2400000c
 8000934:	240000a8 	.word	0x240000a8

08000938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <HAL_GetTick+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	240000a8 	.word	0x240000a8

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff ffee 	bl	8000938 <HAL_GetTick>
 800095c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000976:	bf00      	nop
 8000978:	f7ff ffde 	bl	8000938 <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2400000c 	.word	0x2400000c

08000998 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <HAL_GetREVID+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	0c1b      	lsrs	r3, r3, #16
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	5c001000 	.word	0x5c001000

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <__NVIC_SetPriorityGrouping+0x40>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	4313      	orrs	r3, r2
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <__NVIC_SetPriorityGrouping+0x40>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00
 80009f4:	05fa0000 	.word	0x05fa0000

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4907      	ldr	r1, [pc, #28]	; (8000a4c <__NVIC_EnableIRQ+0x38>)
 8000a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f7ff ff8e 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff29 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff40 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff90 	bl	8000aa4 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5f 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff33 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffa4 	bl	8000b0c <SysTick_Config>
 8000bc4:	4603      	mov	r3, r0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bde:	4b89      	ldr	r3, [pc, #548]	; (8000e04 <HAL_GPIO_Init+0x234>)
 8000be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000be2:	e194      	b.n	8000f0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	2101      	movs	r1, #1
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 8186 	beq.w	8000f08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d005      	beq.n	8000c14 <HAL_GPIO_Init+0x44>
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d130      	bne.n	8000c76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	2203      	movs	r2, #3
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4013      	ands	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	091b      	lsrs	r3, r3, #4
 8000c60:	f003 0201 	and.w	r2, r3, #1
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d017      	beq.n	8000cb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d123      	bne.n	8000d06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	691a      	ldr	r2, [r3, #16]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	08da      	lsrs	r2, r3, #3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3208      	adds	r2, #8
 8000d00:	69b9      	ldr	r1, [r7, #24]
 8000d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	2203      	movs	r2, #3
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0203 	and.w	r2, r3, #3
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 80e0 	beq.w	8000f08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d48:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <HAL_GPIO_Init+0x238>)
 8000d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d4e:	4a2e      	ldr	r2, [pc, #184]	; (8000e08 <HAL_GPIO_Init+0x238>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <HAL_GPIO_Init+0x238>)
 8000d5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d66:	4a29      	ldr	r2, [pc, #164]	; (8000e0c <HAL_GPIO_Init+0x23c>)
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	220f      	movs	r2, #15
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a20      	ldr	r2, [pc, #128]	; (8000e10 <HAL_GPIO_Init+0x240>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d052      	beq.n	8000e38 <HAL_GPIO_Init+0x268>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <HAL_GPIO_Init+0x244>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d031      	beq.n	8000dfe <HAL_GPIO_Init+0x22e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <HAL_GPIO_Init+0x248>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d02b      	beq.n	8000dfa <HAL_GPIO_Init+0x22a>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a1d      	ldr	r2, [pc, #116]	; (8000e1c <HAL_GPIO_Init+0x24c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d025      	beq.n	8000df6 <HAL_GPIO_Init+0x226>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <HAL_GPIO_Init+0x250>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d01f      	beq.n	8000df2 <HAL_GPIO_Init+0x222>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <HAL_GPIO_Init+0x254>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d019      	beq.n	8000dee <HAL_GPIO_Init+0x21e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <HAL_GPIO_Init+0x258>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0x21a>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <HAL_GPIO_Init+0x25c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d00d      	beq.n	8000de6 <HAL_GPIO_Init+0x216>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <HAL_GPIO_Init+0x260>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d007      	beq.n	8000de2 <HAL_GPIO_Init+0x212>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_GPIO_Init+0x264>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <HAL_GPIO_Init+0x20e>
 8000dda:	2309      	movs	r3, #9
 8000ddc:	e02d      	b.n	8000e3a <HAL_GPIO_Init+0x26a>
 8000dde:	230a      	movs	r3, #10
 8000de0:	e02b      	b.n	8000e3a <HAL_GPIO_Init+0x26a>
 8000de2:	2308      	movs	r3, #8
 8000de4:	e029      	b.n	8000e3a <HAL_GPIO_Init+0x26a>
 8000de6:	2307      	movs	r3, #7
 8000de8:	e027      	b.n	8000e3a <HAL_GPIO_Init+0x26a>
 8000dea:	2306      	movs	r3, #6
 8000dec:	e025      	b.n	8000e3a <HAL_GPIO_Init+0x26a>
 8000dee:	2305      	movs	r3, #5
 8000df0:	e023      	b.n	8000e3a <HAL_GPIO_Init+0x26a>
 8000df2:	2304      	movs	r3, #4
 8000df4:	e021      	b.n	8000e3a <HAL_GPIO_Init+0x26a>
 8000df6:	2303      	movs	r3, #3
 8000df8:	e01f      	b.n	8000e3a <HAL_GPIO_Init+0x26a>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e01d      	b.n	8000e3a <HAL_GPIO_Init+0x26a>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e01b      	b.n	8000e3a <HAL_GPIO_Init+0x26a>
 8000e02:	bf00      	nop
 8000e04:	58000080 	.word	0x58000080
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	58000400 	.word	0x58000400
 8000e10:	58020000 	.word	0x58020000
 8000e14:	58020400 	.word	0x58020400
 8000e18:	58020800 	.word	0x58020800
 8000e1c:	58020c00 	.word	0x58020c00
 8000e20:	58021000 	.word	0x58021000
 8000e24:	58021400 	.word	0x58021400
 8000e28:	58021800 	.word	0x58021800
 8000e2c:	58021c00 	.word	0x58021c00
 8000e30:	58022000 	.word	0x58022000
 8000e34:	58022400 	.word	0x58022400
 8000e38:	2300      	movs	r3, #0
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	f002 0203 	and.w	r2, r2, #3
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	4093      	lsls	r3, r2
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4a:	4938      	ldr	r1, [pc, #224]	; (8000f2c <HAL_GPIO_Init+0x35c>)
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f47f ae63 	bne.w	8000be4 <HAL_GPIO_Init+0x14>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	3724      	adds	r7, #36	; 0x24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	58000400 	.word	0x58000400

08000f30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e001      	b.n	8000f52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f7c:	e003      	b.n	8000f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	041a      	lsls	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_PWREx_ConfigSupply+0x70>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d00a      	beq.n	8000fbe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_PWREx_ConfigSupply+0x70>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d001      	beq.n	8000fba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e01f      	b.n	8000ffa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e01d      	b.n	8000ffa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_PWREx_ConfigSupply+0x70>)
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	f023 0207 	bic.w	r2, r3, #7
 8000fc6:	490f      	ldr	r1, [pc, #60]	; (8001004 <HAL_PWREx_ConfigSupply+0x70>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000fce:	f7ff fcb3 	bl	8000938 <HAL_GetTick>
 8000fd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fd4:	e009      	b.n	8000fea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000fd6:	f7ff fcaf 	bl	8000938 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe4:	d901      	bls.n	8000fea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e007      	b.n	8000ffa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_PWREx_ConfigSupply+0x70>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff6:	d1ee      	bne.n	8000fd6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	58024800 	.word	0x58024800

08001008 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	; 0x30
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	f000 bc48 	b.w	80018ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 8088 	beq.w	800113a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800102a:	4b99      	ldr	r3, [pc, #612]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001034:	4b96      	ldr	r3, [pc, #600]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103c:	2b10      	cmp	r3, #16
 800103e:	d007      	beq.n	8001050 <HAL_RCC_OscConfig+0x48>
 8001040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001042:	2b18      	cmp	r3, #24
 8001044:	d111      	bne.n	800106a <HAL_RCC_OscConfig+0x62>
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d10c      	bne.n	800106a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001050:	4b8f      	ldr	r3, [pc, #572]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d06d      	beq.n	8001138 <HAL_RCC_OscConfig+0x130>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d169      	bne.n	8001138 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	f000 bc21 	b.w	80018ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001072:	d106      	bne.n	8001082 <HAL_RCC_OscConfig+0x7a>
 8001074:	4b86      	ldr	r3, [pc, #536]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a85      	ldr	r2, [pc, #532]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 800107a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	e02e      	b.n	80010e0 <HAL_RCC_OscConfig+0xd8>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x9c>
 800108a:	4b81      	ldr	r3, [pc, #516]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a80      	ldr	r2, [pc, #512]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 8001090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	4b7e      	ldr	r3, [pc, #504]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a7d      	ldr	r2, [pc, #500]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 800109c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e01d      	b.n	80010e0 <HAL_RCC_OscConfig+0xd8>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0xc0>
 80010ae:	4b78      	ldr	r3, [pc, #480]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a77      	ldr	r2, [pc, #476]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b75      	ldr	r3, [pc, #468]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a74      	ldr	r2, [pc, #464]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e00b      	b.n	80010e0 <HAL_RCC_OscConfig+0xd8>
 80010c8:	4b71      	ldr	r3, [pc, #452]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a70      	ldr	r2, [pc, #448]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80010ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b6e      	ldr	r3, [pc, #440]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a6d      	ldr	r2, [pc, #436]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80010da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d013      	beq.n	8001110 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e8:	f7ff fc26 	bl	8000938 <HAL_GetTick>
 80010ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fc22 	bl	8000938 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e3d4      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001102:	4b63      	ldr	r3, [pc, #396]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0xe8>
 800110e:	e014      	b.n	800113a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001110:	f7ff fc12 	bl	8000938 <HAL_GetTick>
 8001114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001118:	f7ff fc0e 	bl	8000938 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b64      	cmp	r3, #100	; 0x64
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e3c0      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800112a:	4b59      	ldr	r3, [pc, #356]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x110>
 8001136:	e000      	b.n	800113a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 80ca 	beq.w	80012dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001148:	4b51      	ldr	r3, [pc, #324]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001150:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001152:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <HAL_RCC_OscConfig+0x166>
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	2b18      	cmp	r3, #24
 8001162:	d156      	bne.n	8001212 <HAL_RCC_OscConfig+0x20a>
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d151      	bne.n	8001212 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800116e:	4b48      	ldr	r3, [pc, #288]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	2b00      	cmp	r3, #0
 8001178:	d005      	beq.n	8001186 <HAL_RCC_OscConfig+0x17e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e392      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001186:	4b42      	ldr	r3, [pc, #264]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 0219 	bic.w	r2, r3, #25
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	493f      	ldr	r1, [pc, #252]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 8001194:	4313      	orrs	r3, r2
 8001196:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001198:	f7ff fbce 	bl	8000938 <HAL_GetTick>
 800119c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a0:	f7ff fbca 	bl	8000938 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e37c      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011b2:	4b37      	ldr	r3, [pc, #220]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011be:	f7ff fbeb 	bl	8000998 <HAL_GetREVID>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d817      	bhi.n	80011fc <HAL_RCC_OscConfig+0x1f4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	2b40      	cmp	r3, #64	; 0x40
 80011d2:	d108      	bne.n	80011e6 <HAL_RCC_OscConfig+0x1de>
 80011d4:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80011dc:	4a2c      	ldr	r2, [pc, #176]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80011de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011e4:	e07a      	b.n	80012dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	031b      	lsls	r3, r3, #12
 80011f4:	4926      	ldr	r1, [pc, #152]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011fa:	e06f      	b.n	80012dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	061b      	lsls	r3, r3, #24
 800120a:	4921      	ldr	r1, [pc, #132]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001210:	e064      	b.n	80012dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d047      	beq.n	80012aa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 0219 	bic.w	r2, r3, #25
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	491a      	ldr	r1, [pc, #104]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122c:	f7ff fb84 	bl	8000938 <HAL_GetTick>
 8001230:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001234:	f7ff fb80 	bl	8000938 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e332      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	f7ff fba1 	bl	8000998 <HAL_GetREVID>
 8001256:	4603      	mov	r3, r0
 8001258:	f241 0203 	movw	r2, #4099	; 0x1003
 800125c:	4293      	cmp	r3, r2
 800125e:	d819      	bhi.n	8001294 <HAL_RCC_OscConfig+0x28c>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	2b40      	cmp	r3, #64	; 0x40
 8001266:	d108      	bne.n	800127a <HAL_RCC_OscConfig+0x272>
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 8001272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001276:	6053      	str	r3, [r2, #4]
 8001278:	e030      	b.n	80012dc <HAL_RCC_OscConfig+0x2d4>
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	031b      	lsls	r3, r3, #12
 8001288:	4901      	ldr	r1, [pc, #4]	; (8001290 <HAL_RCC_OscConfig+0x288>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
 800128e:	e025      	b.n	80012dc <HAL_RCC_OscConfig+0x2d4>
 8001290:	58024400 	.word	0x58024400
 8001294:	4b9a      	ldr	r3, [pc, #616]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	061b      	lsls	r3, r3, #24
 80012a2:	4997      	ldr	r1, [pc, #604]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
 80012a8:	e018      	b.n	80012dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012aa:	4b95      	ldr	r3, [pc, #596]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a94      	ldr	r2, [pc, #592]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012b0:	f023 0301 	bic.w	r3, r3, #1
 80012b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b6:	f7ff fb3f 	bl	8000938 <HAL_GetTick>
 80012ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff fb3b 	bl	8000938 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e2ed      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012d0:	4b8b      	ldr	r3, [pc, #556]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f0      	bne.n	80012be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a9 	beq.w	800143c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ea:	4b85      	ldr	r3, [pc, #532]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012f4:	4b82      	ldr	r3, [pc, #520]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d007      	beq.n	8001310 <HAL_RCC_OscConfig+0x308>
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2b18      	cmp	r3, #24
 8001304:	d13a      	bne.n	800137c <HAL_RCC_OscConfig+0x374>
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d135      	bne.n	800137c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001310:	4b7b      	ldr	r3, [pc, #492]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_RCC_OscConfig+0x320>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	2b80      	cmp	r3, #128	; 0x80
 8001322:	d001      	beq.n	8001328 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e2c1      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001328:	f7ff fb36 	bl	8000998 <HAL_GetREVID>
 800132c:	4603      	mov	r3, r0
 800132e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001332:	4293      	cmp	r3, r2
 8001334:	d817      	bhi.n	8001366 <HAL_RCC_OscConfig+0x35e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	2b20      	cmp	r3, #32
 800133c:	d108      	bne.n	8001350 <HAL_RCC_OscConfig+0x348>
 800133e:	4b70      	ldr	r3, [pc, #448]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001346:	4a6e      	ldr	r2, [pc, #440]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800134c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800134e:	e075      	b.n	800143c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001350:	4b6b      	ldr	r3, [pc, #428]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	069b      	lsls	r3, r3, #26
 800135e:	4968      	ldr	r1, [pc, #416]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001364:	e06a      	b.n	800143c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001366:	4b66      	ldr	r3, [pc, #408]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	061b      	lsls	r3, r3, #24
 8001374:	4962      	ldr	r1, [pc, #392]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001376:	4313      	orrs	r3, r2
 8001378:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800137a:	e05f      	b.n	800143c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d042      	beq.n	800140a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001384:	4b5e      	ldr	r3, [pc, #376]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a5d      	ldr	r2, [pc, #372]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 800138a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800138e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fad2 	bl	8000938 <HAL_GetTick>
 8001394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001398:	f7ff face 	bl	8000938 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e280      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013aa:	4b55      	ldr	r3, [pc, #340]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013b6:	f7ff faef 	bl	8000998 <HAL_GetREVID>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d817      	bhi.n	80013f4 <HAL_RCC_OscConfig+0x3ec>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	2b20      	cmp	r3, #32
 80013ca:	d108      	bne.n	80013de <HAL_RCC_OscConfig+0x3d6>
 80013cc:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80013d4:	4a4a      	ldr	r2, [pc, #296]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80013d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013da:	6053      	str	r3, [r2, #4]
 80013dc:	e02e      	b.n	800143c <HAL_RCC_OscConfig+0x434>
 80013de:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	069b      	lsls	r3, r3, #26
 80013ec:	4944      	ldr	r1, [pc, #272]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]
 80013f2:	e023      	b.n	800143c <HAL_RCC_OscConfig+0x434>
 80013f4:	4b42      	ldr	r3, [pc, #264]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	061b      	lsls	r3, r3, #24
 8001402:	493f      	ldr	r1, [pc, #252]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001404:	4313      	orrs	r3, r2
 8001406:	60cb      	str	r3, [r1, #12]
 8001408:	e018      	b.n	800143c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800140a:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a3c      	ldr	r2, [pc, #240]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff fa8f 	bl	8000938 <HAL_GetTick>
 800141a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800141e:	f7ff fa8b 	bl	8000938 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e23d      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001430:	4b33      	ldr	r3, [pc, #204]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d036      	beq.n	80014b6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d019      	beq.n	8001484 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001454:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7ff fa6c 	bl	8000938 <HAL_GetTick>
 8001460:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fa68 	bl	8000938 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e21a      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x45c>
 8001482:	e018      	b.n	80014b6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001490:	f7ff fa52 	bl	8000938 <HAL_GetTick>
 8001494:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff fa4e 	bl	8000938 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e200      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80014ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0320 	and.w	r3, r3, #32
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d039      	beq.n	8001536 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d01c      	beq.n	8001504 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80014d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fa2f 	bl	8000938 <HAL_GetTick>
 80014da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014de:	f7ff fa2b 	bl	8000938 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e1dd      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x4d6>
 80014fc:	e01b      	b.n	8001536 <HAL_RCC_OscConfig+0x52e>
 80014fe:	bf00      	nop
 8001500:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001504:	4b9b      	ldr	r3, [pc, #620]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a9a      	ldr	r2, [pc, #616]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 800150a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800150e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001510:	f7ff fa12 	bl	8000938 <HAL_GetTick>
 8001514:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001518:	f7ff fa0e 	bl	8000938 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1c0      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800152a:	4b92      	ldr	r3, [pc, #584]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8081 	beq.w	8001646 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001544:	4b8c      	ldr	r3, [pc, #560]	; (8001778 <HAL_RCC_OscConfig+0x770>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a8b      	ldr	r2, [pc, #556]	; (8001778 <HAL_RCC_OscConfig+0x770>)
 800154a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001550:	f7ff f9f2 	bl	8000938 <HAL_GetTick>
 8001554:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001558:	f7ff f9ee 	bl	8000938 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1a0      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800156a:	4b83      	ldr	r3, [pc, #524]	; (8001778 <HAL_RCC_OscConfig+0x770>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d106      	bne.n	800158c <HAL_RCC_OscConfig+0x584>
 800157e:	4b7d      	ldr	r3, [pc, #500]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	4a7c      	ldr	r2, [pc, #496]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6713      	str	r3, [r2, #112]	; 0x70
 800158a:	e02d      	b.n	80015e8 <HAL_RCC_OscConfig+0x5e0>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10c      	bne.n	80015ae <HAL_RCC_OscConfig+0x5a6>
 8001594:	4b77      	ldr	r3, [pc, #476]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	4a76      	ldr	r2, [pc, #472]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	; 0x70
 80015a0:	4b74      	ldr	r3, [pc, #464]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	4a73      	ldr	r2, [pc, #460]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80015a6:	f023 0304 	bic.w	r3, r3, #4
 80015aa:	6713      	str	r3, [r2, #112]	; 0x70
 80015ac:	e01c      	b.n	80015e8 <HAL_RCC_OscConfig+0x5e0>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x5c8>
 80015b6:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a6e      	ldr	r2, [pc, #440]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
 80015c2:	4b6c      	ldr	r3, [pc, #432]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a6b      	ldr	r2, [pc, #428]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0x5e0>
 80015d0:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a67      	ldr	r2, [pc, #412]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	4b65      	ldr	r3, [pc, #404]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	4a64      	ldr	r2, [pc, #400]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80015e2:	f023 0304 	bic.w	r3, r3, #4
 80015e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d015      	beq.n	800161c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff f9a2 	bl	8000938 <HAL_GetTick>
 80015f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015f6:	e00a      	b.n	800160e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff f99e 	bl	8000938 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e14e      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800160e:	4b59      	ldr	r3, [pc, #356]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0ee      	beq.n	80015f8 <HAL_RCC_OscConfig+0x5f0>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff f98c 	bl	8000938 <HAL_GetTick>
 8001620:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff f988 	bl	8000938 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e138      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800163a:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ee      	bne.n	8001624 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 812d 	beq.w	80018aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001650:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001658:	2b18      	cmp	r3, #24
 800165a:	f000 80bd 	beq.w	80017d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	2b02      	cmp	r3, #2
 8001664:	f040 809e 	bne.w	80017a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a41      	ldr	r2, [pc, #260]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 800166e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff f960 	bl	8000938 <HAL_GetTick>
 8001678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff f95c 	bl	8000938 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e10e      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169a:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 800169c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <HAL_RCC_OscConfig+0x774>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016aa:	0112      	lsls	r2, r2, #4
 80016ac:	430a      	orrs	r2, r1
 80016ae:	4931      	ldr	r1, [pc, #196]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	628b      	str	r3, [r1, #40]	; 0x28
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	3b01      	subs	r3, #1
 80016ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c2:	3b01      	subs	r3, #1
 80016c4:	025b      	lsls	r3, r3, #9
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ce:	3b01      	subs	r3, #1
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016dc:	3b01      	subs	r3, #1
 80016de:	061b      	lsls	r3, r3, #24
 80016e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80016e4:	4923      	ldr	r1, [pc, #140]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80016ea:	4b22      	ldr	r3, [pc, #136]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	4a21      	ldr	r2, [pc, #132]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80016f6:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 80016f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fa:	4b21      	ldr	r3, [pc, #132]	; (8001780 <HAL_RCC_OscConfig+0x778>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001702:	00d2      	lsls	r2, r2, #3
 8001704:	491b      	ldr	r1, [pc, #108]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001706:	4313      	orrs	r3, r2
 8001708:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	f023 020c 	bic.w	r2, r3, #12
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4917      	ldr	r1, [pc, #92]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001718:	4313      	orrs	r3, r2
 800171a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	f023 0202 	bic.w	r2, r3, #2
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	4912      	ldr	r1, [pc, #72]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 800172a:	4313      	orrs	r3, r2
 800172c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	4a10      	ldr	r2, [pc, #64]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001738:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 800174c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001750:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	4a07      	ldr	r2, [pc, #28]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_RCC_OscConfig+0x76c>)
 8001764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff f8e5 	bl	8000938 <HAL_GetTick>
 800176e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001770:	e011      	b.n	8001796 <HAL_RCC_OscConfig+0x78e>
 8001772:	bf00      	nop
 8001774:	58024400 	.word	0x58024400
 8001778:	58024800 	.word	0x58024800
 800177c:	fffffc0c 	.word	0xfffffc0c
 8001780:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff f8d8 	bl	8000938 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e08a      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_OscConfig+0x8ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x77c>
 80017a2:	e082      	b.n	80018aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a4:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <HAL_RCC_OscConfig+0x8ac>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a42      	ldr	r2, [pc, #264]	; (80018b4 <HAL_RCC_OscConfig+0x8ac>)
 80017aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff f8c2 	bl	8000938 <HAL_GetTick>
 80017b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff f8be 	bl	8000938 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e070      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ca:	4b3a      	ldr	r3, [pc, #232]	; (80018b4 <HAL_RCC_OscConfig+0x8ac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x7b0>
 80017d6:	e068      	b.n	80018aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80017d8:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <HAL_RCC_OscConfig+0x8ac>)
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80017de:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <HAL_RCC_OscConfig+0x8ac>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d031      	beq.n	8001850 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f003 0203 	and.w	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d12a      	bne.n	8001850 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d122      	bne.n	8001850 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d11a      	bne.n	8001850 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	0a5b      	lsrs	r3, r3, #9
 800181e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001826:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d111      	bne.n	8001850 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	0c1b      	lsrs	r3, r3, #16
 8001830:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001838:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d108      	bne.n	8001850 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	0e1b      	lsrs	r3, r3, #24
 8001842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e02b      	b.n	80018ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_RCC_OscConfig+0x8ac>)
 8001856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800185e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	429a      	cmp	r2, r3
 8001868:	d01f      	beq.n	80018aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_RCC_OscConfig+0x8ac>)
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	4a11      	ldr	r2, [pc, #68]	; (80018b4 <HAL_RCC_OscConfig+0x8ac>)
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001876:	f7ff f85f 	bl	8000938 <HAL_GetTick>
 800187a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800187c:	bf00      	nop
 800187e:	f7ff f85b 	bl	8000938 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	4293      	cmp	r3, r2
 8001888:	d0f9      	beq.n	800187e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_RCC_OscConfig+0x8ac>)
 800188c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_RCC_OscConfig+0x8b0>)
 8001890:	4013      	ands	r3, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001896:	00d2      	lsls	r2, r2, #3
 8001898:	4906      	ldr	r1, [pc, #24]	; (80018b4 <HAL_RCC_OscConfig+0x8ac>)
 800189a:	4313      	orrs	r3, r2
 800189c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_RCC_OscConfig+0x8ac>)
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_RCC_OscConfig+0x8ac>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3730      	adds	r7, #48	; 0x30
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	58024400 	.word	0x58024400
 80018b8:	ffff0007 	.word	0xffff0007

080018bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e19c      	b.n	8001c0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4b8a      	ldr	r3, [pc, #552]	; (8001afc <HAL_RCC_ClockConfig+0x240>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d910      	bls.n	8001900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b87      	ldr	r3, [pc, #540]	; (8001afc <HAL_RCC_ClockConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 020f 	bic.w	r2, r3, #15
 80018e6:	4985      	ldr	r1, [pc, #532]	; (8001afc <HAL_RCC_ClockConfig+0x240>)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b83      	ldr	r3, [pc, #524]	; (8001afc <HAL_RCC_ClockConfig+0x240>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e184      	b.n	8001c0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d010      	beq.n	800192e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	4b7b      	ldr	r3, [pc, #492]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001918:	429a      	cmp	r2, r3
 800191a:	d908      	bls.n	800192e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800191c:	4b78      	ldr	r3, [pc, #480]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	4975      	ldr	r1, [pc, #468]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 800192a:	4313      	orrs	r3, r2
 800192c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d010      	beq.n	800195c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	4b70      	ldr	r3, [pc, #448]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001946:	429a      	cmp	r2, r3
 8001948:	d908      	bls.n	800195c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800194a:	4b6d      	ldr	r3, [pc, #436]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	496a      	ldr	r1, [pc, #424]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001958:	4313      	orrs	r3, r2
 800195a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	2b00      	cmp	r3, #0
 8001966:	d010      	beq.n	800198a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699a      	ldr	r2, [r3, #24]
 800196c:	4b64      	ldr	r3, [pc, #400]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001974:	429a      	cmp	r2, r3
 8001976:	d908      	bls.n	800198a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001978:	4b61      	ldr	r3, [pc, #388]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	495e      	ldr	r1, [pc, #376]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001986:	4313      	orrs	r3, r2
 8001988:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0320 	and.w	r3, r3, #32
 8001992:	2b00      	cmp	r3, #0
 8001994:	d010      	beq.n	80019b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d908      	bls.n	80019b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80019a6:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4953      	ldr	r1, [pc, #332]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d010      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d908      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f023 020f 	bic.w	r2, r3, #15
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4947      	ldr	r1, [pc, #284]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d055      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80019f2:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	4940      	ldr	r1, [pc, #256]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a0c:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d121      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0f6      	b.n	8001c0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a24:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d115      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0ea      	b.n	8001c0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a3c:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d109      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0de      	b.n	8001c0a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a4c:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0d6      	b.n	8001c0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a5c:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	f023 0207 	bic.w	r2, r3, #7
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4925      	ldr	r1, [pc, #148]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a6e:	f7fe ff63 	bl	8000938 <HAL_GetTick>
 8001a72:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a76:	f7fe ff5f 	bl	8000938 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e0be      	b.n	8001c0a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d1eb      	bne.n	8001a76 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d010      	beq.n	8001acc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d208      	bcs.n	8001acc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f023 020f 	bic.w	r2, r3, #15
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	490e      	ldr	r1, [pc, #56]	; (8001b00 <HAL_RCC_ClockConfig+0x244>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_ClockConfig+0x240>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d214      	bcs.n	8001b04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_RCC_ClockConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 020f 	bic.w	r2, r3, #15
 8001ae2:	4906      	ldr	r1, [pc, #24]	; (8001afc <HAL_RCC_ClockConfig+0x240>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_RCC_ClockConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e086      	b.n	8001c0a <HAL_RCC_ClockConfig+0x34e>
 8001afc:	52002000 	.word	0x52002000
 8001b00:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d010      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	4b3f      	ldr	r3, [pc, #252]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d208      	bcs.n	8001b32 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b20:	4b3c      	ldr	r3, [pc, #240]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	4939      	ldr	r1, [pc, #228]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d010      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	4b34      	ldr	r3, [pc, #208]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d208      	bcs.n	8001b60 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b4e:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	492e      	ldr	r1, [pc, #184]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d010      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d208      	bcs.n	8001b8e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b7c:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4922      	ldr	r1, [pc, #136]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d010      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69da      	ldr	r2, [r3, #28]
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d208      	bcs.n	8001bbc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4917      	ldr	r1, [pc, #92]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bbc:	f000 f834 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	4912      	ldr	r1, [pc, #72]	; (8001c18 <HAL_RCC_ClockConfig+0x35c>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x358>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <HAL_RCC_ClockConfig+0x35c>)
 8001be4:	5cd3      	ldrb	r3, [r2, r3]
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_RCC_ClockConfig+0x360>)
 8001bf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x364>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_ClockConfig+0x368>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fe50 	bl	80008a4 <HAL_InitTick>
 8001c04:	4603      	mov	r3, r0
 8001c06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	58024400 	.word	0x58024400
 8001c18:	08007654 	.word	0x08007654
 8001c1c:	24000004 	.word	0x24000004
 8001c20:	24000000 	.word	0x24000000
 8001c24:	24000008 	.word	0x24000008

08001c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c2e:	4bb3      	ldr	r3, [pc, #716]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c36:	2b18      	cmp	r3, #24
 8001c38:	f200 8155 	bhi.w	8001ee6 <HAL_RCC_GetSysClockFreq+0x2be>
 8001c3c:	a201      	add	r2, pc, #4	; (adr r2, 8001c44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c42:	bf00      	nop
 8001c44:	08001ca9 	.word	0x08001ca9
 8001c48:	08001ee7 	.word	0x08001ee7
 8001c4c:	08001ee7 	.word	0x08001ee7
 8001c50:	08001ee7 	.word	0x08001ee7
 8001c54:	08001ee7 	.word	0x08001ee7
 8001c58:	08001ee7 	.word	0x08001ee7
 8001c5c:	08001ee7 	.word	0x08001ee7
 8001c60:	08001ee7 	.word	0x08001ee7
 8001c64:	08001ccf 	.word	0x08001ccf
 8001c68:	08001ee7 	.word	0x08001ee7
 8001c6c:	08001ee7 	.word	0x08001ee7
 8001c70:	08001ee7 	.word	0x08001ee7
 8001c74:	08001ee7 	.word	0x08001ee7
 8001c78:	08001ee7 	.word	0x08001ee7
 8001c7c:	08001ee7 	.word	0x08001ee7
 8001c80:	08001ee7 	.word	0x08001ee7
 8001c84:	08001cd5 	.word	0x08001cd5
 8001c88:	08001ee7 	.word	0x08001ee7
 8001c8c:	08001ee7 	.word	0x08001ee7
 8001c90:	08001ee7 	.word	0x08001ee7
 8001c94:	08001ee7 	.word	0x08001ee7
 8001c98:	08001ee7 	.word	0x08001ee7
 8001c9c:	08001ee7 	.word	0x08001ee7
 8001ca0:	08001ee7 	.word	0x08001ee7
 8001ca4:	08001cdb 	.word	0x08001cdb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ca8:	4b94      	ldr	r3, [pc, #592]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0320 	and.w	r3, r3, #32
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d009      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001cb4:	4b91      	ldr	r3, [pc, #580]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	4a90      	ldr	r2, [pc, #576]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001cc6:	e111      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001cc8:	4b8d      	ldr	r3, [pc, #564]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cca:	61bb      	str	r3, [r7, #24]
      break;
 8001ccc:	e10e      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001cce:	4b8d      	ldr	r3, [pc, #564]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001cd0:	61bb      	str	r3, [r7, #24]
      break;
 8001cd2:	e10b      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001cd4:	4b8c      	ldr	r3, [pc, #560]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001cd6:	61bb      	str	r3, [r7, #24]
      break;
 8001cd8:	e108      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001cda:	4b88      	ldr	r3, [pc, #544]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001ce4:	4b85      	ldr	r3, [pc, #532]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001cf0:	4b82      	ldr	r3, [pc, #520]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001cfa:	4b80      	ldr	r3, [pc, #512]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfe:	08db      	lsrs	r3, r3, #3
 8001d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	ee07 3a90 	vmov	s15, r3
 8001d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80e1 	beq.w	8001ee0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	f000 8083 	beq.w	8001e2c <HAL_RCC_GetSysClockFreq+0x204>
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	f200 80a1 	bhi.w	8001e70 <HAL_RCC_GetSysClockFreq+0x248>
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x114>
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d056      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d3a:	e099      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d3c:	4b6f      	ldr	r3, [pc, #444]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d02d      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d48:	4b6c      	ldr	r3, [pc, #432]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	08db      	lsrs	r3, r3, #3
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	4a6b      	ldr	r2, [pc, #428]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	ee07 3a90 	vmov	s15, r3
 8001d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d72:	4b62      	ldr	r3, [pc, #392]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d7a:	ee07 3a90 	vmov	s15, r3
 8001d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d86:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001da2:	e087      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001f10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001db6:	4b51      	ldr	r3, [pc, #324]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dca:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001de6:	e065      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001f14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dfa:	4b40      	ldr	r3, [pc, #256]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e2a:	e043      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001f18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e6e:	e021      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001f14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001f0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001eb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	0a5b      	lsrs	r3, r3, #9
 8001eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	ee07 3a90 	vmov	s15, r3
 8001ec8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ecc:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed8:	ee17 3a90 	vmov	r3, s15
 8001edc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001ede:	e005      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61bb      	str	r3, [r7, #24]
      break;
 8001ee4:	e002      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ee8:	61bb      	str	r3, [r7, #24]
      break;
 8001eea:	bf00      	nop
  }

  return sysclockfreq;
 8001eec:	69bb      	ldr	r3, [r7, #24]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	58024400 	.word	0x58024400
 8001f00:	03d09000 	.word	0x03d09000
 8001f04:	003d0900 	.word	0x003d0900
 8001f08:	017d7840 	.word	0x017d7840
 8001f0c:	46000000 	.word	0x46000000
 8001f10:	4c742400 	.word	0x4c742400
 8001f14:	4a742400 	.word	0x4a742400
 8001f18:	4bbebc20 	.word	0x4bbebc20

08001f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001f22:	f7ff fe81 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <HAL_RCC_GetHCLKFreq+0x50>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	490f      	ldr	r1, [pc, #60]	; (8001f70 <HAL_RCC_GetHCLKFreq+0x54>)
 8001f34:	5ccb      	ldrb	r3, [r1, r3]
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_RCC_GetHCLKFreq+0x50>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <HAL_RCC_GetHCLKFreq+0x54>)
 8001f4a:	5cd3      	ldrb	r3, [r2, r3]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	fa22 f303 	lsr.w	r3, r2, r3
 8001f56:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_RCC_GetHCLKFreq+0x58>)
 8001f58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <HAL_RCC_GetHCLKFreq+0x58>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	58024400 	.word	0x58024400
 8001f70:	08007654 	.word	0x08007654
 8001f74:	24000004 	.word	0x24000004
 8001f78:	24000000 	.word	0x24000000

08001f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001f80:	f7ff ffcc 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	4904      	ldr	r1, [pc, #16]	; (8001fa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	58024400 	.word	0x58024400
 8001fa4:	08007654 	.word	0x08007654

08001fa8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fac:	b0ca      	sub	sp, #296	; 0x128
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8001fcc:	2500      	movs	r5, #0
 8001fce:	ea54 0305 	orrs.w	r3, r4, r5
 8001fd2:	d049      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8001fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001fde:	d02f      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8001fe0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001fe4:	d828      	bhi.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fea:	d01a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ff0:	d822      	bhi.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ffa:	d007      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ffc:	e01c      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ffe:	4bb8      	ldr	r3, [pc, #736]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	4ab7      	ldr	r2, [pc, #732]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002008:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800200a:	e01a      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800200c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002010:	3308      	adds	r3, #8
 8002012:	2102      	movs	r1, #2
 8002014:	4618      	mov	r0, r3
 8002016:	f002 fb61 	bl	80046dc <RCCEx_PLL2_Config>
 800201a:	4603      	mov	r3, r0
 800201c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002020:	e00f      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002026:	3328      	adds	r3, #40	; 0x28
 8002028:	2102      	movs	r1, #2
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fc08 	bl	8004840 <RCCEx_PLL3_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002036:	e004      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800203e:	e000      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10a      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800204a:	4ba5      	ldr	r3, [pc, #660]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800204c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002058:	4aa1      	ldr	r2, [pc, #644]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800205a:	430b      	orrs	r3, r1
 800205c:	6513      	str	r3, [r2, #80]	; 0x50
 800205e:	e003      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002060:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002064:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002074:	f04f 0900 	mov.w	r9, #0
 8002078:	ea58 0309 	orrs.w	r3, r8, r9
 800207c:	d047      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800207e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	2b04      	cmp	r3, #4
 8002086:	d82a      	bhi.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002088:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208e:	bf00      	nop
 8002090:	080020a5 	.word	0x080020a5
 8002094:	080020b3 	.word	0x080020b3
 8002098:	080020c9 	.word	0x080020c9
 800209c:	080020e7 	.word	0x080020e7
 80020a0:	080020e7 	.word	0x080020e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020a4:	4b8e      	ldr	r3, [pc, #568]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	4a8d      	ldr	r2, [pc, #564]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80020b0:	e01a      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80020b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020b6:	3308      	adds	r3, #8
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 fb0e 	bl	80046dc <RCCEx_PLL2_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80020c6:	e00f      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80020c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020cc:	3328      	adds	r3, #40	; 0x28
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 fbb5 	bl	8004840 <RCCEx_PLL3_Config>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80020dc:	e004      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80020e4:	e000      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80020e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80020e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10a      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020f0:	4b7b      	ldr	r3, [pc, #492]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f4:	f023 0107 	bic.w	r1, r3, #7
 80020f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	4a78      	ldr	r2, [pc, #480]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002100:	430b      	orrs	r3, r1
 8002102:	6513      	str	r3, [r2, #80]	; 0x50
 8002104:	e003      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800210a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800210e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800211a:	f04f 0b00 	mov.w	fp, #0
 800211e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002122:	d04c      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800212e:	d030      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002134:	d829      	bhi.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002136:	2bc0      	cmp	r3, #192	; 0xc0
 8002138:	d02d      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800213a:	2bc0      	cmp	r3, #192	; 0xc0
 800213c:	d825      	bhi.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800213e:	2b80      	cmp	r3, #128	; 0x80
 8002140:	d018      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002142:	2b80      	cmp	r3, #128	; 0x80
 8002144:	d821      	bhi.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800214a:	2b40      	cmp	r3, #64	; 0x40
 800214c:	d007      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800214e:	e01c      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002150:	4b63      	ldr	r3, [pc, #396]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	4a62      	ldr	r2, [pc, #392]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800215c:	e01c      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800215e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002162:	3308      	adds	r3, #8
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f002 fab8 	bl	80046dc <RCCEx_PLL2_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002172:	e011      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002178:	3328      	adds	r3, #40	; 0x28
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f002 fb5f 	bl	8004840 <RCCEx_PLL3_Config>
 8002182:	4603      	mov	r3, r0
 8002184:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002188:	e006      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002190:	e002      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002192:	bf00      	nop
 8002194:	e000      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002198:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10a      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80021a0:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80021a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	4a4c      	ldr	r2, [pc, #304]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021b0:	430b      	orrs	r3, r1
 80021b2:	6513      	str	r3, [r2, #80]	; 0x50
 80021b4:	e003      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80021ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80021be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80021ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80021d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80021d8:	460b      	mov	r3, r1
 80021da:	4313      	orrs	r3, r2
 80021dc:	d053      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80021de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80021e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021ea:	d035      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80021ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021f0:	d82e      	bhi.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80021f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80021f6:	d031      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80021f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80021fc:	d828      	bhi.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80021fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002202:	d01a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002208:	d822      	bhi.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800220e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002212:	d007      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002214:	e01c      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002216:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	4a31      	ldr	r2, [pc, #196]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800221c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002220:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002222:	e01c      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002228:	3308      	adds	r3, #8
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f002 fa55 	bl	80046dc <RCCEx_PLL2_Config>
 8002232:	4603      	mov	r3, r0
 8002234:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002238:	e011      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800223a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800223e:	3328      	adds	r3, #40	; 0x28
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f002 fafc 	bl	8004840 <RCCEx_PLL3_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800224e:	e006      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002256:	e002      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002258:	bf00      	nop
 800225a:	e000      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800225c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800225e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10b      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002266:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800226e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002272:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002276:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002278:	430b      	orrs	r3, r1
 800227a:	6593      	str	r3, [r2, #88]	; 0x58
 800227c:	e003      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800227e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002282:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002292:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002296:	2300      	movs	r3, #0
 8002298:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800229c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80022a0:	460b      	mov	r3, r1
 80022a2:	4313      	orrs	r3, r2
 80022a4:	d056      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80022a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80022ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022b2:	d038      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80022b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022b8:	d831      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80022ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022be:	d034      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80022c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022c4:	d82b      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80022c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022ca:	d01d      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80022cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022d0:	d825      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80022d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80022dc:	e01f      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80022de:	bf00      	nop
 80022e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022e4:	4ba2      	ldr	r3, [pc, #648]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	4aa1      	ldr	r2, [pc, #644]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80022f0:	e01c      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80022f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022f6:	3308      	adds	r3, #8
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f002 f9ee 	bl	80046dc <RCCEx_PLL2_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002306:	e011      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800230c:	3328      	adds	r3, #40	; 0x28
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f002 fa95 	bl	8004840 <RCCEx_PLL3_Config>
 8002316:	4603      	mov	r3, r0
 8002318:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800231c:	e006      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002324:	e002      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002326:	bf00      	nop
 8002328:	e000      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800232a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800232c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002334:	4b8e      	ldr	r3, [pc, #568]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002338:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800233c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002340:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002344:	4a8a      	ldr	r2, [pc, #552]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002346:	430b      	orrs	r3, r1
 8002348:	6593      	str	r3, [r2, #88]	; 0x58
 800234a:	e003      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800234c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002350:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002360:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800236a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800236e:	460b      	mov	r3, r1
 8002370:	4313      	orrs	r3, r2
 8002372:	d03a      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	2b30      	cmp	r3, #48	; 0x30
 800237c:	d01f      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800237e:	2b30      	cmp	r3, #48	; 0x30
 8002380:	d819      	bhi.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002382:	2b20      	cmp	r3, #32
 8002384:	d00c      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002386:	2b20      	cmp	r3, #32
 8002388:	d815      	bhi.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d019      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800238e:	2b10      	cmp	r3, #16
 8002390:	d111      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002392:	4b77      	ldr	r3, [pc, #476]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	4a76      	ldr	r2, [pc, #472]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800239e:	e011      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80023a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023a4:	3308      	adds	r3, #8
 80023a6:	2102      	movs	r1, #2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f002 f997 	bl	80046dc <RCCEx_PLL2_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80023b4:	e006      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80023bc:	e002      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80023be:	bf00      	nop
 80023c0:	e000      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80023c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10a      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80023cc:	4b68      	ldr	r3, [pc, #416]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80023d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	4a65      	ldr	r2, [pc, #404]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023dc:	430b      	orrs	r3, r1
 80023de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e0:	e003      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80023ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80023f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002400:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002404:	460b      	mov	r3, r1
 8002406:	4313      	orrs	r3, r2
 8002408:	d051      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800240a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800240e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002414:	d035      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800241a:	d82e      	bhi.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800241c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002420:	d031      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002422:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002426:	d828      	bhi.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242c:	d01a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800242e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002432:	d822      	bhi.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243c:	d007      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800243e:	e01c      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002440:	4b4b      	ldr	r3, [pc, #300]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	4a4a      	ldr	r2, [pc, #296]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800244c:	e01c      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800244e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002452:	3308      	adds	r3, #8
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f002 f940 	bl	80046dc <RCCEx_PLL2_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002462:	e011      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002468:	3328      	adds	r3, #40	; 0x28
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f002 f9e7 	bl	8004840 <RCCEx_PLL3_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002478:	e006      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002480:	e002      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002482:	bf00      	nop
 8002484:	e000      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002490:	4b37      	ldr	r3, [pc, #220]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002494:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800249c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249e:	4a34      	ldr	r2, [pc, #208]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024a0:	430b      	orrs	r3, r1
 80024a2:	6513      	str	r3, [r2, #80]	; 0x50
 80024a4:	e003      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80024aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80024ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80024ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024be:	2300      	movs	r3, #0
 80024c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80024c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80024c8:	460b      	mov	r3, r1
 80024ca:	4313      	orrs	r3, r2
 80024cc:	d056      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80024ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d8:	d033      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80024da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024de:	d82c      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80024e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024e4:	d02f      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80024e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024ea:	d826      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80024ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024f0:	d02b      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80024f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024f6:	d820      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80024f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024fc:	d012      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80024fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002502:	d81a      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d022      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d115      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800250e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002512:	3308      	adds	r3, #8
 8002514:	2101      	movs	r1, #1
 8002516:	4618      	mov	r0, r3
 8002518:	f002 f8e0 	bl	80046dc <RCCEx_PLL2_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002522:	e015      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002528:	3328      	adds	r3, #40	; 0x28
 800252a:	2101      	movs	r1, #1
 800252c:	4618      	mov	r0, r3
 800252e:	f002 f987 	bl	8004840 <RCCEx_PLL3_Config>
 8002532:	4603      	mov	r3, r0
 8002534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002538:	e00a      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002540:	e006      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002542:	bf00      	nop
 8002544:	e004      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002546:	bf00      	nop
 8002548:	e002      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800254a:	bf00      	nop
 800254c:	e000      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800254e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10d      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800255a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002566:	4a02      	ldr	r2, [pc, #8]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002568:	430b      	orrs	r3, r1
 800256a:	6513      	str	r3, [r2, #80]	; 0x50
 800256c:	e006      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800256e:	bf00      	nop
 8002570:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002578:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800257c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002592:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002596:	460b      	mov	r3, r1
 8002598:	4313      	orrs	r3, r2
 800259a:	d055      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800259c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80025a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a8:	d033      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80025aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ae:	d82c      	bhi.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80025b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b4:	d02f      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80025b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ba:	d826      	bhi.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80025bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80025c0:	d02b      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80025c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80025c6:	d820      	bhi.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80025c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025cc:	d012      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80025ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025d2:	d81a      	bhi.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d022      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80025d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025dc:	d115      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80025de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025e2:	3308      	adds	r3, #8
 80025e4:	2101      	movs	r1, #1
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 f878 	bl	80046dc <RCCEx_PLL2_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80025f2:	e015      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80025f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025f8:	3328      	adds	r3, #40	; 0x28
 80025fa:	2101      	movs	r1, #1
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 f91f 	bl	8004840 <RCCEx_PLL3_Config>
 8002602:	4603      	mov	r3, r0
 8002604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002608:	e00a      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002610:	e006      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002612:	bf00      	nop
 8002614:	e004      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002616:	bf00      	nop
 8002618:	e002      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800261a:	bf00      	nop
 800261c:	e000      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800261e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002620:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10b      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002628:	4ba3      	ldr	r3, [pc, #652]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002634:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002638:	4a9f      	ldr	r2, [pc, #636]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800263a:	430b      	orrs	r3, r1
 800263c:	6593      	str	r3, [r2, #88]	; 0x58
 800263e:	e003      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002640:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002644:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800265e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002662:	460b      	mov	r3, r1
 8002664:	4313      	orrs	r3, r2
 8002666:	d037      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002672:	d00e      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002678:	d816      	bhi.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800267a:	2b00      	cmp	r3, #0
 800267c:	d018      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800267e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002682:	d111      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002684:	4b8c      	ldr	r3, [pc, #560]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	4a8b      	ldr	r2, [pc, #556]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800268a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002690:	e00f      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002696:	3308      	adds	r3, #8
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f002 f81e 	bl	80046dc <RCCEx_PLL2_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80026a6:	e004      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80026ae:	e000      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80026b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10a      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026ba:	4b7f      	ldr	r3, [pc, #508]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026be:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80026c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a7b      	ldr	r2, [pc, #492]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026ca:	430b      	orrs	r3, r1
 80026cc:	6513      	str	r3, [r2, #80]	; 0x50
 80026ce:	e003      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80026d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80026e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80026ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4313      	orrs	r3, r2
 80026f6:	d039      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80026f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d81c      	bhi.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002702:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	08002745 	.word	0x08002745
 800270c:	08002719 	.word	0x08002719
 8002710:	08002727 	.word	0x08002727
 8002714:	08002745 	.word	0x08002745
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002718:	4b67      	ldr	r3, [pc, #412]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	4a66      	ldr	r2, [pc, #408]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800271e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002724:	e00f      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800272a:	3308      	adds	r3, #8
 800272c:	2102      	movs	r1, #2
 800272e:	4618      	mov	r0, r3
 8002730:	f001 ffd4 	bl	80046dc <RCCEx_PLL2_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800273a:	e004      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002742:	e000      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800274e:	4b5a      	ldr	r3, [pc, #360]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	f023 0103 	bic.w	r1, r3, #3
 8002756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800275a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275c:	4a56      	ldr	r2, [pc, #344]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800275e:	430b      	orrs	r3, r1
 8002760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002762:	e003      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002768:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800276c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002778:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002782:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002786:	460b      	mov	r3, r1
 8002788:	4313      	orrs	r3, r2
 800278a:	f000 809f 	beq.w	80028cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800278e:	4b4b      	ldr	r3, [pc, #300]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a4a      	ldr	r2, [pc, #296]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002798:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800279a:	f7fe f8cd 	bl	8000938 <HAL_GetTick>
 800279e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027a2:	e00b      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a4:	f7fe f8c8 	bl	8000938 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b64      	cmp	r3, #100	; 0x64
 80027b2:	d903      	bls.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80027ba:	e005      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027bc:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ed      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80027c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d179      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80027d0:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80027dc:	4053      	eors	r3, r2
 80027de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d015      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027e6:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a30      	ldr	r2, [pc, #192]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027fe:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	4a2d      	ldr	r2, [pc, #180]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800280a:	4a2b      	ldr	r2, [pc, #172]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800280c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002816:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800281a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281e:	d118      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe f88a 	bl	8000938 <HAL_GetTick>
 8002824:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002828:	e00d      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe f885 	bl	8000938 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002834:	1ad2      	subs	r2, r2, r3
 8002836:	f241 3388 	movw	r3, #5000	; 0x1388
 800283a:	429a      	cmp	r2, r3
 800283c:	d903      	bls.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002844:	e005      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0eb      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002856:	2b00      	cmp	r3, #0
 8002858:	d129      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800285a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800285e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800286a:	d10e      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002878:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800287c:	091a      	lsrs	r2, r3, #4
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002880:	4013      	ands	r3, r2
 8002882:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002884:	430b      	orrs	r3, r1
 8002886:	6113      	str	r3, [r2, #16]
 8002888:	e005      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002890:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002894:	6113      	str	r3, [r2, #16]
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002898:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800289a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800289e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80028a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a6:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
 80028ac:	e00e      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80028b6:	e009      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80028b8:	58024400 	.word	0x58024400
 80028bc:	58024800 	.word	0x58024800
 80028c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80028cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	f002 0301 	and.w	r3, r2, #1
 80028d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80028e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f000 8089 	beq.w	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80028ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f4:	2b28      	cmp	r3, #40	; 0x28
 80028f6:	d86b      	bhi.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80028f8:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	080029d9 	.word	0x080029d9
 8002904:	080029d1 	.word	0x080029d1
 8002908:	080029d1 	.word	0x080029d1
 800290c:	080029d1 	.word	0x080029d1
 8002910:	080029d1 	.word	0x080029d1
 8002914:	080029d1 	.word	0x080029d1
 8002918:	080029d1 	.word	0x080029d1
 800291c:	080029d1 	.word	0x080029d1
 8002920:	080029a5 	.word	0x080029a5
 8002924:	080029d1 	.word	0x080029d1
 8002928:	080029d1 	.word	0x080029d1
 800292c:	080029d1 	.word	0x080029d1
 8002930:	080029d1 	.word	0x080029d1
 8002934:	080029d1 	.word	0x080029d1
 8002938:	080029d1 	.word	0x080029d1
 800293c:	080029d1 	.word	0x080029d1
 8002940:	080029bb 	.word	0x080029bb
 8002944:	080029d1 	.word	0x080029d1
 8002948:	080029d1 	.word	0x080029d1
 800294c:	080029d1 	.word	0x080029d1
 8002950:	080029d1 	.word	0x080029d1
 8002954:	080029d1 	.word	0x080029d1
 8002958:	080029d1 	.word	0x080029d1
 800295c:	080029d1 	.word	0x080029d1
 8002960:	080029d9 	.word	0x080029d9
 8002964:	080029d1 	.word	0x080029d1
 8002968:	080029d1 	.word	0x080029d1
 800296c:	080029d1 	.word	0x080029d1
 8002970:	080029d1 	.word	0x080029d1
 8002974:	080029d1 	.word	0x080029d1
 8002978:	080029d1 	.word	0x080029d1
 800297c:	080029d1 	.word	0x080029d1
 8002980:	080029d9 	.word	0x080029d9
 8002984:	080029d1 	.word	0x080029d1
 8002988:	080029d1 	.word	0x080029d1
 800298c:	080029d1 	.word	0x080029d1
 8002990:	080029d1 	.word	0x080029d1
 8002994:	080029d1 	.word	0x080029d1
 8002998:	080029d1 	.word	0x080029d1
 800299c:	080029d1 	.word	0x080029d1
 80029a0:	080029d9 	.word	0x080029d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029a8:	3308      	adds	r3, #8
 80029aa:	2101      	movs	r1, #1
 80029ac:	4618      	mov	r0, r3
 80029ae:	f001 fe95 	bl	80046dc <RCCEx_PLL2_Config>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80029b8:	e00f      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029be:	3328      	adds	r3, #40	; 0x28
 80029c0:	2101      	movs	r1, #1
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 ff3c 	bl	8004840 <RCCEx_PLL3_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80029ce:	e004      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80029d6:	e000      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80029d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80029e2:	4bbf      	ldr	r3, [pc, #764]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80029ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f0:	4abb      	ldr	r2, [pc, #748]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80029f2:	430b      	orrs	r3, r1
 80029f4:	6553      	str	r3, [r2, #84]	; 0x54
 80029f6:	e003      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a08:	f002 0302 	and.w	r3, r2, #2
 8002a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002a16:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	d041      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d824      	bhi.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002a2a:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a30:	08002a7d 	.word	0x08002a7d
 8002a34:	08002a49 	.word	0x08002a49
 8002a38:	08002a5f 	.word	0x08002a5f
 8002a3c:	08002a7d 	.word	0x08002a7d
 8002a40:	08002a7d 	.word	0x08002a7d
 8002a44:	08002a7d 	.word	0x08002a7d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a4c:	3308      	adds	r3, #8
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4618      	mov	r0, r3
 8002a52:	f001 fe43 	bl	80046dc <RCCEx_PLL2_Config>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002a5c:	e00f      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a62:	3328      	adds	r3, #40	; 0x28
 8002a64:	2101      	movs	r1, #1
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 feea 	bl	8004840 <RCCEx_PLL3_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002a72:	e004      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a7a:	e000      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10a      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002a86:	4b96      	ldr	r3, [pc, #600]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	f023 0107 	bic.w	r1, r3, #7
 8002a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a94:	4a92      	ldr	r2, [pc, #584]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a96:	430b      	orrs	r3, r1
 8002a98:	6553      	str	r3, [r2, #84]	; 0x54
 8002a9a:	e003      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002aa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	f002 0304 	and.w	r3, r2, #4
 8002ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	d044      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d825      	bhi.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002ad0:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad6:	bf00      	nop
 8002ad8:	08002b25 	.word	0x08002b25
 8002adc:	08002af1 	.word	0x08002af1
 8002ae0:	08002b07 	.word	0x08002b07
 8002ae4:	08002b25 	.word	0x08002b25
 8002ae8:	08002b25 	.word	0x08002b25
 8002aec:	08002b25 	.word	0x08002b25
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002af4:	3308      	adds	r3, #8
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 fdef 	bl	80046dc <RCCEx_PLL2_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002b04:	e00f      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b0a:	3328      	adds	r3, #40	; 0x28
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f001 fe96 	bl	8004840 <RCCEx_PLL3_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002b1a:	e004      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b22:	e000      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b2e:	4b6c      	ldr	r3, [pc, #432]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	f023 0107 	bic.w	r1, r3, #7
 8002b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3e:	4a68      	ldr	r2, [pc, #416]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b40:	430b      	orrs	r3, r1
 8002b42:	6593      	str	r3, [r2, #88]	; 0x58
 8002b44:	e003      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f002 0320 	and.w	r3, r2, #32
 8002b5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	d055      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b7a:	d033      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b80:	d82c      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b86:	d02f      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8c:	d826      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002b8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b92:	d02b      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002b94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b98:	d820      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b9e:	d012      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba4:	d81a      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d022      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002baa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bae:	d115      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 fd8f 	bl	80046dc <RCCEx_PLL2_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002bc4:	e015      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bca:	3328      	adds	r3, #40	; 0x28
 8002bcc:	2102      	movs	r1, #2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 fe36 	bl	8004840 <RCCEx_PLL3_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002be2:	e006      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002be4:	bf00      	nop
 8002be6:	e004      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002be8:	bf00      	nop
 8002bea:	e002      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002bec:	bf00      	nop
 8002bee:	e000      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10b      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bfa:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	4a35      	ldr	r2, [pc, #212]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	6553      	str	r3, [r2, #84]	; 0x54
 8002c10:	e003      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c22:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002c30:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4313      	orrs	r3, r2
 8002c38:	d058      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c46:	d033      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002c48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c4c:	d82c      	bhi.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c52:	d02f      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c58:	d826      	bhi.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c5e:	d02b      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c64:	d820      	bhi.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c6a:	d012      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c70:	d81a      	bhi.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d022      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7a:	d115      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c80:	3308      	adds	r3, #8
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 fd29 	bl	80046dc <RCCEx_PLL2_Config>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002c90:	e015      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c96:	3328      	adds	r3, #40	; 0x28
 8002c98:	2102      	movs	r1, #2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 fdd0 	bl	8004840 <RCCEx_PLL3_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cae:	e006      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002cb0:	bf00      	nop
 8002cb2:	e004      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002cb4:	bf00      	nop
 8002cb6:	e002      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8002cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cd6:	4a02      	ldr	r2, [pc, #8]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	6593      	str	r3, [r2, #88]	; 0x58
 8002cdc:	e006      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002cde:	bf00      	nop
 8002ce0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ce8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d02:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002d06:	460b      	mov	r3, r1
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	d055      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d14:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d18:	d033      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002d1a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d1e:	d82c      	bhi.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d24:	d02f      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d2a:	d826      	bhi.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d2c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d30:	d02b      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002d32:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d36:	d820      	bhi.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d3c:	d012      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d42:	d81a      	bhi.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d022      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4c:	d115      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d52:	3308      	adds	r3, #8
 8002d54:	2100      	movs	r1, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f001 fcc0 	bl	80046dc <RCCEx_PLL2_Config>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002d62:	e015      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d68:	3328      	adds	r3, #40	; 0x28
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 fd67 	bl	8004840 <RCCEx_PLL3_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002d78:	e00a      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d80:	e006      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002d82:	bf00      	nop
 8002d84:	e004      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002d86:	bf00      	nop
 8002d88:	e002      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002d98:	4ba1      	ldr	r3, [pc, #644]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8002da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002da8:	4a9d      	ldr	r2, [pc, #628]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002daa:	430b      	orrs	r3, r1
 8002dac:	6593      	str	r3, [r2, #88]	; 0x58
 8002dae:	e003      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002db4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	f002 0308 	and.w	r3, r2, #8
 8002dc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	d01e      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dea:	3328      	adds	r3, #40	; 0x28
 8002dec:	2102      	movs	r1, #2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 fd26 	bl	8004840 <RCCEx_PLL3_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002e00:	4b87      	ldr	r3, [pc, #540]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e10:	4a83      	ldr	r2, [pc, #524]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e12:	430b      	orrs	r3, r1
 8002e14:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	f002 0310 	and.w	r3, r2, #16
 8002e22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002e2c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002e30:	460b      	mov	r3, r1
 8002e32:	4313      	orrs	r3, r2
 8002e34:	d01e      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e42:	d10c      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e48:	3328      	adds	r3, #40	; 0x28
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f001 fcf7 	bl	8004840 <RCCEx_PLL3_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e5e:	4b70      	ldr	r3, [pc, #448]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e6e:	4a6c      	ldr	r2, [pc, #432]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8002e80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e84:	2300      	movs	r3, #0
 8002e86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e8a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4313      	orrs	r3, r2
 8002e92:	d03e      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ea0:	d022      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8002ea2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ea6:	d81b      	bhi.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb0:	d00b      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8002eb2:	e015      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb8:	3308      	adds	r3, #8
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f001 fc0d 	bl	80046dc <RCCEx_PLL2_Config>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002ec8:	e00f      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ece:	3328      	adds	r3, #40	; 0x28
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 fcb4 	bl	8004840 <RCCEx_PLL3_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002ede:	e004      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ee6:	e000      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8002ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ef2:	4b4b      	ldr	r3, [pc, #300]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002efe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f02:	4a47      	ldr	r2, [pc, #284]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6593      	str	r3, [r2, #88]	; 0x58
 8002f08:	e003      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002f1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f20:	2300      	movs	r3, #0
 8002f22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f24:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	d03b      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8002f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f3a:	d01f      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8002f3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f40:	d818      	bhi.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8002f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f46:	d003      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8002f48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f4c:	d007      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8002f4e:	e011      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f50:	4b33      	ldr	r3, [pc, #204]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	4a32      	ldr	r2, [pc, #200]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8002f5c:	e00f      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f62:	3328      	adds	r3, #40	; 0x28
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f001 fc6a 	bl	8004840 <RCCEx_PLL3_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8002f72:	e004      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f7a:	e000      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8002f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f86:	4b26      	ldr	r3, [pc, #152]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	4a22      	ldr	r2, [pc, #136]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6553      	str	r3, [r2, #84]	; 0x54
 8002f9c:	e003      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fa2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002fb2:	673b      	str	r3, [r7, #112]	; 0x70
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	677b      	str	r3, [r7, #116]	; 0x74
 8002fb8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	d034      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8002fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8002fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd0:	d007      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8002fd2:	e011      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	4a11      	ldr	r2, [pc, #68]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002fe0:	e00e      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	2102      	movs	r1, #2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 fb76 	bl	80046dc <RCCEx_PLL2_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002ff6:	e003      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10d      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800300a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003016:	4a02      	ldr	r2, [pc, #8]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003018:	430b      	orrs	r3, r1
 800301a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800301c:	e006      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800301e:	bf00      	nop
 8003020:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003024:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003028:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800302c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003034:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003038:	66bb      	str	r3, [r7, #104]	; 0x68
 800303a:	2300      	movs	r3, #0
 800303c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800303e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003042:	460b      	mov	r3, r1
 8003044:	4313      	orrs	r3, r2
 8003046:	d00c      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800304c:	3328      	adds	r3, #40	; 0x28
 800304e:	2102      	movs	r1, #2
 8003050:	4618      	mov	r0, r3
 8003052:	f001 fbf5 	bl	8004840 <RCCEx_PLL3_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800306e:	663b      	str	r3, [r7, #96]	; 0x60
 8003070:	2300      	movs	r3, #0
 8003072:	667b      	str	r3, [r7, #100]	; 0x64
 8003074:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003078:	460b      	mov	r3, r1
 800307a:	4313      	orrs	r3, r2
 800307c:	d038      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800307e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800308a:	d018      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800308c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003090:	d811      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003096:	d014      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800309c:	d80b      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d011      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80030a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a6:	d106      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a8:	4bc3      	ldr	r3, [pc, #780]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	4ac2      	ldr	r2, [pc, #776]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80030b4:	e008      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030bc:	e004      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80030be:	bf00      	nop
 80030c0:	e002      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80030c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10b      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030d0:	4bb9      	ldr	r3, [pc, #740]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030e0:	4ab5      	ldr	r2, [pc, #724]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030e2:	430b      	orrs	r3, r1
 80030e4:	6553      	str	r3, [r2, #84]	; 0x54
 80030e6:	e003      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80030fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80030fe:	2300      	movs	r3, #0
 8003100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003102:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003106:	460b      	mov	r3, r1
 8003108:	4313      	orrs	r3, r2
 800310a:	d009      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800310c:	4baa      	ldr	r3, [pc, #680]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800310e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003110:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311a:	4aa7      	ldr	r2, [pc, #668]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800311c:	430b      	orrs	r3, r1
 800311e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800312c:	653b      	str	r3, [r7, #80]	; 0x50
 800312e:	2300      	movs	r3, #0
 8003130:	657b      	str	r3, [r7, #84]	; 0x54
 8003132:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003136:	460b      	mov	r3, r1
 8003138:	4313      	orrs	r3, r2
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800313c:	4b9e      	ldr	r3, [pc, #632]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003148:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800314c:	4a9a      	ldr	r2, [pc, #616]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800314e:	430b      	orrs	r3, r1
 8003150:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800315e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003160:	2300      	movs	r3, #0
 8003162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003164:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003168:	460b      	mov	r3, r1
 800316a:	4313      	orrs	r3, r2
 800316c:	d009      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800316e:	4b92      	ldr	r3, [pc, #584]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003172:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800317a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800317c:	4a8e      	ldr	r2, [pc, #568]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800317e:	430b      	orrs	r3, r1
 8003180:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800318e:	643b      	str	r3, [r7, #64]	; 0x40
 8003190:	2300      	movs	r3, #0
 8003192:	647b      	str	r3, [r7, #68]	; 0x44
 8003194:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003198:	460b      	mov	r3, r1
 800319a:	4313      	orrs	r3, r2
 800319c:	d00e      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800319e:	4b86      	ldr	r3, [pc, #536]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	4a85      	ldr	r2, [pc, #532]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031a8:	6113      	str	r3, [r2, #16]
 80031aa:	4b83      	ldr	r3, [pc, #524]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031ac:	6919      	ldr	r1, [r3, #16]
 80031ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80031b6:	4a80      	ldr	r2, [pc, #512]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80031bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80031c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ca:	2300      	movs	r3, #0
 80031cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80031d2:	460b      	mov	r3, r1
 80031d4:	4313      	orrs	r3, r2
 80031d6:	d009      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80031d8:	4b77      	ldr	r3, [pc, #476]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031dc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80031e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	4a74      	ldr	r2, [pc, #464]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031e8:	430b      	orrs	r3, r1
 80031ea:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80031f8:	633b      	str	r3, [r7, #48]	; 0x30
 80031fa:	2300      	movs	r3, #0
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
 80031fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003202:	460b      	mov	r3, r1
 8003204:	4313      	orrs	r3, r2
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003208:	4b6b      	ldr	r3, [pc, #428]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003218:	4a67      	ldr	r2, [pc, #412]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800321a:	430b      	orrs	r3, r1
 800321c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800321e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	2100      	movs	r1, #0
 8003228:	62b9      	str	r1, [r7, #40]	; 0x28
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003230:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003234:	460b      	mov	r3, r1
 8003236:	4313      	orrs	r3, r2
 8003238:	d011      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800323a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800323e:	3308      	adds	r3, #8
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f001 fa4a 	bl	80046dc <RCCEx_PLL2_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800324e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800325a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003266:	2100      	movs	r1, #0
 8003268:	6239      	str	r1, [r7, #32]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
 8003270:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003274:	460b      	mov	r3, r1
 8003276:	4313      	orrs	r3, r2
 8003278:	d011      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800327a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800327e:	3308      	adds	r3, #8
 8003280:	2101      	movs	r1, #1
 8003282:	4618      	mov	r0, r3
 8003284:	f001 fa2a 	bl	80046dc <RCCEx_PLL2_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800328e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800329a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800329e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	2100      	movs	r1, #0
 80032a8:	61b9      	str	r1, [r7, #24]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80032b4:	460b      	mov	r3, r1
 80032b6:	4313      	orrs	r3, r2
 80032b8:	d011      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032be:	3308      	adds	r3, #8
 80032c0:	2102      	movs	r1, #2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 fa0a 	bl	80046dc <RCCEx_PLL2_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80032ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80032de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	2100      	movs	r1, #0
 80032e8:	6139      	str	r1, [r7, #16]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80032f4:	460b      	mov	r3, r1
 80032f6:	4313      	orrs	r3, r2
 80032f8:	d011      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032fe:	3328      	adds	r3, #40	; 0x28
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f001 fa9c 	bl	8004840 <RCCEx_PLL3_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800330e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800331a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800331e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	2100      	movs	r1, #0
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003334:	460b      	mov	r3, r1
 8003336:	4313      	orrs	r3, r2
 8003338:	d011      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800333a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333e:	3328      	adds	r3, #40	; 0x28
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f001 fa7c 	bl	8004840 <RCCEx_PLL3_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800334e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800335a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800335e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	2100      	movs	r1, #0
 8003368:	6039      	str	r1, [r7, #0]
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003374:	460b      	mov	r3, r1
 8003376:	4313      	orrs	r3, r2
 8003378:	d011      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800337a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800337e:	3328      	adds	r3, #40	; 0x28
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f001 fa5c 	bl	8004840 <RCCEx_PLL3_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800338e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800339a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800339e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e000      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80033b2:	46bd      	mov	sp, r7
 80033b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b8:	58024400 	.word	0x58024400

080033bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b090      	sub	sp, #64	; 0x40
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80033c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033ca:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80033ce:	430b      	orrs	r3, r1
 80033d0:	f040 8094 	bne.w	80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80033d4:	4b9e      	ldr	r3, [pc, #632]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80033d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	f200 8087 	bhi.w	80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80033e6:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	08003401 	.word	0x08003401
 80033f0:	08003429 	.word	0x08003429
 80033f4:	08003451 	.word	0x08003451
 80033f8:	080034ed 	.word	0x080034ed
 80033fc:	08003479 	.word	0x08003479
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003400:	4b93      	ldr	r3, [pc, #588]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800340c:	d108      	bne.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800340e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003412:	4618      	mov	r0, r3
 8003414:	f001 f810 	bl	8004438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800341c:	f000 bd45 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003424:	f000 bd41 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003428:	4b89      	ldr	r3, [pc, #548]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003434:	d108      	bne.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003436:	f107 0318 	add.w	r3, r7, #24
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fd54 	bl	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003444:	f000 bd31 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800344c:	f000 bd2d 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003450:	4b7f      	ldr	r3, [pc, #508]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800345c:	d108      	bne.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800345e:	f107 030c 	add.w	r3, r7, #12
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fe94 	bl	8004190 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800346c:	f000 bd1d 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003474:	f000 bd19 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003478:	4b75      	ldr	r3, [pc, #468]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800347a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003480:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003482:	4b73      	ldr	r3, [pc, #460]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d10c      	bne.n	80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800348e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003494:	4b6e      	ldr	r3, [pc, #440]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	08db      	lsrs	r3, r3, #3
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	4a6d      	ldr	r2, [pc, #436]	; (8003654 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
 80034a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a6:	e01f      	b.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80034a8:	4b69      	ldr	r3, [pc, #420]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b4:	d106      	bne.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80034b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034bc:	d102      	bne.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80034be:	4b66      	ldr	r3, [pc, #408]	; (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80034c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c2:	e011      	b.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80034c4:	4b62      	ldr	r3, [pc, #392]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034d0:	d106      	bne.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80034d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d8:	d102      	bne.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80034da:	4b60      	ldr	r3, [pc, #384]	; (800365c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80034dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034de:	e003      	b.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80034e4:	f000 bce1 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80034e8:	f000 bcdf 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80034ec:	4b5c      	ldr	r3, [pc, #368]	; (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80034ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80034f0:	f000 bcdb 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80034f8:	f000 bcd7 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80034fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003500:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8003504:	430b      	orrs	r3, r1
 8003506:	f040 80ad 	bne.w	8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800350a:	4b51      	ldr	r3, [pc, #324]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003512:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d056      	beq.n	80035ca <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003522:	f200 8090 	bhi.w	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	2bc0      	cmp	r3, #192	; 0xc0
 800352a:	f000 8088 	beq.w	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	2bc0      	cmp	r3, #192	; 0xc0
 8003532:	f200 8088 	bhi.w	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	2b80      	cmp	r3, #128	; 0x80
 800353a:	d032      	beq.n	80035a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	2b80      	cmp	r3, #128	; 0x80
 8003540:	f200 8081 	bhi.w	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d014      	beq.n	800357a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8003550:	e079      	b.n	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003552:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800355e:	d108      	bne.n	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003564:	4618      	mov	r0, r3
 8003566:	f000 ff67 	bl	8004438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800356e:	f000 bc9c 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003576:	f000 bc98 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800357a:	4b35      	ldr	r3, [pc, #212]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003586:	d108      	bne.n	800359a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003588:	f107 0318 	add.w	r3, r7, #24
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fcab 	bl	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003596:	f000 bc88 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800359e:	f000 bc84 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80035a2:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ae:	d108      	bne.n	80035c2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80035b0:	f107 030c 	add.w	r3, r7, #12
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fdeb 	bl	8004190 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80035be:	f000 bc74 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80035c6:	f000 bc70 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80035ca:	4b21      	ldr	r3, [pc, #132]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80035d4:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d10c      	bne.n	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80035e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035e6:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	08db      	lsrs	r3, r3, #3
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	4a18      	ldr	r2, [pc, #96]	; (8003654 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80035f2:	fa22 f303 	lsr.w	r3, r2, r3
 80035f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f8:	e01f      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003606:	d106      	bne.n	8003616 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8003608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800360e:	d102      	bne.n	8003616 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003614:	e011      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003622:	d106      	bne.n	8003632 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8003624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800362a:	d102      	bne.n	8003632 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003630:	e003      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8003636:	f000 bc38 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800363a:	f000 bc36 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003642:	f000 bc32 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800364a:	f000 bc2e 	b.w	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800364e:	bf00      	nop
 8003650:	58024400 	.word	0x58024400
 8003654:	03d09000 	.word	0x03d09000
 8003658:	003d0900 	.word	0x003d0900
 800365c:	017d7840 	.word	0x017d7840
 8003660:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003668:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800366c:	430b      	orrs	r3, r1
 800366e:	f040 809c 	bne.w	80037aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8003672:	4b9e      	ldr	r3, [pc, #632]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800367a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003682:	d054      	beq.n	800372e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800368a:	f200 808b 	bhi.w	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003694:	f000 8083 	beq.w	800379e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800369e:	f200 8081 	bhi.w	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a8:	d02f      	beq.n	800370a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b0:	d878      	bhi.n	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d004      	beq.n	80036c2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036be:	d012      	beq.n	80036e6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80036c0:	e070      	b.n	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80036c2:	4b8a      	ldr	r3, [pc, #552]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036ce:	d107      	bne.n	80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80036d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 feaf 	bl	8004438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80036de:	e3e4      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80036e4:	e3e1      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80036e6:	4b81      	ldr	r3, [pc, #516]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f2:	d107      	bne.n	8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80036f4:	f107 0318 	add.w	r3, r7, #24
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fbf5 	bl	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003702:	e3d2      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003708:	e3cf      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800370a:	4b78      	ldr	r3, [pc, #480]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003716:	d107      	bne.n	8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fd37 	bl	8004190 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003726:	e3c0      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800372c:	e3bd      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800372e:	4b6f      	ldr	r3, [pc, #444]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003736:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003738:	4b6c      	ldr	r3, [pc, #432]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b04      	cmp	r3, #4
 8003742:	d10c      	bne.n	800375e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800374a:	4b68      	ldr	r3, [pc, #416]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	08db      	lsrs	r3, r3, #3
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	4a66      	ldr	r2, [pc, #408]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8003756:	fa22 f303 	lsr.w	r3, r2, r3
 800375a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800375c:	e01e      	b.n	800379c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800375e:	4b63      	ldr	r3, [pc, #396]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376a:	d106      	bne.n	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800376c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003772:	d102      	bne.n	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003774:	4b5f      	ldr	r3, [pc, #380]	; (80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8003776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003778:	e010      	b.n	800379c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800377a:	4b5c      	ldr	r3, [pc, #368]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003786:	d106      	bne.n	8003796 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8003788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800378e:	d102      	bne.n	8003796 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003790:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8003792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003794:	e002      	b.n	800379c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800379a:	e386      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800379c:	e385      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800379e:	4b57      	ldr	r3, [pc, #348]	; (80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80037a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80037a2:	e382      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80037a8:	e37f      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80037aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ae:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80037b2:	430b      	orrs	r3, r1
 80037b4:	f040 80a7 	bne.w	8003906 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80037b8:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80037c0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037c8:	d055      	beq.n	8003876 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037d0:	f200 8096 	bhi.w	8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037da:	f000 8084 	beq.w	80038e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037e4:	f200 808c 	bhi.w	8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037ee:	d030      	beq.n	8003852 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037f6:	f200 8083 	bhi.w	8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d004      	beq.n	800380a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003806:	d012      	beq.n	800382e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8003808:	e07a      	b.n	8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800380a:	4b38      	ldr	r3, [pc, #224]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003816:	d107      	bne.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fe0b 	bl	8004438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003826:	e340      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800382c:	e33d      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800382e:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800383a:	d107      	bne.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800383c:	f107 0318 	add.w	r3, r7, #24
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fb51 	bl	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800384a:	e32e      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003850:	e32b      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003852:	4b26      	ldr	r3, [pc, #152]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800385a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800385e:	d107      	bne.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003860:	f107 030c 	add.w	r3, r7, #12
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fc93 	bl	8004190 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800386e:	e31c      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003874:	e319      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003876:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800387e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b04      	cmp	r3, #4
 800388a:	d10c      	bne.n	80038a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800388c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003892:	4b16      	ldr	r3, [pc, #88]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	08db      	lsrs	r3, r3, #3
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a4:	e01e      	b.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b2:	d106      	bne.n	80038c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80038b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ba:	d102      	bne.n	80038c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80038bc:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80038be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038c0:	e010      	b.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ce:	d106      	bne.n	80038de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80038d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d6:	d102      	bne.n	80038de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80038d8:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038dc:	e002      	b.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80038e2:	e2e2      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80038e4:	e2e1      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80038e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80038ea:	e2de      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80038ec:	58024400 	.word	0x58024400
 80038f0:	03d09000 	.word	0x03d09000
 80038f4:	003d0900 	.word	0x003d0900
 80038f8:	017d7840 	.word	0x017d7840
 80038fc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003904:	e2d1      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800390a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800390e:	430b      	orrs	r3, r1
 8003910:	f040 809c 	bne.w	8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8003914:	4b93      	ldr	r3, [pc, #588]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003918:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800391c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003924:	d054      	beq.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800392c:	f200 808b 	bhi.w	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003936:	f000 8083 	beq.w	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003940:	f200 8081 	bhi.w	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394a:	d02f      	beq.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003952:	d878      	bhi.n	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003960:	d012      	beq.n	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8003962:	e070      	b.n	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003964:	4b7f      	ldr	r3, [pc, #508]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003970:	d107      	bne.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fd5e 	bl	8004438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003980:	e293      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003986:	e290      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003988:	4b76      	ldr	r3, [pc, #472]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003994:	d107      	bne.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003996:	f107 0318 	add.w	r3, r7, #24
 800399a:	4618      	mov	r0, r3
 800399c:	f000 faa4 	bl	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80039a4:	e281      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80039aa:	e27e      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80039ac:	4b6d      	ldr	r3, [pc, #436]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b8:	d107      	bne.n	80039ca <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80039ba:	f107 030c 	add.w	r3, r7, #12
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fbe6 	bl	8004190 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80039c8:	e26f      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80039ce:	e26c      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80039d0:	4b64      	ldr	r3, [pc, #400]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80039d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039d8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80039da:	4b62      	ldr	r3, [pc, #392]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d109      	bne.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039ec:	4b5d      	ldr	r3, [pc, #372]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	08db      	lsrs	r3, r3, #3
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	4a5c      	ldr	r2, [pc, #368]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
 80039fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039fe:	e01e      	b.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003a00:	4b58      	ldr	r3, [pc, #352]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0c:	d106      	bne.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a14:	d102      	bne.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003a16:	4b55      	ldr	r3, [pc, #340]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a1a:	e010      	b.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003a1c:	4b51      	ldr	r3, [pc, #324]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a28:	d106      	bne.n	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a30:	d102      	bne.n	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003a32:	4b4f      	ldr	r3, [pc, #316]	; (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8003a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a36:	e002      	b.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8003a3c:	e235      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003a3e:	e234      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003a40:	4b4c      	ldr	r3, [pc, #304]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8003a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003a44:	e231      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003a4a:	e22e      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8003a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a50:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8003a54:	430b      	orrs	r3, r1
 8003a56:	f040 808f 	bne.w	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8003a5a:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8003a62:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8003a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a6a:	d06b      	beq.n	8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a72:	d874      	bhi.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a7a:	d056      	beq.n	8003b2a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a82:	d86c      	bhi.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a8a:	d03b      	beq.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a92:	d864      	bhi.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8003a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a9a:	d021      	beq.n	8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aa2:	d85c      	bhi.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab0:	d004      	beq.n	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8003ab2:	e054      	b.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8003ab4:	f7fe fa62 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 8003ab8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8003aba:	e1f6      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003abc:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ac8:	d107      	bne.n	8003ada <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003aca:	f107 0318 	add.w	r3, r7, #24
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fa0a 	bl	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003ad8:	e1e7      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003ade:	e1e4      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003ae0:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aec:	d107      	bne.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003aee:	f107 030c 	add.w	r3, r7, #12
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fb4c 	bl	8004190 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003afc:	e1d5      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b02:	e1d2      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d109      	bne.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b10:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	08db      	lsrs	r3, r3, #3
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003b22:	e1c2      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b28:	e1bf      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8003b2a:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b36:	d102      	bne.n	8003b3e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003b3c:	e1b5      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b42:	e1b2      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b50:	d102      	bne.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8003b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003b56:	e1a8      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b5c:	e1a5      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b62:	e1a2      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003b64:	58024400 	.word	0x58024400
 8003b68:	03d09000 	.word	0x03d09000
 8003b6c:	003d0900 	.word	0x003d0900
 8003b70:	017d7840 	.word	0x017d7840
 8003b74:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b7c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8003b80:	430b      	orrs	r3, r1
 8003b82:	d173      	bne.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003b84:	4b9c      	ldr	r3, [pc, #624]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b8c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b94:	d02f      	beq.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b9c:	d863      	bhi.n	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d004      	beq.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003baa:	d012      	beq.n	8003bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8003bac:	e05b      	b.n	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003bae:	4b92      	ldr	r3, [pc, #584]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bba:	d107      	bne.n	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003bbc:	f107 0318 	add.w	r3, r7, #24
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 f991 	bl	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003bca:	e16e      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003bd0:	e16b      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003bd2:	4b89      	ldr	r3, [pc, #548]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bde:	d107      	bne.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fad3 	bl	8004190 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003bee:	e15c      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003bf4:	e159      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003bf6:	4b80      	ldr	r3, [pc, #512]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003c00:	4b7d      	ldr	r3, [pc, #500]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d10c      	bne.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c12:	4b79      	ldr	r3, [pc, #484]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	08db      	lsrs	r3, r3, #3
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	4a77      	ldr	r2, [pc, #476]	; (8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8003c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c24:	e01e      	b.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003c26:	4b74      	ldr	r3, [pc, #464]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c32:	d106      	bne.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c3a:	d102      	bne.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003c3c:	4b70      	ldr	r3, [pc, #448]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8003c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c40:	e010      	b.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003c42:	4b6d      	ldr	r3, [pc, #436]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8003c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c56:	d102      	bne.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003c58:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5c:	e002      	b.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8003c62:	e122      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003c64:	e121      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003c6a:	e11e      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c70:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8003c74:	430b      	orrs	r3, r1
 8003c76:	d133      	bne.n	8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8003c78:	4b5f      	ldr	r3, [pc, #380]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8e:	d012      	beq.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8003c90:	e023      	b.n	8003cda <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003c92:	4b59      	ldr	r3, [pc, #356]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c9e:	d107      	bne.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fbc7 	bl	8004438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003cae:	e0fc      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003cb4:	e0f9      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003cb6:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003cc4:	f107 0318 	add.w	r3, r7, #24
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 f90d 	bl	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003cd2:	e0ea      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003cd8:	e0e7      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003cde:	e0e4      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8003ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ce4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	f040 808d 	bne.w	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8003cee:	4b42      	ldr	r3, [pc, #264]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8003cf6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cfe:	d06b      	beq.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d06:	d874      	bhi.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d056      	beq.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8003d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d16:	d86c      	bhi.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d1e:	d03b      	beq.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8003d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d26:	d864      	bhi.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2e:	d021      	beq.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d36:	d85c      	bhi.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d44:	d004      	beq.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8003d46:	e054      	b.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8003d48:	f000 f8b8 	bl	8003ebc <HAL_RCCEx_GetD3PCLK1Freq>
 8003d4c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8003d4e:	e0ac      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003d50:	4b29      	ldr	r3, [pc, #164]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d5e:	f107 0318 	add.w	r3, r7, #24
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f8c0 	bl	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003d6c:	e09d      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003d72:	e09a      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003d74:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d80:	d107      	bne.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d82:	f107 030c 	add.w	r3, r7, #12
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fa02 	bl	8004190 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003d90:	e08b      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003d96:	e088      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d109      	bne.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003da4:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	08db      	lsrs	r3, r3, #3
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
 8003db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003db6:	e078      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003dbc:	e075      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dca:	d102      	bne.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8003dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003dd0:	e06b      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003dd6:	e068      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003dd8:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de4:	d102      	bne.n	8003dec <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8003de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003dea:	e05e      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003df0:	e05b      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003df6:	e058      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003df8:	58024400 	.word	0x58024400
 8003dfc:	03d09000 	.word	0x03d09000
 8003e00:	003d0900 	.word	0x003d0900
 8003e04:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8003e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e0c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8003e10:	430b      	orrs	r3, r1
 8003e12:	d148      	bne.n	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8003e14:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8003e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e24:	d02a      	beq.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e2c:	d838      	bhi.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d004      	beq.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8003e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e3a:	d00d      	beq.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8003e3c:	e030      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003e3e:	4b1d      	ldr	r3, [pc, #116]	; (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e4a:	d102      	bne.n	8003e52 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8003e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e50:	e02b      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e56:	e028      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003e58:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e64:	d107      	bne.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fae4 	bl	8004438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e74:	e019      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e7a:	e016      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e88:	d107      	bne.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e8a:	f107 0318 	add.w	r3, r7, #24
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 f82a 	bl	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e98:	e007      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e9e:	e004      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003ea4:	e001      	b.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8003eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3740      	adds	r7, #64	; 0x40
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	017d7840 	.word	0x017d7840

08003ebc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ec0:	f7fe f82c 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4904      	ldr	r1, [pc, #16]	; (8003ee4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	58024400 	.word	0x58024400
 8003ee4:	08007654 	.word	0x08007654

08003ee8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b089      	sub	sp, #36	; 0x24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ef0:	4ba1      	ldr	r3, [pc, #644]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003efa:	4b9f      	ldr	r3, [pc, #636]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efe:	0b1b      	lsrs	r3, r3, #12
 8003f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f06:	4b9c      	ldr	r3, [pc, #624]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003f12:	4b99      	ldr	r3, [pc, #612]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f16:	08db      	lsrs	r3, r3, #3
 8003f18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8111 	beq.w	8004158 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	f000 8083 	beq.w	8004044 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	f200 80a1 	bhi.w	8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d056      	beq.n	8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f52:	e099      	b.n	8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f54:	4b88      	ldr	r3, [pc, #544]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d02d      	beq.n	8003fbc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f60:	4b85      	ldr	r3, [pc, #532]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	08db      	lsrs	r3, r3, #3
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	4a84      	ldr	r2, [pc, #528]	; (800417c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	ee07 3a90 	vmov	s15, r3
 8003f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f8a:	4b7b      	ldr	r3, [pc, #492]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003fba:	e087      	b.n	80040cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004184 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fce:	4b6a      	ldr	r3, [pc, #424]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fe2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ffe:	e065      	b.n	80040cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800400e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004012:	4b59      	ldr	r3, [pc, #356]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004022:	ed97 6a03 	vldr	s12, [r7, #12]
 8004026:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800402a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800402e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800403a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004042:	e043      	b.n	80040cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800418c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004056:	4b48      	ldr	r3, [pc, #288]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004066:	ed97 6a03 	vldr	s12, [r7, #12]
 800406a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800406e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800407a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004086:	e021      	b.n	80040cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004092:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409a:	4b37      	ldr	r3, [pc, #220]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80040cc:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	0a5b      	lsrs	r3, r3, #9
 80040d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80040ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f2:	ee17 2a90 	vmov	r2, s15
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80040fa:	4b1f      	ldr	r3, [pc, #124]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	0c1b      	lsrs	r3, r3, #16
 8004100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004104:	ee07 3a90 	vmov	s15, r3
 8004108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004110:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004114:	edd7 6a07 	vldr	s13, [r7, #28]
 8004118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800411c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004120:	ee17 2a90 	vmov	r2, s15
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	0e1b      	lsrs	r3, r3, #24
 800412e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800413e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004142:	edd7 6a07 	vldr	s13, [r7, #28]
 8004146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800414a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414e:	ee17 2a90 	vmov	r2, s15
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004156:	e008      	b.n	800416a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	609a      	str	r2, [r3, #8]
}
 800416a:	bf00      	nop
 800416c:	3724      	adds	r7, #36	; 0x24
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	58024400 	.word	0x58024400
 800417c:	03d09000 	.word	0x03d09000
 8004180:	46000000 	.word	0x46000000
 8004184:	4c742400 	.word	0x4c742400
 8004188:	4a742400 	.word	0x4a742400
 800418c:	4bbebc20 	.word	0x4bbebc20

08004190 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	; 0x24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004198:	4ba1      	ldr	r3, [pc, #644]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80041a2:	4b9f      	ldr	r3, [pc, #636]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	0d1b      	lsrs	r3, r3, #20
 80041a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80041ae:	4b9c      	ldr	r3, [pc, #624]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80041ba:	4b99      	ldr	r3, [pc, #612]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041be:	08db      	lsrs	r3, r3, #3
 80041c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	fb02 f303 	mul.w	r3, r2, r3
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8111 	beq.w	8004400 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	f000 8083 	beq.w	80042ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	f200 80a1 	bhi.w	8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d056      	beq.n	80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80041fa:	e099      	b.n	8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041fc:	4b88      	ldr	r3, [pc, #544]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d02d      	beq.n	8004264 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004208:	4b85      	ldr	r3, [pc, #532]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	08db      	lsrs	r3, r3, #3
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	4a84      	ldr	r2, [pc, #528]	; (8004424 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
 8004218:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	ee07 3a90 	vmov	s15, r3
 8004220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004232:	4b7b      	ldr	r3, [pc, #492]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004242:	ed97 6a03 	vldr	s12, [r7, #12]
 8004246:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800424a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800425a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004262:	e087      	b.n	8004374 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800442c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004276:	4b6a      	ldr	r3, [pc, #424]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004286:	ed97 6a03 	vldr	s12, [r7, #12]
 800428a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800428e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800429a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800429e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042a6:	e065      	b.n	8004374 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ba:	4b59      	ldr	r3, [pc, #356]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ea:	e043      	b.n	8004374 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80042fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fe:	4b48      	ldr	r3, [pc, #288]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004312:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800432e:	e021      	b.n	8004374 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800433e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004342:	4b37      	ldr	r3, [pc, #220]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004352:	ed97 6a03 	vldr	s12, [r7, #12]
 8004356:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800435a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800435e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004372:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004374:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	0a5b      	lsrs	r3, r3, #9
 800437a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004386:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800438a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800438e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800439a:	ee17 2a90 	vmov	r2, s15
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80043a2:	4b1f      	ldr	r3, [pc, #124]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	0c1b      	lsrs	r3, r3, #16
 80043a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ac:	ee07 3a90 	vmov	s15, r3
 80043b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80043c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c8:	ee17 2a90 	vmov	r2, s15
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	0e1b      	lsrs	r3, r3, #24
 80043d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f6:	ee17 2a90 	vmov	r2, s15
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80043fe:	e008      	b.n	8004412 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	609a      	str	r2, [r3, #8]
}
 8004412:	bf00      	nop
 8004414:	3724      	adds	r7, #36	; 0x24
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	58024400 	.word	0x58024400
 8004424:	03d09000 	.word	0x03d09000
 8004428:	46000000 	.word	0x46000000
 800442c:	4c742400 	.word	0x4c742400
 8004430:	4a742400 	.word	0x4a742400
 8004434:	4bbebc20 	.word	0x4bbebc20

08004438 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004438:	b480      	push	{r7}
 800443a:	b089      	sub	sp, #36	; 0x24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004440:	4ba0      	ldr	r3, [pc, #640]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800444a:	4b9e      	ldr	r3, [pc, #632]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	091b      	lsrs	r3, r3, #4
 8004450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004454:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004456:	4b9b      	ldr	r3, [pc, #620]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004460:	4b98      	ldr	r3, [pc, #608]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004464:	08db      	lsrs	r3, r3, #3
 8004466:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	fb02 f303 	mul.w	r3, r2, r3
 8004470:	ee07 3a90 	vmov	s15, r3
 8004474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004478:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8111 	beq.w	80046a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	2b02      	cmp	r3, #2
 8004488:	f000 8083 	beq.w	8004592 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b02      	cmp	r3, #2
 8004490:	f200 80a1 	bhi.w	80045d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d056      	beq.n	800454e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80044a0:	e099      	b.n	80045d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044a2:	4b88      	ldr	r3, [pc, #544]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d02d      	beq.n	800450a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044ae:	4b85      	ldr	r3, [pc, #532]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	08db      	lsrs	r3, r3, #3
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	4a83      	ldr	r2, [pc, #524]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80044ba:	fa22 f303 	lsr.w	r3, r2, r3
 80044be:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	ee07 3a90 	vmov	s15, r3
 80044d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d8:	4b7a      	ldr	r3, [pc, #488]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ec:	eddf 5a77 	vldr	s11, [pc, #476]	; 80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80044f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004504:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004508:	e087      	b.n	800461a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	ee07 3a90 	vmov	s15, r3
 8004510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004514:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80046d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451c:	4b69      	ldr	r3, [pc, #420]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004524:	ee07 3a90 	vmov	s15, r3
 8004528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004530:	eddf 5a66 	vldr	s11, [pc, #408]	; 80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004548:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800454c:	e065      	b.n	800461a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	ee07 3a90 	vmov	s15, r3
 8004554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004558:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80046d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800455c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004560:	4b58      	ldr	r3, [pc, #352]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004570:	ed97 6a03 	vldr	s12, [r7, #12]
 8004574:	eddf 5a55 	vldr	s11, [pc, #340]	; 80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004590:	e043      	b.n	800461a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	ee07 3a90 	vmov	s15, r3
 8004598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80046d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80045a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a4:	4b47      	ldr	r3, [pc, #284]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80045b8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80045bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045d4:	e021      	b.n	800461a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	ee07 3a90 	vmov	s15, r3
 80045dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80046d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80045e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e8:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80045fc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004614:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004618:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800461a:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	0a5b      	lsrs	r3, r3, #9
 8004620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004634:	edd7 6a07 	vldr	s13, [r7, #28]
 8004638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800463c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004640:	ee17 2a90 	vmov	r2, s15
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8004648:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800465e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004662:	edd7 6a07 	vldr	s13, [r7, #28]
 8004666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800466a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800466e:	ee17 2a90 	vmov	r2, s15
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004676:	4b13      	ldr	r3, [pc, #76]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	0e1b      	lsrs	r3, r3, #24
 800467c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004680:	ee07 3a90 	vmov	s15, r3
 8004684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800468c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004690:	edd7 6a07 	vldr	s13, [r7, #28]
 8004694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469c:	ee17 2a90 	vmov	r2, s15
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80046a4:	e008      	b.n	80046b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	609a      	str	r2, [r3, #8]
}
 80046b8:	bf00      	nop
 80046ba:	3724      	adds	r7, #36	; 0x24
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	58024400 	.word	0x58024400
 80046c8:	03d09000 	.word	0x03d09000
 80046cc:	46000000 	.word	0x46000000
 80046d0:	4c742400 	.word	0x4c742400
 80046d4:	4a742400 	.word	0x4a742400
 80046d8:	4bbebc20 	.word	0x4bbebc20

080046dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046ea:	4b53      	ldr	r3, [pc, #332]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d101      	bne.n	80046fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e099      	b.n	800482e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80046fa:	4b4f      	ldr	r3, [pc, #316]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a4e      	ldr	r2, [pc, #312]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004700:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004706:	f7fc f917 	bl	8000938 <HAL_GetTick>
 800470a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800470c:	e008      	b.n	8004720 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800470e:	f7fc f913 	bl	8000938 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e086      	b.n	800482e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004720:	4b45      	ldr	r3, [pc, #276]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800472c:	4b42      	ldr	r3, [pc, #264]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	031b      	lsls	r3, r3, #12
 800473a:	493f      	ldr	r1, [pc, #252]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 800473c:	4313      	orrs	r3, r2
 800473e:	628b      	str	r3, [r1, #40]	; 0x28
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	3b01      	subs	r3, #1
 8004746:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	3b01      	subs	r3, #1
 8004750:	025b      	lsls	r3, r3, #9
 8004752:	b29b      	uxth	r3, r3
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	3b01      	subs	r3, #1
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	3b01      	subs	r3, #1
 800476a:	061b      	lsls	r3, r3, #24
 800476c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004770:	4931      	ldr	r1, [pc, #196]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004772:	4313      	orrs	r3, r2
 8004774:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004776:	4b30      	ldr	r3, [pc, #192]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	492d      	ldr	r1, [pc, #180]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004788:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	f023 0220 	bic.w	r2, r3, #32
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	4928      	ldr	r1, [pc, #160]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800479a:	4b27      	ldr	r3, [pc, #156]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	4a26      	ldr	r2, [pc, #152]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047a0:	f023 0310 	bic.w	r3, r3, #16
 80047a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047a6:	4b24      	ldr	r3, [pc, #144]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <RCCEx_PLL2_Config+0x160>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	69d2      	ldr	r2, [r2, #28]
 80047b2:	00d2      	lsls	r2, r2, #3
 80047b4:	4920      	ldr	r1, [pc, #128]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047ba:	4b1f      	ldr	r3, [pc, #124]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	4a1e      	ldr	r2, [pc, #120]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047c0:	f043 0310 	orr.w	r3, r3, #16
 80047c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d106      	bne.n	80047da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047cc:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4a19      	ldr	r2, [pc, #100]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047d8:	e00f      	b.n	80047fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d106      	bne.n	80047ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047e0:	4b15      	ldr	r3, [pc, #84]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	4a14      	ldr	r2, [pc, #80]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047ec:	e005      	b.n	80047fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	4a11      	ldr	r2, [pc, #68]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a0e      	ldr	r2, [pc, #56]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004800:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004806:	f7fc f897 	bl	8000938 <HAL_GetTick>
 800480a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800480c:	e008      	b.n	8004820 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800480e:	f7fc f893 	bl	8000938 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e006      	b.n	800482e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	58024400 	.word	0x58024400
 800483c:	ffff0007 	.word	0xffff0007

08004840 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800484e:	4b53      	ldr	r3, [pc, #332]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b03      	cmp	r3, #3
 8004858:	d101      	bne.n	800485e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e099      	b.n	8004992 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800485e:	4b4f      	ldr	r3, [pc, #316]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a4e      	ldr	r2, [pc, #312]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486a:	f7fc f865 	bl	8000938 <HAL_GetTick>
 800486e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004870:	e008      	b.n	8004884 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004872:	f7fc f861 	bl	8000938 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e086      	b.n	8004992 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004884:	4b45      	ldr	r3, [pc, #276]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f0      	bne.n	8004872 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004890:	4b42      	ldr	r3, [pc, #264]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	051b      	lsls	r3, r3, #20
 800489e:	493f      	ldr	r1, [pc, #252]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	628b      	str	r3, [r1, #40]	; 0x28
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	025b      	lsls	r3, r3, #9
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	3b01      	subs	r3, #1
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	061b      	lsls	r3, r3, #24
 80048d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048d4:	4931      	ldr	r1, [pc, #196]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048da:	4b30      	ldr	r3, [pc, #192]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	492d      	ldr	r1, [pc, #180]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80048ec:	4b2b      	ldr	r3, [pc, #172]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	4928      	ldr	r1, [pc, #160]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80048fe:	4b27      	ldr	r3, [pc, #156]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	4a26      	ldr	r2, [pc, #152]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004908:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 800490c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490e:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <RCCEx_PLL3_Config+0x160>)
 8004910:	4013      	ands	r3, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	69d2      	ldr	r2, [r2, #28]
 8004916:	00d2      	lsls	r2, r2, #3
 8004918:	4920      	ldr	r1, [pc, #128]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 800491a:	4313      	orrs	r3, r2
 800491c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800491e:	4b1f      	ldr	r3, [pc, #124]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	4a1e      	ldr	r2, [pc, #120]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004928:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d106      	bne.n	800493e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004930:	4b1a      	ldr	r3, [pc, #104]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	4a19      	ldr	r2, [pc, #100]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004936:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800493a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800493c:	e00f      	b.n	800495e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d106      	bne.n	8004952 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004944:	4b15      	ldr	r3, [pc, #84]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	4a14      	ldr	r2, [pc, #80]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 800494a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800494e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004950:	e005      	b.n	800495e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004952:	4b12      	ldr	r3, [pc, #72]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	4a11      	ldr	r2, [pc, #68]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800495e:	4b0f      	ldr	r3, [pc, #60]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a0e      	ldr	r2, [pc, #56]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800496a:	f7fb ffe5 	bl	8000938 <HAL_GetTick>
 800496e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004970:	e008      	b.n	8004984 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004972:	f7fb ffe1 	bl	8000938 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e006      	b.n	8004992 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f0      	beq.n	8004972 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	58024400 	.word	0x58024400
 80049a0:	ffff0007 	.word	0xffff0007

080049a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	; 0x28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e075      	b.n	8004aa2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d105      	bne.n	80049ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7fb fd99 	bl	8000500 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2204      	movs	r2, #4
 80049d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f868 	bl	8004aac <HAL_SD_InitCard>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e05d      	b.n	8004aa2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80049e6:	f107 0308 	add.w	r3, r7, #8
 80049ea:	4619      	mov	r1, r3
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 ff77 	bl	80058e0 <HAL_SD_GetCardStatus>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e052      	b.n	8004aa2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80049fc:	7e3b      	ldrb	r3, [r7, #24]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8004a02:	7e7b      	ldrb	r3, [r7, #25]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d10a      	bne.n	8004a26 <HAL_SD_Init+0x82>
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d102      	bne.n	8004a1c <HAL_SD_Init+0x78>
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d004      	beq.n	8004a26 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a22:	659a      	str	r2, [r3, #88]	; 0x58
 8004a24:	e00b      	b.n	8004a3e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d104      	bne.n	8004a38 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a34:	659a      	str	r2, [r3, #88]	; 0x58
 8004a36:	e002      	b.n	8004a3e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f001 f835 	bl	8005ab4 <HAL_SD_ConfigWideBusOperation>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e026      	b.n	8004aa2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004a54:	f7fb ff70 	bl	8000938 <HAL_GetTick>
 8004a58:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004a5a:	e011      	b.n	8004a80 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004a5c:	f7fb ff6c 	bl	8000938 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d109      	bne.n	8004a80 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a72:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e010      	b.n	8004aa2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f001 f929 	bl	8005cd8 <HAL_SD_GetCardState>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d1e7      	bne.n	8004a5c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3728      	adds	r7, #40	; 0x28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b08d      	sub	sp, #52	; 0x34
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004ac4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004ac8:	f04f 0100 	mov.w	r1, #0
 8004acc:	f7fe fc76 	bl	80033bc <HAL_RCCEx_GetPeriphCLKFreq>
 8004ad0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d109      	bne.n	8004aec <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ae6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e070      	b.n	8004bce <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	4a39      	ldr	r2, [pc, #228]	; (8004bd8 <HAL_SD_InitCard+0x12c>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	091b      	lsrs	r3, r3, #4
 8004af8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681c      	ldr	r4, [r3, #0]
 8004afe:	466a      	mov	r2, sp
 8004b00:	f107 0318 	add.w	r3, r7, #24
 8004b04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b08:	e882 0003 	stmia.w	r2, {r0, r1}
 8004b0c:	f107 030c 	add.w	r3, r7, #12
 8004b10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b12:	4620      	mov	r0, r4
 8004b14:	f001 fd72 	bl	80065fc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 fdb5 	bl	800668c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8004b3a:	4a28      	ldr	r2, [pc, #160]	; (8004bdc <HAL_SD_InitCard+0x130>)
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fb ff03 	bl	8000950 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f001 f9b2 	bl	8005eb4 <SD_PowerON>
 8004b50:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00b      	beq.n	8004b70 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e02e      	b.n	8004bce <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f001 f8d1 	bl	8005d18 <SD_InitCard>
 8004b76:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e01b      	b.n	8004bce <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f001 fe0a 	bl	80067b8 <SDMMC_CmdBlockLength>
 8004ba4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00f      	beq.n	8004bcc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a0b      	ldr	r2, [pc, #44]	; (8004be0 <HAL_SD_InitCard+0x134>)
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	372c      	adds	r7, #44	; 0x2c
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd90      	pop	{r4, r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	014f8b59 	.word	0x014f8b59
 8004bdc:	00012110 	.word	0x00012110
 8004be0:	1fe00fff 	.word	0x1fe00fff

08004be4 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b092      	sub	sp, #72	; 0x48
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004bf2:	f7fb fea1 	bl	8000938 <HAL_GetTick>
 8004bf6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d107      	bne.n	8004c16 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e167      	b.n	8004ee6 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	f040 815a 	bne.w	8004ed8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	441a      	add	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d907      	bls.n	8004c48 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e14e      	b.n	8004ee6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2200      	movs	r2, #0
 8004c56:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d002      	beq.n	8004c66 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c62:	025b      	lsls	r3, r3, #9
 8004c64:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	025b      	lsls	r3, r3, #9
 8004c70:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004c72:	2390      	movs	r3, #144	; 0x90
 8004c74:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004c76:	2302      	movs	r3, #2
 8004c78:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f107 0214 	add.w	r2, r7, #20
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fd67 	bl	8006760 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d90a      	bls.n	8004cbe <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2202      	movs	r2, #2
 8004cac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f001 fdc5 	bl	8006844 <SDMMC_CmdReadMultiBlock>
 8004cba:	6478      	str	r0, [r7, #68]	; 0x44
 8004cbc:	e009      	b.n	8004cd2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f001 fd97 	bl	80067fe <SDMMC_CmdReadSingleBlock>
 8004cd0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8004cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d012      	beq.n	8004cfe <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a84      	ldr	r2, [pc, #528]	; (8004ef0 <HAL_SD_ReadBlocks+0x30c>)
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e0f3      	b.n	8004ee6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004d02:	e058      	b.n	8004db6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d033      	beq.n	8004d7a <HAL_SD_ReadBlocks+0x196>
 8004d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d14:	2b1f      	cmp	r3, #31
 8004d16:	d930      	bls.n	8004d7a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8004d18:	2300      	movs	r3, #0
 8004d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1c:	e027      	b.n	8004d6e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 fc94 	bl	8006650 <SDMMC_ReadFIFO>
 8004d28:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d34:	3301      	adds	r3, #1
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3a:	0a1b      	lsrs	r3, r3, #8
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d40:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d44:	3301      	adds	r3, #1
 8004d46:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4a:	0c1b      	lsrs	r3, r3, #16
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d54:	3301      	adds	r3, #1
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	0e1b      	lsrs	r3, r3, #24
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d60:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d64:	3301      	adds	r3, #1
 8004d66:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8004d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d70:	2b07      	cmp	r3, #7
 8004d72:	d9d4      	bls.n	8004d1e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8004d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d76:	3b20      	subs	r3, #32
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8004d7a:	f7fb fddd 	bl	8000938 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d902      	bls.n	8004d90 <HAL_SD_ReadBlocks+0x1ac>
 8004d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d112      	bne.n	8004db6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a56      	ldr	r2, [pc, #344]	; (8004ef0 <HAL_SD_ReadBlocks+0x30c>)
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e097      	b.n	8004ee6 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbc:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d09f      	beq.n	8004d04 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d022      	beq.n	8004e28 <HAL_SD_ReadBlocks+0x244>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d91f      	bls.n	8004e28 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d01b      	beq.n	8004e28 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f001 fd8f 	bl	8006918 <SDMMC_CmdStopTransfer>
 8004dfa:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8004dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d012      	beq.n	8004e28 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a3a      	ldr	r2, [pc, #232]	; (8004ef0 <HAL_SD_ReadBlocks+0x30c>)
 8004e08:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e10:	431a      	orrs	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e05e      	b.n	8004ee6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d012      	beq.n	8004e5c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a2d      	ldr	r2, [pc, #180]	; (8004ef0 <HAL_SD_ReadBlocks+0x30c>)
 8004e3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e42:	f043 0208 	orr.w	r2, r3, #8
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e044      	b.n	8004ee6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d012      	beq.n	8004e90 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a20      	ldr	r2, [pc, #128]	; (8004ef0 <HAL_SD_ReadBlocks+0x30c>)
 8004e70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e76:	f043 0202 	orr.w	r2, r3, #2
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e02a      	b.n	8004ee6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d012      	beq.n	8004ec4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a13      	ldr	r2, [pc, #76]	; (8004ef0 <HAL_SD_ReadBlocks+0x30c>)
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	f043 0220 	orr.w	r2, r3, #32
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e010      	b.n	8004ee6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <HAL_SD_ReadBlocks+0x310>)
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e006      	b.n	8004ee6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004edc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
  }
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3748      	adds	r7, #72	; 0x48
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	1fe00fff 	.word	0x1fe00fff
 8004ef4:	18000f3a 	.word	0x18000f3a

08004ef8 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b092      	sub	sp, #72	; 0x48
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004f06:	f7fb fd17 	bl	8000938 <HAL_GetTick>
 8004f0a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d107      	bne.n	8004f2a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e16b      	b.n	8005202 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	f040 815e 	bne.w	80051f4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	441a      	add	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d907      	bls.n	8004f5c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f50:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e152      	b.n	8005202 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2203      	movs	r2, #3
 8004f60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d002      	beq.n	8004f7a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	025b      	lsls	r3, r3, #9
 8004f78:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	025b      	lsls	r3, r3, #9
 8004f84:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004f86:	2390      	movs	r3, #144	; 0x90
 8004f88:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004f92:	2300      	movs	r3, #0
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f107 0218 	add.w	r2, r7, #24
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f001 fbdd 	bl	8006760 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d90a      	bls.n	8004fd2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 fc81 	bl	80068d0 <SDMMC_CmdWriteMultiBlock>
 8004fce:	6478      	str	r0, [r7, #68]	; 0x44
 8004fd0:	e009      	b.n	8004fe6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2210      	movs	r2, #16
 8004fd6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f001 fc53 	bl	800688a <SDMMC_CmdWriteSingleBlock>
 8004fe4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8004fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d012      	beq.n	8005012 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a86      	ldr	r2, [pc, #536]	; (800520c <HAL_SD_WriteBlocks+0x314>)
 8004ff2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e0f7      	b.n	8005202 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005016:	e05c      	b.n	80050d2 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d037      	beq.n	8005096 <HAL_SD_WriteBlocks+0x19e>
 8005026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005028:	2b1f      	cmp	r3, #31
 800502a:	d934      	bls.n	8005096 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800502c:	2300      	movs	r3, #0
 800502e:	643b      	str	r3, [r7, #64]	; 0x40
 8005030:	e02b      	b.n	800508a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	3301      	adds	r3, #1
 800503c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	021a      	lsls	r2, r3, #8
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800504a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504c:	3301      	adds	r3, #1
 800504e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	041a      	lsls	r2, r3, #16
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800505c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505e:	3301      	adds	r3, #1
 8005060:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	061a      	lsls	r2, r3, #24
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	3301      	adds	r3, #1
 8005072:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f107 0214 	add.w	r2, r7, #20
 800507c:	4611      	mov	r1, r2
 800507e:	4618      	mov	r0, r3
 8005080:	f001 faf3 	bl	800666a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8005084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005086:	3301      	adds	r3, #1
 8005088:	643b      	str	r3, [r7, #64]	; 0x40
 800508a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800508c:	2b07      	cmp	r3, #7
 800508e:	d9d0      	bls.n	8005032 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005092:	3b20      	subs	r3, #32
 8005094:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005096:	f7fb fc4f 	bl	8000938 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d902      	bls.n	80050ac <HAL_SD_WriteBlocks+0x1b4>
 80050a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d112      	bne.n	80050d2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a56      	ldr	r2, [pc, #344]	; (800520c <HAL_SD_WriteBlocks+0x314>)
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ba:	431a      	orrs	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e097      	b.n	8005202 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d09b      	beq.n	8005018 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ee:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d022      	beq.n	8005144 <HAL_SD_WriteBlocks+0x24c>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d91f      	bls.n	8005144 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	2b03      	cmp	r3, #3
 800510a:	d01b      	beq.n	8005144 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f001 fc01 	bl	8006918 <SDMMC_CmdStopTransfer>
 8005116:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511a:	2b00      	cmp	r3, #0
 800511c:	d012      	beq.n	8005144 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a3a      	ldr	r2, [pc, #232]	; (800520c <HAL_SD_WriteBlocks+0x314>)
 8005124:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800512a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800512c:	431a      	orrs	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e05e      	b.n	8005202 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d012      	beq.n	8005178 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a2d      	ldr	r2, [pc, #180]	; (800520c <HAL_SD_WriteBlocks+0x314>)
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515e:	f043 0208 	orr.w	r2, r3, #8
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e044      	b.n	8005202 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a20      	ldr	r2, [pc, #128]	; (800520c <HAL_SD_WriteBlocks+0x314>)
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005192:	f043 0202 	orr.w	r2, r3, #2
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e02a      	b.n	8005202 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d012      	beq.n	80051e0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <HAL_SD_WriteBlocks+0x314>)
 80051c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c6:	f043 0210 	orr.w	r2, r3, #16
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e010      	b.n	8005202 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <HAL_SD_WriteBlocks+0x318>)
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	e006      	b.n	8005202 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
  }
}
 8005202:	4618      	mov	r0, r3
 8005204:	3748      	adds	r7, #72	; 0x48
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	1fe00fff 	.word	0x1fe00fff
 8005210:	18000f3a 	.word	0x18000f3a

08005214 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_SD_IRQHandler+0x2e>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f001 f926 	bl	800648c <SD_Read_IT>
 8005240:	e19a      	b.n	8005578 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 80ac 	beq.w	80053aa <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800525a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	4b59      	ldr	r3, [pc, #356]	; (80053cc <HAL_SD_IRQHandler+0x1b8>)
 8005268:	400b      	ands	r3, r1
 800526a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800527a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800528a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d038      	beq.n	8005308 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d104      	bne.n	80052aa <HAL_SD_IRQHandler+0x96>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d011      	beq.n	80052ce <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f001 fb32 	bl	8006918 <SDMMC_CmdStopTransfer>
 80052b4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f95b 	bl	8005584 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a3f      	ldr	r2, [pc, #252]	; (80053d0 <HAL_SD_IRQHandler+0x1bc>)
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d104      	bne.n	80052f8 <HAL_SD_IRQHandler+0xe4>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f001 ffe5 	bl	80072c8 <HAL_SD_RxCpltCallback>
 80052fe:	e13b      	b.n	8005578 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f001 ffd7 	bl	80072b4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005306:	e137      	b.n	8005578 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 8132 	beq.w	8005578 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2200      	movs	r2, #0
 800531a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2200      	movs	r2, #0
 8005322:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2200      	movs	r2, #0
 800532a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <HAL_SD_IRQHandler+0x12c>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	d011      	beq.n	8005364 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f001 fae7 	bl	8006918 <SDMMC_CmdStopTransfer>
 800534a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d008      	beq.n	8005364 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f910 	bl	8005584 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b00      	cmp	r3, #0
 800537a:	d104      	bne.n	8005386 <HAL_SD_IRQHandler+0x172>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f001 ff94 	bl	80072b4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d105      	bne.n	80053a2 <HAL_SD_IRQHandler+0x18e>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80eb 	beq.w	8005578 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f001 ff90 	bl	80072c8 <HAL_SD_RxCpltCallback>
}
 80053a8:	e0e6      	b.n	8005578 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <HAL_SD_IRQHandler+0x1c0>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f001 f8a8 	bl	8006518 <SD_Write_IT>
 80053c8:	e0d6      	b.n	8005578 <HAL_SD_IRQHandler+0x364>
 80053ca:	bf00      	nop
 80053cc:	ffff3ec5 	.word	0xffff3ec5
 80053d0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053da:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 809d 	beq.w	800551e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f6:	f043 0202 	orr.w	r2, r3, #2
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005410:	f043 0208 	orr.w	r2, r3, #8
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542a:	f043 0220 	orr.w	r2, r3, #32
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005444:	f043 0210 	orr.w	r2, r3, #16
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a4b      	ldr	r2, [pc, #300]	; (8005580 <HAL_SD_IRQHandler+0x36c>)
 8005452:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005462:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005472:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005482:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005492:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f001 fa3d 	bl	8006918 <SDMMC_CmdStopTransfer>
 800549e:	4602      	mov	r2, r0
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054b8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f851 	bl	8005584 <HAL_SD_ErrorCallback>
}
 80054e2:	e049      	b.n	8005578 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d044      	beq.n	8005578 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d040      	beq.n	8005578 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005504:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2200      	movs	r2, #0
 800550c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f834 	bl	8005584 <HAL_SD_ErrorCallback>
}
 800551c:	e02c      	b.n	8005578 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d025      	beq.n	8005578 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10c      	bne.n	800555e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 f84a 	bl	80065e8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8005554:	e010      	b.n	8005578 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f001 f832 	bl	80065c0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800555c:	e00c      	b.n	8005578 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f001 f833 	bl	80065d4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800556e:	e003      	b.n	8005578 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f001 f81b 	bl	80065ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8005576:	e7ff      	b.n	8005578 <HAL_SD_IRQHandler+0x364>
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	18000f3a 	.word	0x18000f3a

08005584 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	0f9b      	lsrs	r3, r3, #30
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b2:	0e9b      	lsrs	r3, r3, #26
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c4:	0e1b      	lsrs	r3, r3, #24
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d6:	0c1b      	lsrs	r3, r3, #16
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f8:	0d1b      	lsrs	r3, r3, #20
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005604:	0c1b      	lsrs	r3, r3, #16
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	b2da      	uxtb	r2, r3
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005616:	0bdb      	lsrs	r3, r3, #15
 8005618:	b2db      	uxtb	r3, r3
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	b2da      	uxtb	r2, r3
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005628:	0b9b      	lsrs	r3, r3, #14
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	b2da      	uxtb	r2, r3
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563a:	0b5b      	lsrs	r3, r3, #13
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	b2da      	uxtb	r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800564c:	0b1b      	lsrs	r3, r3, #12
 800564e:	b2db      	uxtb	r3, r3
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	b2da      	uxtb	r2, r3
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2200      	movs	r2, #0
 800565e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	2b00      	cmp	r3, #0
 8005666:	d163      	bne.n	8005730 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566c:	009a      	lsls	r2, r3, #2
 800566e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005672:	4013      	ands	r3, r2
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005678:	0f92      	lsrs	r2, r2, #30
 800567a:	431a      	orrs	r2, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005684:	0edb      	lsrs	r3, r3, #27
 8005686:	b2db      	uxtb	r3, r3
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	b2da      	uxtb	r2, r3
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005696:	0e1b      	lsrs	r3, r3, #24
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a8:	0d5b      	lsrs	r3, r3, #21
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ba:	0c9b      	lsrs	r3, r3, #18
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056cc:	0bdb      	lsrs	r3, r3, #15
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	7e1b      	ldrb	r3, [r3, #24]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	3302      	adds	r3, #2
 80056f0:	2201      	movs	r2, #1
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056fa:	fb03 f202 	mul.w	r2, r3, r2
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	7a1b      	ldrb	r3, [r3, #8]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	2201      	movs	r2, #1
 800570e:	409a      	lsls	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800571c:	0a52      	lsrs	r2, r2, #9
 800571e:	fb03 f202 	mul.w	r2, r3, r2
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800572c:	655a      	str	r2, [r3, #84]	; 0x54
 800572e:	e031      	b.n	8005794 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	2b01      	cmp	r3, #1
 8005736:	d11d      	bne.n	8005774 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005746:	0c1b      	lsrs	r3, r3, #16
 8005748:	431a      	orrs	r2, r3
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	3301      	adds	r3, #1
 8005754:	029a      	lsls	r2, r3, #10
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005768:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	655a      	str	r2, [r3, #84]	; 0x54
 8005772:	e00f      	b.n	8005794 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a58      	ldr	r2, [pc, #352]	; (80058dc <HAL_SD_GetCardCSD+0x344>)
 800577a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005780:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e09d      	b.n	80058d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005798:	0b9b      	lsrs	r3, r3, #14
 800579a:	b2db      	uxtb	r3, r3
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057aa:	09db      	lsrs	r3, r3, #7
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057cc:	0fdb      	lsrs	r3, r3, #31
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057d8:	0f5b      	lsrs	r3, r3, #29
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ea:	0e9b      	lsrs	r3, r3, #26
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057fc:	0d9b      	lsrs	r3, r3, #22
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	b2da      	uxtb	r2, r3
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800580e:	0d5b      	lsrs	r3, r3, #21
 8005810:	b2db      	uxtb	r3, r3
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	b2da      	uxtb	r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800582a:	0c1b      	lsrs	r3, r3, #16
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	b2da      	uxtb	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800583e:	0bdb      	lsrs	r3, r3, #15
 8005840:	b2db      	uxtb	r3, r3
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	b2da      	uxtb	r2, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005852:	0b9b      	lsrs	r3, r3, #14
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	b2da      	uxtb	r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005866:	0b5b      	lsrs	r3, r3, #13
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	b2da      	uxtb	r2, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800587a:	0b1b      	lsrs	r3, r3, #12
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	b2da      	uxtb	r2, r3
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800588e:	0a9b      	lsrs	r3, r3, #10
 8005890:	b2db      	uxtb	r3, r3
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	b2da      	uxtb	r2, r3
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058a2:	0a1b      	lsrs	r3, r3, #8
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	1fe00fff 	.word	0x1fe00fff

080058e0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b094      	sub	sp, #80	; 0x50
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d101      	bne.n	8005900 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e0a7      	b.n	8005a50 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005900:	f107 0308 	add.w	r3, r7, #8
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fb62 	bl	8005fd0 <SD_SendSDStatus>
 800590c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800590e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005910:	2b00      	cmp	r3, #0
 8005912:	d011      	beq.n	8005938 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a4f      	ldr	r2, [pc, #316]	; (8005a58 <HAL_SD_GetCardStatus+0x178>)
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005936:	e070      	b.n	8005a1a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	099b      	lsrs	r3, r3, #6
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	b2da      	uxtb	r2, r3
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	b2db      	uxtb	r3, r3
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	b2da      	uxtb	r2, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	0a1b      	lsrs	r3, r3, #8
 800595c:	b29b      	uxth	r3, r3
 800595e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005962:	b29a      	uxth	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	0e1b      	lsrs	r3, r3, #24
 8005968:	b29b      	uxth	r3, r3
 800596a:	4313      	orrs	r3, r2
 800596c:	b29a      	uxth	r2, r3
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	061a      	lsls	r2, r3, #24
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800597e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	0a1b      	lsrs	r3, r3, #8
 8005984:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005988:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	0e1b      	lsrs	r3, r3, #24
 800598e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	0a1b      	lsrs	r3, r3, #8
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	0d1b      	lsrs	r3, r3, #20
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	4313      	orrs	r3, r2
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	0a9b      	lsrs	r3, r3, #10
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	0a1b      	lsrs	r3, r3, #8
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	f003 0303 	and.w	r3, r3, #3
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	091b      	lsrs	r3, r3, #4
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	0e1b      	lsrs	r3, r3, #24
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fec8 	bl	80067b8 <SDMMC_CmdBlockLength>
 8005a28:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00d      	beq.n	8005a4c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a08      	ldr	r2, [pc, #32]	; (8005a58 <HAL_SD_GetCardStatus+0x178>)
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a3c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8005a4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3750      	adds	r7, #80	; 0x50
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	1fe00fff 	.word	0x1fe00fff

08005a5c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005ab4:	b590      	push	{r4, r7, lr}
 8005ab6:	b08d      	sub	sp, #52	; 0x34
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d02e      	beq.n	8005b32 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ada:	d106      	bne.n	8005aea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	635a      	str	r2, [r3, #52]	; 0x34
 8005ae8:	e029      	b.n	8005b3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005af0:	d10a      	bne.n	8005b08 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fb64 	bl	80061c0 <SD_WideBus_Enable>
 8005af8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	431a      	orrs	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	635a      	str	r2, [r3, #52]	; 0x34
 8005b06:	e01a      	b.n	8005b3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fba1 	bl	8006256 <SD_WideBus_Disable>
 8005b14:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	635a      	str	r2, [r3, #52]	; 0x34
 8005b22:	e00c      	b.n	8005b3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	635a      	str	r2, [r3, #52]	; 0x34
 8005b30:	e005      	b.n	8005b3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b36:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a5f      	ldr	r2, [pc, #380]	; (8005cc8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b54:	e096      	b.n	8005c84 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005b56:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005b5a:	f04f 0100 	mov.w	r1, #0
 8005b5e:	f7fd fc2d 	bl	80033bc <HAL_RCCEx_GetPeriphCLKFreq>
 8005b62:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8083 	beq.w	8005c72 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695a      	ldr	r2, [r3, #20]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	4950      	ldr	r1, [pc, #320]	; (8005ccc <HAL_SD_ConfigWideBusOperation+0x218>)
 8005b8a:	fba1 1303 	umull	r1, r3, r1, r3
 8005b8e:	0e1b      	lsrs	r3, r3, #24
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d303      	bcc.n	8005b9c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	e05a      	b.n	8005c52 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba4:	d103      	bne.n	8005bae <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	61bb      	str	r3, [r7, #24]
 8005bac:	e051      	b.n	8005c52 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb6:	d126      	bne.n	8005c06 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10e      	bne.n	8005bde <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4a43      	ldr	r2, [pc, #268]	; (8005cd0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d906      	bls.n	8005bd6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	4a40      	ldr	r2, [pc, #256]	; (8005ccc <HAL_SD_ConfigWideBusOperation+0x218>)
 8005bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd0:	0e5b      	lsrs	r3, r3, #25
 8005bd2:	61bb      	str	r3, [r7, #24]
 8005bd4:	e03d      	b.n	8005c52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	61bb      	str	r3, [r7, #24]
 8005bdc:	e039      	b.n	8005c52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bea:	4a39      	ldr	r2, [pc, #228]	; (8005cd0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d906      	bls.n	8005bfe <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4a36      	ldr	r2, [pc, #216]	; (8005ccc <HAL_SD_ConfigWideBusOperation+0x218>)
 8005bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf8:	0e5b      	lsrs	r3, r3, #25
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	e029      	b.n	8005c52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	61bb      	str	r3, [r7, #24]
 8005c04:	e025      	b.n	8005c52 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10e      	bne.n	8005c2c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	4a30      	ldr	r2, [pc, #192]	; (8005cd4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d906      	bls.n	8005c24 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <HAL_SD_ConfigWideBusOperation+0x218>)
 8005c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1e:	0e1b      	lsrs	r3, r3, #24
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	e016      	b.n	8005c52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	e012      	b.n	8005c52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c38:	4a26      	ldr	r2, [pc, #152]	; (8005cd4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d906      	bls.n	8005c4c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4a22      	ldr	r2, [pc, #136]	; (8005ccc <HAL_SD_ConfigWideBusOperation+0x218>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	0e1b      	lsrs	r3, r3, #24
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	e002      	b.n	8005c52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681c      	ldr	r4, [r3, #0]
 8005c56:	466a      	mov	r2, sp
 8005c58:	f107 0314 	add.w	r3, r7, #20
 8005c5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c60:	e882 0003 	stmia.w	r2, {r0, r1}
 8005c64:	f107 0308 	add.w	r3, r7, #8
 8005c68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 fcc6 	bl	80065fc <SDMMC_Init>
 8005c70:	e008      	b.n	8005c84 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fd93 	bl	80067b8 <SDMMC_CmdBlockLength>
 8005c92:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00c      	beq.n	8005cb4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a0a      	ldr	r2, [pc, #40]	; (8005cc8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8005cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	372c      	adds	r7, #44	; 0x2c
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd90      	pop	{r4, r7, pc}
 8005cc8:	1fe00fff 	.word	0x1fe00fff
 8005ccc:	55e63b89 	.word	0x55e63b89
 8005cd0:	02faf080 	.word	0x02faf080
 8005cd4:	017d7840 	.word	0x017d7840

08005cd8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005ce4:	f107 030c 	add.w	r3, r7, #12
 8005ce8:	4619      	mov	r1, r3
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fa40 	bl	8006170 <SD_SendStatus>
 8005cf0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	0a5b      	lsrs	r3, r3, #9
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005d0e:	693b      	ldr	r3, [r7, #16]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b090      	sub	sp, #64	; 0x40
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8005d24:	f7fa fe08 	bl	8000938 <HAL_GetTick>
 8005d28:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fcbd 	bl	80066ae <SDMMC_GetPowerState>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d102      	bne.n	8005d40 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005d3e:	e0b5      	b.n	8005eac <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d02e      	beq.n	8005da6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 ff08 	bl	8006b62 <SDMMC_CmdSendCID>
 8005d52:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <SD_InitCard+0x46>
    {
      return errorstate;
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	e0a6      	b.n	8005eac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2100      	movs	r1, #0
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fce8 	bl	800673a <SDMMC_GetResponse>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2104      	movs	r1, #4
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fcdf 	bl	800673a <SDMMC_GetResponse>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2108      	movs	r1, #8
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fcd6 	bl	800673a <SDMMC_GetResponse>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	210c      	movs	r1, #12
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fccd 	bl	800673a <SDMMC_GetResponse>
 8005da0:	4602      	mov	r2, r0
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d01d      	beq.n	8005dea <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8005dae:	e019      	b.n	8005de4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f107 020a 	add.w	r2, r7, #10
 8005db8:	4611      	mov	r1, r2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 ff10 	bl	8006be0 <SDMMC_CmdSetRelAdd>
 8005dc0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <SD_InitCard+0xb4>
      {
        return errorstate;
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	e06f      	b.n	8005eac <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8005dcc:	f7fa fdb4 	bl	8000938 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	f241 3287 	movw	r2, #4999	; 0x1387
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d902      	bls.n	8005de4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8005dde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005de2:	e063      	b.n	8005eac <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8005de4:	897b      	ldrh	r3, [r7, #10]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0e2      	beq.n	8005db0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d036      	beq.n	8005e60 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005df2:	897b      	ldrh	r3, [r7, #10]
 8005df4:	461a      	mov	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	041b      	lsls	r3, r3, #16
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f000 feca 	bl	8006ba0 <SDMMC_CmdSendCSD>
 8005e0c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <SD_InitCard+0x100>
    {
      return errorstate;
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	e049      	b.n	8005eac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fc8b 	bl	800673a <SDMMC_GetResponse>
 8005e24:	4602      	mov	r2, r0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2104      	movs	r1, #4
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fc82 	bl	800673a <SDMMC_GetResponse>
 8005e36:	4602      	mov	r2, r0
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2108      	movs	r1, #8
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fc79 	bl	800673a <SDMMC_GetResponse>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	210c      	movs	r1, #12
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 fc70 	bl	800673a <SDMMC_GetResponse>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2104      	movs	r1, #4
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fc67 	bl	800673a <SDMMC_GetResponse>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	0d1a      	lsrs	r2, r3, #20
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005e74:	f107 030c 	add.w	r3, r7, #12
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff fb8c 	bl	8005598 <HAL_SD_GetCardCSD>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005e8a:	e00f      	b.n	8005eac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e94:	041b      	lsls	r3, r3, #16
 8005e96:	4619      	mov	r1, r3
 8005e98:	4610      	mov	r0, r2
 8005e9a:	f000 fd79 	bl	8006990 <SDMMC_CmdSelDesel>
 8005e9e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <SD_InitCard+0x192>
  {
    return errorstate;
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	e000      	b.n	8005eac <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3740      	adds	r7, #64	; 0x40
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fd82 	bl	80069d6 <SDMMC_CmdGoIdleState>
 8005ed2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <SD_PowerON+0x2a>
  {
    return errorstate;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	e072      	b.n	8005fc4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fd95 	bl	8006a12 <SDMMC_CmdOperCond>
 8005ee8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef0:	d10d      	bne.n	8005f0e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 fd6a 	bl	80069d6 <SDMMC_CmdGoIdleState>
 8005f02:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d004      	beq.n	8005f14 <SD_PowerON+0x60>
    {
      return errorstate;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	e05a      	b.n	8005fc4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d137      	bne.n	8005f8c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fd95 	bl	8006a52 <SDMMC_CmdAppCommand>
 8005f28:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d02d      	beq.n	8005f8c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f34:	e046      	b.n	8005fc4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fd88 	bl	8006a52 <SDMMC_CmdAppCommand>
 8005f42:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <SD_PowerON+0x9a>
    {
      return errorstate;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	e03a      	b.n	8005fc4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	491e      	ldr	r1, [pc, #120]	; (8005fcc <SD_PowerON+0x118>)
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fd9f 	bl	8006a98 <SDMMC_CmdAppOperCommand>
 8005f5a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f66:	e02d      	b.n	8005fc4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fbe3 	bl	800673a <SDMMC_GetResponse>
 8005f74:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	0fdb      	lsrs	r3, r3, #31
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <SD_PowerON+0xce>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <SD_PowerON+0xd0>
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]

    count++;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d802      	bhi.n	8005f9c <SD_PowerON+0xe8>
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0cc      	beq.n	8005f36 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d902      	bls.n	8005fac <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005fa6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005faa:	e00b      	b.n	8005fc4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	c1100000 	.word	0xc1100000

08005fd0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08c      	sub	sp, #48	; 0x30
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005fda:	f7fa fcad 	bl	8000938 <HAL_GetTick>
 8005fde:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fba5 	bl	800673a <SDMMC_GetResponse>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ffa:	d102      	bne.n	8006002 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005ffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006000:	e0b0      	b.n	8006164 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2140      	movs	r1, #64	; 0x40
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fbd5 	bl	80067b8 <SDMMC_CmdBlockLength>
 800600e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	e0a0      	b.n	8006164 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602a:	041b      	lsls	r3, r3, #16
 800602c:	4619      	mov	r1, r3
 800602e:	4610      	mov	r0, r2
 8006030:	f000 fd0f 	bl	8006a52 <SDMMC_CmdAppCommand>
 8006034:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	e08d      	b.n	8006164 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006048:	f04f 33ff 	mov.w	r3, #4294967295
 800604c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800604e:	2340      	movs	r3, #64	; 0x40
 8006050:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006052:	2360      	movs	r3, #96	; 0x60
 8006054:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006056:	2302      	movs	r3, #2
 8006058:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800605a:	2300      	movs	r3, #0
 800605c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800605e:	2301      	movs	r3, #1
 8006060:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f107 0208 	add.w	r2, r7, #8
 800606a:	4611      	mov	r1, r2
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fb77 	bl	8006760 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fdf7 	bl	8006c6a <SDMMC_CmdStatusRegister>
 800607c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d02b      	beq.n	80060dc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	e069      	b.n	8006164 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d013      	beq.n	80060c6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800609e:	2300      	movs	r3, #0
 80060a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060a2:	e00d      	b.n	80060c0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fad1 	bl	8006650 <SDMMC_ReadFIFO>
 80060ae:	4602      	mov	r2, r0
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	601a      	str	r2, [r3, #0]
        pData++;
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	3304      	adds	r3, #4
 80060b8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	3301      	adds	r3, #1
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	2b07      	cmp	r3, #7
 80060c4:	d9ee      	bls.n	80060a4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80060c6:	f7fa fc37 	bl	8000938 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d102      	bne.n	80060dc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80060d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80060da:	e043      	b.n	8006164 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0d2      	beq.n	8006090 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80060f8:	2308      	movs	r3, #8
 80060fa:	e033      	b.n	8006164 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800610a:	2302      	movs	r3, #2
 800610c:	e02a      	b.n	8006164 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d017      	beq.n	800614c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800611c:	2320      	movs	r3, #32
 800611e:	e021      	b.n	8006164 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fa93 	bl	8006650 <SDMMC_ReadFIFO>
 800612a:	4602      	mov	r2, r0
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	601a      	str	r2, [r3, #0]
    pData++;
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	3304      	adds	r3, #4
 8006134:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006136:	f7fa fbff 	bl	8000938 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d102      	bne.n	800614c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006146:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800614a:	e00b      	b.n	8006164 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e2      	bne.n	8006120 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a03      	ldr	r2, [pc, #12]	; (800616c <SD_SendSDStatus+0x19c>)
 8006160:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3730      	adds	r7, #48	; 0x30
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	18000f3a 	.word	0x18000f3a

08006170 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006180:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006184:	e018      	b.n	80061b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618e:	041b      	lsls	r3, r3, #16
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f000 fd46 	bl	8006c24 <SDMMC_CmdSendStatus>
 8006198:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	e009      	b.n	80061b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fac5 	bl	800673a <SDMMC_GetResponse>
 80061b0:	4602      	mov	r2, r0
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	2300      	movs	r3, #0
 80061ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2100      	movs	r1, #0
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 faaf 	bl	800673a <SDMMC_GetResponse>
 80061dc:	4603      	mov	r3, r0
 80061de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061e6:	d102      	bne.n	80061ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80061e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061ec:	e02f      	b.n	800624e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80061ee:	f107 030c 	add.w	r3, r7, #12
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f879 	bl	80062ec <SD_FindSCR>
 80061fa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	e023      	b.n	800624e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01c      	beq.n	800624a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006218:	041b      	lsls	r3, r3, #16
 800621a:	4619      	mov	r1, r3
 800621c:	4610      	mov	r0, r2
 800621e:	f000 fc18 	bl	8006a52 <SDMMC_CmdAppCommand>
 8006222:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	e00f      	b.n	800624e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2102      	movs	r1, #2
 8006234:	4618      	mov	r0, r3
 8006236:	f000 fc4f 	bl	8006ad8 <SDMMC_CmdBusWidth>
 800623a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	e003      	b.n	800624e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006246:	2300      	movs	r3, #0
 8006248:	e001      	b.n	800624e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800624a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b086      	sub	sp, #24
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	2300      	movs	r3, #0
 8006264:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2100      	movs	r1, #0
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fa64 	bl	800673a <SDMMC_GetResponse>
 8006272:	4603      	mov	r3, r0
 8006274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006278:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800627c:	d102      	bne.n	8006284 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800627e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006282:	e02f      	b.n	80062e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006284:	f107 030c 	add.w	r3, r7, #12
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f82e 	bl	80062ec <SD_FindSCR>
 8006290:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	e023      	b.n	80062e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d01c      	beq.n	80062e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	041b      	lsls	r3, r3, #16
 80062b0:	4619      	mov	r1, r3
 80062b2:	4610      	mov	r0, r2
 80062b4:	f000 fbcd 	bl	8006a52 <SDMMC_CmdAppCommand>
 80062b8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	e00f      	b.n	80062e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2100      	movs	r1, #0
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fc04 	bl	8006ad8 <SDMMC_CmdBusWidth>
 80062d0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	e003      	b.n	80062e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80062dc:	2300      	movs	r3, #0
 80062de:	e001      	b.n	80062e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80062e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08e      	sub	sp, #56	; 0x38
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80062f6:	f7fa fb1f 	bl	8000938 <HAL_GetTick>
 80062fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006300:	2300      	movs	r3, #0
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2108      	movs	r1, #8
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fa50 	bl	80067b8 <SDMMC_CmdBlockLength>
 8006318:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	e0ad      	b.n	8006480 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632c:	041b      	lsls	r3, r3, #16
 800632e:	4619      	mov	r1, r3
 8006330:	4610      	mov	r0, r2
 8006332:	f000 fb8e 	bl	8006a52 <SDMMC_CmdAppCommand>
 8006336:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <SD_FindSCR+0x56>
  {
    return errorstate;
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	e09e      	b.n	8006480 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006342:	f04f 33ff 	mov.w	r3, #4294967295
 8006346:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006348:	2308      	movs	r3, #8
 800634a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800634c:	2330      	movs	r3, #48	; 0x30
 800634e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006350:	2302      	movs	r3, #2
 8006352:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006354:	2300      	movs	r3, #0
 8006356:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006358:	2301      	movs	r3, #1
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f107 0210 	add.w	r2, r7, #16
 8006364:	4611      	mov	r1, r2
 8006366:	4618      	mov	r0, r3
 8006368:	f000 f9fa 	bl	8006760 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fbd4 	bl	8006b1e <SDMMC_CmdSendSCR>
 8006376:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	d027      	beq.n	80063ce <SD_FindSCR+0xe2>
  {
    return errorstate;
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	e07e      	b.n	8006480 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d113      	bne.n	80063b8 <SD_FindSCR+0xcc>
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	2b00      	cmp	r3, #0
 8006394:	d110      	bne.n	80063b8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f958 	bl	8006650 <SDMMC_ReadFIFO>
 80063a0:	4603      	mov	r3, r0
 80063a2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 f951 	bl	8006650 <SDMMC_ReadFIFO>
 80063ae:	4603      	mov	r3, r0
 80063b0:	60fb      	str	r3, [r7, #12]
      index++;
 80063b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b4:	3301      	adds	r3, #1
 80063b6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80063b8:	f7fa fabe 	bl	8000938 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c6:	d102      	bne.n	80063ce <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80063c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063cc:	e058      	b.n	8006480 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d4:	f240 532a 	movw	r3, #1322	; 0x52a
 80063d8:	4013      	ands	r3, r2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0d1      	beq.n	8006382 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2208      	movs	r2, #8
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80063f4:	2308      	movs	r3, #8
 80063f6:	e043      	b.n	8006480 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2202      	movs	r2, #2
 800640c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800640e:	2302      	movs	r3, #2
 8006410:	e036      	b.n	8006480 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2220      	movs	r2, #32
 8006426:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006428:	2320      	movs	r3, #32
 800642a:	e029      	b.n	8006480 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a15      	ldr	r2, [pc, #84]	; (8006488 <SD_FindSCR+0x19c>)
 8006432:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	061a      	lsls	r2, r3, #24
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	021b      	lsls	r3, r3, #8
 800643c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006440:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	0a1b      	lsrs	r3, r3, #8
 8006446:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800644a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	0e1b      	lsrs	r3, r3, #24
 8006450:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006454:	601a      	str	r2, [r3, #0]
    scr++;
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	3304      	adds	r3, #4
 800645a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	061a      	lsls	r2, r3, #24
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006468:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	0a1b      	lsrs	r3, r3, #8
 800646e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006472:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	0e1b      	lsrs	r3, r3, #24
 8006478:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3738      	adds	r7, #56	; 0x38
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	18000f3a 	.word	0x18000f3a

0800648c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649e:	2b1f      	cmp	r3, #31
 80064a0:	d936      	bls.n	8006510 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e027      	b.n	80064f8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 f8cf 	bl	8006650 <SDMMC_ReadFIFO>
 80064b2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	3301      	adds	r3, #1
 80064c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	0a1b      	lsrs	r3, r3, #8
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	3301      	adds	r3, #1
 80064d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	0c1b      	lsrs	r3, r3, #16
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	3301      	adds	r3, #1
 80064e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	0e1b      	lsrs	r3, r3, #24
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	3301      	adds	r3, #1
 80064f0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	3301      	adds	r3, #1
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2b07      	cmp	r3, #7
 80064fc:	d9d4      	bls.n	80064a8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	f1a3 0220 	sub.w	r2, r3, #32
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8006510:	bf00      	nop
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	2b1f      	cmp	r3, #31
 800652c:	d93a      	bls.n	80065a4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	e02b      	b.n	800658c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	60fb      	str	r3, [r7, #12]
      tmp++;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	3301      	adds	r3, #1
 800653e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	021a      	lsls	r2, r3, #8
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	3301      	adds	r3, #1
 8006550:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	041a      	lsls	r2, r3, #16
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	3301      	adds	r3, #1
 8006562:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	061a      	lsls	r2, r3, #24
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	3301      	adds	r3, #1
 8006574:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f107 020c 	add.w	r2, r7, #12
 800657e:	4611      	mov	r1, r2
 8006580:	4618      	mov	r0, r3
 8006582:	f000 f872 	bl	800666a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	3301      	adds	r3, #1
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2b07      	cmp	r3, #7
 8006590:	d9d0      	bls.n	8006534 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	f1a3 0220 	sub.w	r2, r3, #32
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	621a      	str	r2, [r3, #32]
  }
}
 80065a4:	bf00      	nop
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80065fc:	b084      	sub	sp, #16
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	f107 001c 	add.w	r0, r7, #28
 800660a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8006612:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8006614:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8006616:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800661a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800661e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8006622:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	4b07      	ldr	r3, [pc, #28]	; (800664c <SDMMC_Init+0x50>)
 8006630:	4013      	ands	r3, r2
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	431a      	orrs	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	b004      	add	sp, #16
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	ffc02c00 	.word	0xffc02c00

08006650 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f043 0203 	orr.w	r2, r3, #3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0303 	and.w	r3, r3, #3
}
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
	...

080066cc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80066ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80066f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80066f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	4b06      	ldr	r3, [pc, #24]	; (800671c <SDMMC_SendCommand+0x50>)
 8006704:	4013      	ands	r3, r2
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	fffee0c0 	.word	0xfffee0c0

08006720 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	b2db      	uxtb	r3, r3
}
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800673a:	b480      	push	{r7}
 800673c:	b085      	sub	sp, #20
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3314      	adds	r3, #20
 8006748:	461a      	mov	r2, r3
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	4413      	add	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8006786:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800678c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8006792:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0

}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80067c6:	2310      	movs	r3, #16
 80067c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80067ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067d0:	2300      	movs	r3, #0
 80067d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067da:	f107 0308 	add.w	r3, r7, #8
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff ff73 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80067e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ea:	2110      	movs	r1, #16
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa5f 	bl	8006cb0 <SDMMC_GetCmdResp1>
 80067f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067f4:	69fb      	ldr	r3, [r7, #28]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3720      	adds	r7, #32
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b088      	sub	sp, #32
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800680c:	2311      	movs	r3, #17
 800680e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800681a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800681e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006820:	f107 0308 	add.w	r3, r7, #8
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ff50 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800682c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006830:	2111      	movs	r1, #17
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa3c 	bl	8006cb0 <SDMMC_GetCmdResp1>
 8006838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800683a:	69fb      	ldr	r3, [r7, #28]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3720      	adds	r7, #32
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006852:	2312      	movs	r3, #18
 8006854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800685a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800685c:	2300      	movs	r3, #0
 800685e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006864:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006866:	f107 0308 	add.w	r3, r7, #8
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff ff2d 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006872:	f241 3288 	movw	r2, #5000	; 0x1388
 8006876:	2112      	movs	r1, #18
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fa19 	bl	8006cb0 <SDMMC_GetCmdResp1>
 800687e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006880:	69fb      	ldr	r3, [r7, #28]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b088      	sub	sp, #32
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006898:	2318      	movs	r3, #24
 800689a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800689c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068ac:	f107 0308 	add.w	r3, r7, #8
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff ff0a 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80068b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068bc:	2118      	movs	r1, #24
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f9f6 	bl	8006cb0 <SDMMC_GetCmdResp1>
 80068c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068c6:	69fb      	ldr	r3, [r7, #28]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3720      	adds	r7, #32
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80068de:	2319      	movs	r3, #25
 80068e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068f2:	f107 0308 	add.w	r3, r7, #8
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff fee7 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80068fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006902:	2119      	movs	r1, #25
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f9d3 	bl	8006cb0 <SDMMC_GetCmdResp1>
 800690a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800690c:	69fb      	ldr	r3, [r7, #28]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006924:	230c      	movs	r3, #12
 8006926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800692c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006936:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006950:	f107 0308 	add.w	r3, r7, #8
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff feb8 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800695c:	4a0b      	ldr	r2, [pc, #44]	; (800698c <SDMMC_CmdStopTransfer+0x74>)
 800695e:	210c      	movs	r1, #12
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f9a5 	bl	8006cb0 <SDMMC_GetCmdResp1>
 8006966:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800697a:	d101      	bne.n	8006980 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800697c:	2300      	movs	r3, #0
 800697e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8006980:	69fb      	ldr	r3, [r7, #28]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3720      	adds	r7, #32
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	05f5e100 	.word	0x05f5e100

08006990 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800699e:	2307      	movs	r3, #7
 80069a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069a8:	2300      	movs	r3, #0
 80069aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069b2:	f107 0308 	add.w	r3, r7, #8
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff fe87 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80069be:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c2:	2107      	movs	r1, #7
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f973 	bl	8006cb0 <SDMMC_GetCmdResp1>
 80069ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069cc:	69fb      	ldr	r3, [r7, #28]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3720      	adds	r7, #32
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b088      	sub	sp, #32
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80069e6:	2300      	movs	r3, #0
 80069e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069ea:	2300      	movs	r3, #0
 80069ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069f4:	f107 0308 	add.w	r3, r7, #8
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff fe66 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fb97 	bl	8007134 <SDMMC_GetCmdError>
 8006a06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a08:	69fb      	ldr	r3, [r7, #28]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3720      	adds	r7, #32
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b088      	sub	sp, #32
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006a1a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006a20:	2308      	movs	r3, #8
 8006a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a34:	f107 0308 	add.w	r3, r7, #8
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff fe46 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fb29 	bl	8007098 <SDMMC_GetCmdResp7>
 8006a46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a48:	69fb      	ldr	r3, [r7, #28]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3720      	adds	r7, #32
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b088      	sub	sp, #32
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006a60:	2337      	movs	r3, #55	; 0x37
 8006a62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a74:	f107 0308 	add.w	r3, r7, #8
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff fe26 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a84:	2137      	movs	r1, #55	; 0x37
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f912 	bl	8006cb0 <SDMMC_GetCmdResp1>
 8006a8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a8e:	69fb      	ldr	r3, [r7, #28]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006aa6:	2329      	movs	r3, #41	; 0x29
 8006aa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ab8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006aba:	f107 0308 	add.w	r3, r7, #8
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff fe03 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa2e 	bl	8006f28 <SDMMC_GetCmdResp3>
 8006acc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ace:	69fb      	ldr	r3, [r7, #28]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006ae6:	2306      	movs	r3, #6
 8006ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006af8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006afa:	f107 0308 	add.w	r3, r7, #8
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff fde3 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b0a:	2106      	movs	r1, #6
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f8cf 	bl	8006cb0 <SDMMC_GetCmdResp1>
 8006b12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b14:	69fb      	ldr	r3, [r7, #28]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b088      	sub	sp, #32
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006b2a:	2333      	movs	r3, #51	; 0x33
 8006b2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b3e:	f107 0308 	add.w	r3, r7, #8
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff fdc1 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4e:	2133      	movs	r1, #51	; 0x33
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f8ad 	bl	8006cb0 <SDMMC_GetCmdResp1>
 8006b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b58:	69fb      	ldr	r3, [r7, #28]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3720      	adds	r7, #32
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b088      	sub	sp, #32
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006b72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b82:	f107 0308 	add.w	r3, r7, #8
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff fd9f 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f980 	bl	8006e94 <SDMMC_GetCmdResp2>
 8006b94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b96:	69fb      	ldr	r3, [r7, #28]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3720      	adds	r7, #32
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006bae:	2309      	movs	r3, #9
 8006bb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006bb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006bc2:	f107 0308 	add.w	r3, r7, #8
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff fd7f 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f960 	bl	8006e94 <SDMMC_GetCmdResp2>
 8006bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c02:	f107 0308 	add.w	r3, r7, #8
 8006c06:	4619      	mov	r1, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff fd5f 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	2103      	movs	r1, #3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f9c8 	bl	8006fa8 <SDMMC_GetCmdResp6>
 8006c18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c1a:	69fb      	ldr	r3, [r7, #28]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3720      	adds	r7, #32
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006c32:	230d      	movs	r3, #13
 8006c34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c46:	f107 0308 	add.w	r3, r7, #8
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff fd3d 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c56:	210d      	movs	r1, #13
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f829 	bl	8006cb0 <SDMMC_GetCmdResp1>
 8006c5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c60:	69fb      	ldr	r3, [r7, #28]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3720      	adds	r7, #32
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b088      	sub	sp, #32
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8006c76:	230d      	movs	r3, #13
 8006c78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c80:	2300      	movs	r3, #0
 8006c82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c8a:	f107 0308 	add.w	r3, r7, #8
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff fd1b 	bl	80066cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8006c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c9a:	210d      	movs	r1, #13
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f807 	bl	8006cb0 <SDMMC_GetCmdResp1>
 8006ca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3720      	adds	r7, #32
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006cbe:	4b70      	ldr	r3, [pc, #448]	; (8006e80 <SDMMC_GetCmdResp1+0x1d0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a70      	ldr	r2, [pc, #448]	; (8006e84 <SDMMC_GetCmdResp1+0x1d4>)
 8006cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc8:	0a5a      	lsrs	r2, r3, #9
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	fb02 f303 	mul.w	r3, r2, r3
 8006cd0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	1e5a      	subs	r2, r3, #1
 8006cd6:	61fa      	str	r2, [r7, #28]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d102      	bne.n	8006ce2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006cdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ce0:	e0c9      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	4b67      	ldr	r3, [pc, #412]	; (8006e88 <SDMMC_GetCmdResp1+0x1d8>)
 8006cec:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0ef      	beq.n	8006cd2 <SDMMC_GetCmdResp1+0x22>
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1ea      	bne.n	8006cd2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d004      	beq.n	8006d12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2204      	movs	r2, #4
 8006d0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d0e:	2304      	movs	r3, #4
 8006d10:	e0b1      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d004      	beq.n	8006d28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e0a6      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4a58      	ldr	r2, [pc, #352]	; (8006e8c <SDMMC_GetCmdResp1+0x1dc>)
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7ff fcf6 	bl	8006720 <SDMMC_GetCommandResponse>
 8006d34:	4603      	mov	r3, r0
 8006d36:	461a      	mov	r2, r3
 8006d38:	7afb      	ldrb	r3, [r7, #11]
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d001      	beq.n	8006d42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e099      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006d42:	2100      	movs	r1, #0
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff fcf8 	bl	800673a <SDMMC_GetResponse>
 8006d4a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	4b50      	ldr	r3, [pc, #320]	; (8006e90 <SDMMC_GetCmdResp1+0x1e0>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e08d      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	da02      	bge.n	8006d66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d64:	e087      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006d70:	2340      	movs	r3, #64	; 0x40
 8006d72:	e080      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006d7e:	2380      	movs	r3, #128	; 0x80
 8006d80:	e079      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d90:	e071      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da0:	e069      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006db0:	e061      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006dbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006dc0:	e059      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dd0:	e051      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006de0:	e049      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006dec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006df0:	e041      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006dfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e00:	e039      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e10:	e031      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006e1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e20:	e029      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006e2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e30:	e021      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006e3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e40:	e019      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006e4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e50:	e011      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006e5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e60:	e009      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f003 0308 	and.w	r3, r3, #8
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006e6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006e70:	e001      	b.n	8006e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	24000000 	.word	0x24000000
 8006e84:	10624dd3 	.word	0x10624dd3
 8006e88:	00200045 	.word	0x00200045
 8006e8c:	002000c5 	.word	0x002000c5
 8006e90:	fdffe008 	.word	0xfdffe008

08006e94 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006e9c:	4b1f      	ldr	r3, [pc, #124]	; (8006f1c <SDMMC_GetCmdResp2+0x88>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <SDMMC_GetCmdResp2+0x8c>)
 8006ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea6:	0a5b      	lsrs	r3, r3, #9
 8006ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eac:	fb02 f303 	mul.w	r3, r2, r3
 8006eb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	1e5a      	subs	r2, r3, #1
 8006eb6:	60fa      	str	r2, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d102      	bne.n	8006ec2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ec0:	e026      	b.n	8006f10 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0ef      	beq.n	8006eb2 <SDMMC_GetCmdResp2+0x1e>
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1ea      	bne.n	8006eb2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d004      	beq.n	8006ef2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2204      	movs	r2, #4
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006eee:	2304      	movs	r3, #4
 8006ef0:	e00e      	b.n	8006f10 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d004      	beq.n	8006f08 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e003      	b.n	8006f10 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a06      	ldr	r2, [pc, #24]	; (8006f24 <SDMMC_GetCmdResp2+0x90>)
 8006f0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	24000000 	.word	0x24000000
 8006f20:	10624dd3 	.word	0x10624dd3
 8006f24:	002000c5 	.word	0x002000c5

08006f28 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006f30:	4b1a      	ldr	r3, [pc, #104]	; (8006f9c <SDMMC_GetCmdResp3+0x74>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a1a      	ldr	r2, [pc, #104]	; (8006fa0 <SDMMC_GetCmdResp3+0x78>)
 8006f36:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3a:	0a5b      	lsrs	r3, r3, #9
 8006f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f40:	fb02 f303 	mul.w	r3, r2, r3
 8006f44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	1e5a      	subs	r2, r3, #1
 8006f4a:	60fa      	str	r2, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d102      	bne.n	8006f56 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f54:	e01b      	b.n	8006f8e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0ef      	beq.n	8006f46 <SDMMC_GetCmdResp3+0x1e>
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1ea      	bne.n	8006f46 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2204      	movs	r2, #4
 8006f80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f82:	2304      	movs	r3, #4
 8006f84:	e003      	b.n	8006f8e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a06      	ldr	r2, [pc, #24]	; (8006fa4 <SDMMC_GetCmdResp3+0x7c>)
 8006f8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	24000000 	.word	0x24000000
 8006fa0:	10624dd3 	.word	0x10624dd3
 8006fa4:	002000c5 	.word	0x002000c5

08006fa8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006fb6:	4b35      	ldr	r3, [pc, #212]	; (800708c <SDMMC_GetCmdResp6+0xe4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a35      	ldr	r2, [pc, #212]	; (8007090 <SDMMC_GetCmdResp6+0xe8>)
 8006fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc0:	0a5b      	lsrs	r3, r3, #9
 8006fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc6:	fb02 f303 	mul.w	r3, r2, r3
 8006fca:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	1e5a      	subs	r2, r3, #1
 8006fd0:	61fa      	str	r2, [r7, #28]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d102      	bne.n	8006fdc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006fd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fda:	e052      	b.n	8007082 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0ef      	beq.n	8006fcc <SDMMC_GetCmdResp6+0x24>
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1ea      	bne.n	8006fcc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffa:	f003 0304 	and.w	r3, r3, #4
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2204      	movs	r2, #4
 8007006:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007008:	2304      	movs	r3, #4
 800700a:	e03a      	b.n	8007082 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800701e:	2301      	movs	r3, #1
 8007020:	e02f      	b.n	8007082 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7ff fb7c 	bl	8006720 <SDMMC_GetCommandResponse>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	7afb      	ldrb	r3, [r7, #11]
 800702e:	4293      	cmp	r3, r2
 8007030:	d001      	beq.n	8007036 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007032:	2301      	movs	r3, #1
 8007034:	e025      	b.n	8007082 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4a16      	ldr	r2, [pc, #88]	; (8007094 <SDMMC_GetCmdResp6+0xec>)
 800703a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800703c:	2100      	movs	r1, #0
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f7ff fb7b 	bl	800673a <SDMMC_GetResponse>
 8007044:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d106      	bne.n	800705e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	0c1b      	lsrs	r3, r3, #16
 8007054:	b29a      	uxth	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800705a:	2300      	movs	r3, #0
 800705c:	e011      	b.n	8007082 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800706c:	e009      	b.n	8007082 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800707c:	e001      	b.n	8007082 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800707e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007082:	4618      	mov	r0, r3
 8007084:	3720      	adds	r7, #32
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	24000000 	.word	0x24000000
 8007090:	10624dd3 	.word	0x10624dd3
 8007094:	002000c5 	.word	0x002000c5

08007098 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80070a0:	4b22      	ldr	r3, [pc, #136]	; (800712c <SDMMC_GetCmdResp7+0x94>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a22      	ldr	r2, [pc, #136]	; (8007130 <SDMMC_GetCmdResp7+0x98>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	0a5b      	lsrs	r3, r3, #9
 80070ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b0:	fb02 f303 	mul.w	r3, r2, r3
 80070b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	1e5a      	subs	r2, r3, #1
 80070ba:	60fa      	str	r2, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d102      	bne.n	80070c6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070c4:	e02c      	b.n	8007120 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0ef      	beq.n	80070b6 <SDMMC_GetCmdResp7+0x1e>
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1ea      	bne.n	80070b6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d004      	beq.n	80070f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2204      	movs	r2, #4
 80070f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070f2:	2304      	movs	r3, #4
 80070f4:	e014      	b.n	8007120 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d004      	beq.n	800710c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007108:	2301      	movs	r3, #1
 800710a:	e009      	b.n	8007120 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2240      	movs	r2, #64	; 0x40
 800711c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800711e:	2300      	movs	r3, #0

}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	24000000 	.word	0x24000000
 8007130:	10624dd3 	.word	0x10624dd3

08007134 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800713c:	4b11      	ldr	r3, [pc, #68]	; (8007184 <SDMMC_GetCmdError+0x50>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a11      	ldr	r2, [pc, #68]	; (8007188 <SDMMC_GetCmdError+0x54>)
 8007142:	fba2 2303 	umull	r2, r3, r2, r3
 8007146:	0a5b      	lsrs	r3, r3, #9
 8007148:	f241 3288 	movw	r2, #5000	; 0x1388
 800714c:	fb02 f303 	mul.w	r3, r2, r3
 8007150:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	1e5a      	subs	r2, r3, #1
 8007156:	60fa      	str	r2, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d102      	bne.n	8007162 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800715c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007160:	e009      	b.n	8007176 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0f1      	beq.n	8007152 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a06      	ldr	r2, [pc, #24]	; (800718c <SDMMC_GetCmdError+0x58>)
 8007172:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	24000000 	.word	0x24000000
 8007188:	10624dd3 	.word	0x10624dd3
 800718c:	002000c5 	.word	0x002000c5

08007190 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007194:	4904      	ldr	r1, [pc, #16]	; (80071a8 <MX_FATFS_Init+0x18>)
 8007196:	4805      	ldr	r0, [pc, #20]	; (80071ac <MX_FATFS_Init+0x1c>)
 8007198:	f000 fa06 	bl	80075a8 <FATFS_LinkDriver>
 800719c:	4603      	mov	r3, r0
 800719e:	461a      	mov	r2, r3
 80071a0:	4b03      	ldr	r3, [pc, #12]	; (80071b0 <MX_FATFS_Init+0x20>)
 80071a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80071a4:	bf00      	nop
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	240000b0 	.word	0x240000b0
 80071ac:	08007664 	.word	0x08007664
 80071b0:	240000ac 	.word	0x240000ac

080071b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80071be:	f000 f89b 	bl	80072f8 <BSP_SD_IsDetected>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d001      	beq.n	80071cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80071c8:	2302      	movs	r3, #2
 80071ca:	e012      	b.n	80071f2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80071cc:	480b      	ldr	r0, [pc, #44]	; (80071fc <BSP_SD_Init+0x48>)
 80071ce:	f7fd fbe9 	bl	80049a4 <HAL_SD_Init>
 80071d2:	4603      	mov	r3, r0
 80071d4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d109      	bne.n	80071f0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80071dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80071e0:	4806      	ldr	r0, [pc, #24]	; (80071fc <BSP_SD_Init+0x48>)
 80071e2:	f7fe fc67 	bl	8005ab4 <HAL_SD_ConfigWideBusOperation>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80071f0:	79fb      	ldrb	r3, [r7, #7]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	2400002c 	.word	0x2400002c

08007200 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af02      	add	r7, sp, #8
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	68f9      	ldr	r1, [r7, #12]
 800721c:	4806      	ldr	r0, [pc, #24]	; (8007238 <BSP_SD_ReadBlocks+0x38>)
 800721e:	f7fd fce1 	bl	8004be4 <HAL_SD_ReadBlocks>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800722c:	7dfb      	ldrb	r3, [r7, #23]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	2400002c 	.word	0x2400002c

0800723c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af02      	add	r7, sp, #8
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	68f9      	ldr	r1, [r7, #12]
 8007258:	4806      	ldr	r0, [pc, #24]	; (8007274 <BSP_SD_WriteBlocks+0x38>)
 800725a:	f7fd fe4d 	bl	8004ef8 <HAL_SD_WriteBlocks>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007268:	7dfb      	ldrb	r3, [r7, #23]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	2400002c 	.word	0x2400002c

08007278 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800727c:	4805      	ldr	r0, [pc, #20]	; (8007294 <BSP_SD_GetCardState+0x1c>)
 800727e:	f7fe fd2b 	bl	8005cd8 <HAL_SD_GetCardState>
 8007282:	4603      	mov	r3, r0
 8007284:	2b04      	cmp	r3, #4
 8007286:	bf14      	ite	ne
 8007288:	2301      	movne	r3, #1
 800728a:	2300      	moveq	r3, #0
 800728c:	b2db      	uxtb	r3, r3
}
 800728e:	4618      	mov	r0, r3
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	2400002c 	.word	0x2400002c

08007298 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80072a0:	6879      	ldr	r1, [r7, #4]
 80072a2:	4803      	ldr	r0, [pc, #12]	; (80072b0 <BSP_SD_GetCardInfo+0x18>)
 80072a4:	f7fe fbda 	bl	8005a5c <HAL_SD_GetCardInfo>
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	2400002c 	.word	0x2400002c

080072b4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80072bc:	f000 f80e 	bl	80072dc <BSP_SD_WriteCpltCallback>
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80072d0:	f000 f80b 	bl	80072ea <BSP_SD_ReadCpltCallback>
}
 80072d4:	bf00      	nop
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0

}
 80072e0:	bf00      	nop
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80072ea:	b480      	push	{r7}
 80072ec:	af00      	add	r7, sp, #0

}
 80072ee:	bf00      	nop
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80072fe:	2301      	movs	r3, #1
 8007300:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007302:	f000 f80b 	bl	800731c <BSP_PlatformIsDetected>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800730c:	2300      	movs	r3, #0
 800730e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007310:	79fb      	ldrb	r3, [r7, #7]
 8007312:	b2db      	uxtb	r3, r3
}
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007322:	2301      	movs	r3, #1
 8007324:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007326:	2101      	movs	r1, #1
 8007328:	4806      	ldr	r0, [pc, #24]	; (8007344 <BSP_PlatformIsDetected+0x28>)
 800732a:	f7f9 fe01 	bl	8000f30 <HAL_GPIO_ReadPin>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8007334:	2300      	movs	r3, #0
 8007336:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007338:	79fb      	ldrb	r3, [r7, #7]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	58020c00 	.word	0x58020c00

08007348 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007352:	4b0b      	ldr	r3, [pc, #44]	; (8007380 <SD_CheckStatus+0x38>)
 8007354:	2201      	movs	r2, #1
 8007356:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007358:	f7ff ff8e 	bl	8007278 <BSP_SD_GetCardState>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d107      	bne.n	8007372 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007362:	4b07      	ldr	r3, [pc, #28]	; (8007380 <SD_CheckStatus+0x38>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f023 0301 	bic.w	r3, r3, #1
 800736c:	b2da      	uxtb	r2, r3
 800736e:	4b04      	ldr	r3, [pc, #16]	; (8007380 <SD_CheckStatus+0x38>)
 8007370:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007372:	4b03      	ldr	r3, [pc, #12]	; (8007380 <SD_CheckStatus+0x38>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	b2db      	uxtb	r3, r3
}
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	2400000d 	.word	0x2400000d

08007384 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	4603      	mov	r3, r0
 800738c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800738e:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <SD_initialize+0x38>)
 8007390:	2201      	movs	r2, #1
 8007392:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007394:	f7ff ff0e 	bl	80071b4 <BSP_SD_Init>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d107      	bne.n	80073ae <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800739e:	79fb      	ldrb	r3, [r7, #7]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff ffd1 	bl	8007348 <SD_CheckStatus>
 80073a6:	4603      	mov	r3, r0
 80073a8:	461a      	mov	r2, r3
 80073aa:	4b04      	ldr	r3, [pc, #16]	; (80073bc <SD_initialize+0x38>)
 80073ac:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80073ae:	4b03      	ldr	r3, [pc, #12]	; (80073bc <SD_initialize+0x38>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	b2db      	uxtb	r3, r3
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	2400000d 	.word	0x2400000d

080073c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff ffbb 	bl	8007348 <SD_CheckStatus>
 80073d2:	4603      	mov	r3, r0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	4603      	mov	r3, r0
 80073ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80073f0:	f04f 33ff 	mov.w	r3, #4294967295
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	68b8      	ldr	r0, [r7, #8]
 80073fa:	f7ff ff01 	bl	8007200 <BSP_SD_ReadBlocks>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d107      	bne.n	8007414 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007404:	bf00      	nop
 8007406:	f7ff ff37 	bl	8007278 <BSP_SD_GetCardState>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1fa      	bne.n	8007406 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007414:	7dfb      	ldrb	r3, [r7, #23]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b086      	sub	sp, #24
 8007422:	af00      	add	r7, sp, #0
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
 800742a:	4603      	mov	r3, r0
 800742c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007432:	f04f 33ff 	mov.w	r3, #4294967295
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	6879      	ldr	r1, [r7, #4]
 800743a:	68b8      	ldr	r0, [r7, #8]
 800743c:	f7ff fefe 	bl	800723c <BSP_SD_WriteBlocks>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d107      	bne.n	8007456 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007446:	bf00      	nop
 8007448:	f7ff ff16 	bl	8007278 <BSP_SD_GetCardState>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1fa      	bne.n	8007448 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007456:	7dfb      	ldrb	r3, [r7, #23]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08c      	sub	sp, #48	; 0x30
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	603a      	str	r2, [r7, #0]
 800746a:	71fb      	strb	r3, [r7, #7]
 800746c:	460b      	mov	r3, r1
 800746e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007476:	4b25      	ldr	r3, [pc, #148]	; (800750c <SD_ioctl+0xac>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <SD_ioctl+0x28>
 8007484:	2303      	movs	r3, #3
 8007486:	e03c      	b.n	8007502 <SD_ioctl+0xa2>

  switch (cmd)
 8007488:	79bb      	ldrb	r3, [r7, #6]
 800748a:	2b03      	cmp	r3, #3
 800748c:	d834      	bhi.n	80074f8 <SD_ioctl+0x98>
 800748e:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <SD_ioctl+0x34>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	080074a5 	.word	0x080074a5
 8007498:	080074ad 	.word	0x080074ad
 800749c:	080074c5 	.word	0x080074c5
 80074a0:	080074df 	.word	0x080074df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074aa:	e028      	b.n	80074fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80074ac:	f107 0308 	add.w	r3, r7, #8
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff fef1 	bl	8007298 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80074b6:	6a3a      	ldr	r2, [r7, #32]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074c2:	e01c      	b.n	80074fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80074c4:	f107 0308 	add.w	r3, r7, #8
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff fee5 	bl	8007298 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074dc:	e00f      	b.n	80074fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80074de:	f107 0308 	add.w	r3, r7, #8
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff fed8 	bl	8007298 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	0a5a      	lsrs	r2, r3, #9
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074f6:	e002      	b.n	80074fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80074f8:	2304      	movs	r3, #4
 80074fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80074fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007502:	4618      	mov	r0, r3
 8007504:	3730      	adds	r7, #48	; 0x30
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	2400000d 	.word	0x2400000d

08007510 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	4613      	mov	r3, r2
 800751c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800751e:	2301      	movs	r3, #1
 8007520:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007526:	4b1f      	ldr	r3, [pc, #124]	; (80075a4 <FATFS_LinkDriverEx+0x94>)
 8007528:	7a5b      	ldrb	r3, [r3, #9]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d131      	bne.n	8007594 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007530:	4b1c      	ldr	r3, [pc, #112]	; (80075a4 <FATFS_LinkDriverEx+0x94>)
 8007532:	7a5b      	ldrb	r3, [r3, #9]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	461a      	mov	r2, r3
 8007538:	4b1a      	ldr	r3, [pc, #104]	; (80075a4 <FATFS_LinkDriverEx+0x94>)
 800753a:	2100      	movs	r1, #0
 800753c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800753e:	4b19      	ldr	r3, [pc, #100]	; (80075a4 <FATFS_LinkDriverEx+0x94>)
 8007540:	7a5b      	ldrb	r3, [r3, #9]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	4a17      	ldr	r2, [pc, #92]	; (80075a4 <FATFS_LinkDriverEx+0x94>)
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800754e:	4b15      	ldr	r3, [pc, #84]	; (80075a4 <FATFS_LinkDriverEx+0x94>)
 8007550:	7a5b      	ldrb	r3, [r3, #9]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	461a      	mov	r2, r3
 8007556:	4b13      	ldr	r3, [pc, #76]	; (80075a4 <FATFS_LinkDriverEx+0x94>)
 8007558:	4413      	add	r3, r2
 800755a:	79fa      	ldrb	r2, [r7, #7]
 800755c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800755e:	4b11      	ldr	r3, [pc, #68]	; (80075a4 <FATFS_LinkDriverEx+0x94>)
 8007560:	7a5b      	ldrb	r3, [r3, #9]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	b2d1      	uxtb	r1, r2
 8007568:	4a0e      	ldr	r2, [pc, #56]	; (80075a4 <FATFS_LinkDriverEx+0x94>)
 800756a:	7251      	strb	r1, [r2, #9]
 800756c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800756e:	7dbb      	ldrb	r3, [r7, #22]
 8007570:	3330      	adds	r3, #48	; 0x30
 8007572:	b2da      	uxtb	r2, r3
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	3301      	adds	r3, #1
 800757c:	223a      	movs	r2, #58	; 0x3a
 800757e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	3302      	adds	r3, #2
 8007584:	222f      	movs	r2, #47	; 0x2f
 8007586:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	3303      	adds	r3, #3
 800758c:	2200      	movs	r2, #0
 800758e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
}
 8007596:	4618      	mov	r0, r3
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	240000b4 	.word	0x240000b4

080075a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80075b2:	2200      	movs	r2, #0
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7ff ffaa 	bl	8007510 <FATFS_LinkDriverEx>
 80075bc:	4603      	mov	r3, r0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <__libc_init_array>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	4d0d      	ldr	r5, [pc, #52]	; (8007600 <__libc_init_array+0x38>)
 80075cc:	4c0d      	ldr	r4, [pc, #52]	; (8007604 <__libc_init_array+0x3c>)
 80075ce:	1b64      	subs	r4, r4, r5
 80075d0:	10a4      	asrs	r4, r4, #2
 80075d2:	2600      	movs	r6, #0
 80075d4:	42a6      	cmp	r6, r4
 80075d6:	d109      	bne.n	80075ec <__libc_init_array+0x24>
 80075d8:	4d0b      	ldr	r5, [pc, #44]	; (8007608 <__libc_init_array+0x40>)
 80075da:	4c0c      	ldr	r4, [pc, #48]	; (800760c <__libc_init_array+0x44>)
 80075dc:	f000 f820 	bl	8007620 <_init>
 80075e0:	1b64      	subs	r4, r4, r5
 80075e2:	10a4      	asrs	r4, r4, #2
 80075e4:	2600      	movs	r6, #0
 80075e6:	42a6      	cmp	r6, r4
 80075e8:	d105      	bne.n	80075f6 <__libc_init_array+0x2e>
 80075ea:	bd70      	pop	{r4, r5, r6, pc}
 80075ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f0:	4798      	blx	r3
 80075f2:	3601      	adds	r6, #1
 80075f4:	e7ee      	b.n	80075d4 <__libc_init_array+0xc>
 80075f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075fa:	4798      	blx	r3
 80075fc:	3601      	adds	r6, #1
 80075fe:	e7f2      	b.n	80075e6 <__libc_init_array+0x1e>
 8007600:	08007678 	.word	0x08007678
 8007604:	08007678 	.word	0x08007678
 8007608:	08007678 	.word	0x08007678
 800760c:	0800767c 	.word	0x0800767c

08007610 <memset>:
 8007610:	4402      	add	r2, r0
 8007612:	4603      	mov	r3, r0
 8007614:	4293      	cmp	r3, r2
 8007616:	d100      	bne.n	800761a <memset+0xa>
 8007618:	4770      	bx	lr
 800761a:	f803 1b01 	strb.w	r1, [r3], #1
 800761e:	e7f9      	b.n	8007614 <memset+0x4>

08007620 <_init>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	bf00      	nop
 8007624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007626:	bc08      	pop	{r3}
 8007628:	469e      	mov	lr, r3
 800762a:	4770      	bx	lr

0800762c <_fini>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr
